name: Validate PR - golang CI
"on":
  pull_request:
    branches: [main]
  merge_group:
    types: [checks_requested]
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - task-generator/remote
          - task-generator/trusted-artifacts
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
      - uses: actions/setup-go@e75c3e80bcde46e322cd5845ae46582947c9becd
        with:
          go-version-file: './${{matrix.path}}/go.mod'
          cache-dependency-path: ./${{matrix.path}}/go.sum
      - name: golangci-lint
        uses: golangci/golangci-lint-action@9511564208289d6c9378c8852eec4ca6f9431220
        with:
          working-directory: ${{matrix.path}}
          args: "--timeout=10m --build-tags='normal periodic'"
  go:
    name: Check sources
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - task-generator/remote
          - task-generator/trusted-artifacts
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
      - name: Install Go
        uses: actions/setup-go@e75c3e80bcde46e322cd5845ae46582947c9becd
        with:
          go-version-file: './${{matrix.path}}/go.mod'
          cache-dependency-path: ./${{matrix.path}}/go.sum
      - name: Check go mod status
        working-directory: ${{matrix.path}}
        run: |
          go mod tidy
          if [[ ! -z $(git status -s) ]]
          then
            echo "Go mod state is not clean:"
            git --no-pager diff
            exit 1
          fi
      - name: Check format
        working-directory: ${{matrix.path}}
        run: |
          go fmt ./...

          if [[ ! -z $(git status -s) ]]
          then
            echo "not all golang files properly gofmt'ed:"
            git --no-pager diff
            exit 1
          fi
      - name: Tests
        working-directory: ${{matrix.path}}
        run: |
          go test ./...

  security_scan:
    name: Security scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        path:
          - task-generator/remote
          - task-generator/trusted-artifacts
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
      - uses: actions/setup-go@e75c3e80bcde46e322cd5845ae46582947c9becd
        with:
          go-version-file: './${{matrix.path}}/go.mod'
          cache-dependency-path: ./${{matrix.path}}/go.sum
      # https://github.com/securego/gosec/blob/12be14859bc7d4b956b71bef0b443694aa519d8a/README.md#integrating-with-code-scanning
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-tags normal,periodic -no-fail -fmt sarif -out results.sarif ${{matrix.path}}/...'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@233052189b8c862bfaf875fb02c115f54d2b9286
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
