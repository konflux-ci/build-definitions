apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  labels:
    pipelines.openshift.io/runtime: generic
    pipelines.openshift.io/strategy: docker
    pipelines.openshift.io/used-by: build-cloud
  name: docker-build-rhtap
spec:
  finally:
  - name: show-sbom
    params:
    - name: IMAGE_URL
      value: $(tasks.build-container.results.IMAGE_URL)
    taskRef:
      name: show-sbom-rhdh
      version: "0.1"
  - name: show-summary
    params:
    - name: pipelinerun-name
      value: $(context.pipelineRun.name)
    - name: git-url
      value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
    - name: image-url
      value: $(params.output-image)
    - name: build-task-status
      value: $(tasks.build-container.status)
    taskRef:
      name: summary
      version: "0.2"
    workspaces:
    - name: workspace
      workspace: workspace
  params:
  - description: Source Repository URL
    name: git-url
    type: string
  - default: ""
    description: Revision of the Source Repository
    name: revision
    type: string
  - description: Fully Qualified Output Image
    name: output-image
    type: string
  - default: .
    description: Path to the source code of an application's component from where
      to build image.
    name: path-context
    type: string
  - default: Dockerfile
    description: Path to the Dockerfile inside the context specified by parameter
      path-context
    name: dockerfile
    type: string
  - default: "false"
    description: Force rebuild image
    name: rebuild
    type: string
  - default: ""
    description: Image tag expiration time, time values could be something like 1h,
      2d, 3w for hours, days, and weeks, respectively.
    name: image-expires-after
  - default: rox-api-token
    name: stackrox-secret
    type: string
  - default: gitops-auth-secret
    description: 'Secret name to enable this pipeline to update the gitops repo with
      the new image. '
    name: gitops-auth-secret-name
    type: string
  - default: push
    description: Event that triggered the pipeline run, e.g. push, pull_request
    name: event-type
    type: string
  - default: []
    description: Array of --build-arg values ("arg=value" strings) for buildah
    name: build-args
    type: array
  - default: ""
    description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
    name: build-args-file
    type: string
  results:
  - name: IMAGE_URL
    value: $(tasks.build-container.results.IMAGE_URL)
  - name: IMAGE_DIGEST
    value: $(tasks.build-container.results.IMAGE_DIGEST)
  - name: CHAINS-GIT_URL
    value: $(tasks.clone-repository.results.url)
  - name: CHAINS-GIT_COMMIT
    value: $(tasks.clone-repository.results.commit)
  - name: ACS_SCAN_OUTPUT
    value: $(tasks.acs-image-scan.results.SCAN_OUTPUT)
  tasks:
  - name: init
    params:
    - name: image-url
      value: $(params.output-image)
    - name: rebuild
      value: $(params.rebuild)
    taskRef:
      name: init
      version: "0.2"
  - name: clone-repository
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
    runAfter:
    - init
    taskRef:
      name: git-clone
      version: "0.1"
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    workspaces:
    - name: output
      workspace: workspace
    - name: basic-auth
      workspace: git-auth
  - name: build-container
    params:
    - name: IMAGE
      value: $(params.output-image)
    - name: DOCKERFILE
      value: $(params.dockerfile)
    - name: CONTEXT
      value: $(params.path-context)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.image-expires-after)
    - name: COMMIT_SHA
      value: $(tasks.clone-repository.results.commit)
    - name: BUILD_ARGS
      value:
      - $(params.build-args[*])
    - name: BUILD_ARGS_FILE
      value: $(params.build-args-file)
    runAfter:
    - clone-repository
    taskRef:
      name: buildah-rhtap
      version: "0.1"
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    workspaces:
    - name: source
      workspace: workspace
  - name: sast-unicode-check
    params:
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    runAfter:
    - build-image-index
    taskRef:
      name: sast-unicode-check
      version: "0.1"
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    workspaces:
    - name: workspace
      workspace: workspace
  - name: apply-tags
    params:
    - name: IMAGE
      value: $(tasks.build-image-index.results.IMAGE_URL)
    runAfter:
    - build-image-index
    taskRef:
      name: apply-tags
      version: "0.1"
  - name: push-dockerfile
    params:
    - name: IMAGE
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: DOCKERFILE
      value: $(params.dockerfile)
    - name: CONTEXT
      value: $(params.path-context)
    runAfter:
    - build-image-index
    taskRef:
      name: push-dockerfile
      version: "0.1"
    workspaces:
    - name: workspace
      workspace: workspace
  - name: rpms-signature-scan
    params:
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      name: rpms-signature-scan
      version: "0.2"
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: acs-image-check
    params:
    - name: rox-secret-name
      value: $(params.stackrox-secret)
    - name: image
      value: $(params.output-image)
    - name: insecure-skip-tls-verify
      value: "true"
    - name: image-digest
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    runAfter:
    - build-container
    taskRef:
      name: acs-image-check
  - name: acs-image-scan
    params:
    - name: rox-secret-name
      value: $(params.stackrox-secret)
    - name: image
      value: $(params.output-image)
    - name: insecure-skip-tls-verify
      value: "true"
    - name: image-digest
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    runAfter:
    - build-container
    taskRef:
      kind: Task
      name: acs-image-scan
  - name: acs-deploy-check
    params:
    - name: rox-secret-name
      value: $(params.stackrox-secret)
    - name: gitops-repo-url
      value: $(params.git-url)-gitops
    - name: insecure-skip-tls-verify
      value: "true"
    runAfter:
    - update-deployment
    taskRef:
      kind: Task
      name: acs-deploy-check
    when:
    - input: $(params.event-type)
      operator: in
      values:
      - push
      - Push
  - name: update-deployment
    params:
    - name: gitops-repo-url
      value: $(params.git-url)-gitops
    - name: image
      value: $(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)
    - name: gitops-auth-secret-name
      value: $(params.gitops-auth-secret-name)
    runAfter:
    - build-container
    taskRef:
      kind: Task
      name: update-deployment
    when:
    - input: $(params.event-type)
      operator: notin
      values:
      - pull_request
      - Merge Request
  workspaces:
  - name: workspace
  - name: git-auth
    optional: true
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gitops-pull-request
spec:
  params:
  - description: Gitops repo url
    name: git-url
    type: string
  - default: ""
    description: Gitops repo revision
    name: revision
    type: string
  - default: main
    description: The target branch for the pull request
    name: target-branch
    type: string
  - default: github.com/enterprise-contract/config//default
    description: Enterprise Contract policy to validate against
    name: ec-policy-configuration
    type: string
  - default: "true"
    description: Should EC violations cause the pipeline to fail?
    name: ec-strict
    type: string
  - default: k8s://$(context.pipelineRun.namespace)/cosign-pub
    description: The public key that EC should use to verify signatures
    name: ec-public-key
    type: string
  - default: http://rekor-server.rhtap-tas.svc
    description: The Rekor host that EC should use to look up transparency logs
    name: ec-rekor-host
    type: string
  - default: http://tuf.rhtap-tas.svc
    description: The TUF mirror that EC should use
    name: ec-tuf-mirror
    type: string
  - default: tpa-secret
    description: The name of the Secret that contains Trustification (TPA) configuration
    name: trustification-secret-name
    type: string
  - default: "true"
    description: Should the pipeline fail when there are SBOMs to upload but Trustification
      is not properly configured (i.e. the secret is missing or doesn't have all the
      required keys)?
    name: fail-if-trustification-not-configured
    type: string
  tasks:
  - name: clone-repository
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
    - name: fetchTags
      value: "true"
    taskRef:
      name: git-clone
      version: "0.1"
    workspaces:
    - name: output
      workspace: workspace
    - name: basic-auth
      workspace: git-auth
  - name: get-images-to-verify
    params:
    - name: TARGET_BRANCH
      value: $(params.target-branch)
    runAfter:
    - clone-repository
    taskRef:
      name: gather-deploy-images
      version: "0.1"
    workspaces:
    - name: source
      workspace: workspace
  - name: verify-enterprise-contract
    params:
    - name: IMAGES
      value: $(tasks.get-images-to-verify.results.IMAGES_TO_VERIFY)
    - name: STRICT
      value: $(params.ec-strict)
    - name: POLICY_CONFIGURATION
      value: $(params.ec-policy-configuration)
    - name: PUBLIC_KEY
      value: $(params.ec-public-key)
    - name: REKOR_HOST
      value: $(params.ec-rekor-host)
    - name: TUF_MIRROR
      value: $(params.ec-tuf-mirror)
    runAfter:
    - get-images-to-verify
    taskRef:
      name: verify-enterprise-contract
      version: "0.1"
    when:
    - input: $(tasks.get-images-to-verify.results.IMAGES_TO_VERIFY)
      operator: notin
      values:
      - ""
  - name: get-images-to-upload-sbom
    params:
    - name: TARGET_BRANCH
      value: $(params.target-branch)
    - name: FROM_ENVIRONMENTS
      value:
      - stage
      - prod
    runAfter:
    - clone-repository
    taskRef:
      name: gather-deploy-images
      version: "0.1"
    workspaces:
    - name: source
      workspace: workspace
  - name: download-sboms
    params:
    - name: IMAGES
      value: $(tasks.get-images-to-upload-sbom.results.IMAGES_TO_VERIFY)
    - name: SBOMS_DIR
      value: sboms
    - name: PUBLIC_KEY
      value: $(params.ec-public-key)
    - name: REKOR_HOST
      value: $(params.ec-rekor-host)
    - name: TUF_MIRROR
      value: $(params.ec-tuf-mirror)
    runAfter:
    - get-images-to-upload-sbom
    taskRef:
      name: download-sbom-from-url-in-attestation
      version: "0.1"
    when:
    - input: $(tasks.get-images-to-upload-sbom.results.IMAGES_TO_VERIFY)
      operator: notin
      values:
      - ""
    workspaces:
    - name: sboms
      workspace: workspace
  - name: upload-sboms-to-trustification
    params:
    - name: SBOMS_DIR
      value: sboms
    - name: TRUSTIFICATION_SECRET_NAME
      value: $(params.trustification-secret-name)
    - name: FAIL_IF_TRUSTIFICATION_NOT_CONFIGURED
      value: $(params.fail-if-trustification-not-configured)
    runAfter:
    - download-sboms
    taskRef:
      name: upload-sbom-to-trustification
      version: "0.1"
    when:
    - input: $(tasks.get-images-to-upload-sbom.results.IMAGES_TO_VERIFY)
      operator: notin
      values:
      - ""
    workspaces:
    - name: sboms
      workspace: workspace
