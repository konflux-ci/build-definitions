# The purpose of this pipeline is to execute the verify-enterprise-contract-v2 task for container
# images that are built but not automatically released in order to provide early feedback to users.
# When auto release is enabled, the task is executed by the release pipeline immediately after the
# container images are built, thus it is not necessary to execute the task via this pipeline.
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: enterprise-contract
  labels:
    build.appstudio.redhat.com/pipeline: "enterprise-contract"
spec:
  params:
    - name: SNAPSHOT
      type: string
      description: |
        Spec section of an ApplicationSnapshot resource. Not all fields of the
        resource are required. A minimal example:
          {
            "components": [
              {
                "containerImage": "quay.io/example/repo:latest"
              }
            ]
          }
        Each "containerImage" in the "components" array is validated.
    - name: POLICY_CONFIGURATION
      type: string
      description: |
        Name of the policy configuration (EnterpriseContractConfiguration
        object) to use. `namespace/name` or `name` syntax supported. If
        namespace is omitted the namespace where the task runs is used.
      default: enterprise-contract-service/default
    - name: SSL_CERT_DIR
      type: string
      description: |
        Path to a directory containing SSL certs to be used when communicating
        with external services. This is useful when using the integrated registry
        and a local instance of Rekor on a development cluster which may use
        certificates issued by a not-commonly trusted root CA. In such cases,
        "/var/run/secrets/kubernetes.io/serviceaccount" is a good value. Multiple
        paths can be provided by using the ":" separator.
      default: ""
    - name: PUBLIC_KEY
      type: string
      default: "k8s://openshift-pipelines/public-key"
      description: |
        Public key used to verify signatures. Must be a valid k8s cosign
        reference, e.g. k8s://my-space/my-secret where my-secret contains
        the expected cosign.pub attribute.
    - name: TIMEOUT
      type: string
      description: Timeout setting for `ec validate`.
      default: "5m0s"
    - name: CA_TRUST_CONFIGMAP_NAME
      type: string
      description: The name of the ConfigMap to read CA bundle data from.
      default: "trusted-ca"
    - name: CA_TRUST_CONFIG_MAP_KEY
      type: string
      description: The name of the key in the ConfigMap that contains the CA bundle data.
      default: "ca-bundle.crt"
    - name: SINGLE_COMPONENT
      type: string
      description: Reduce the Snapshot to only the component whose build caused the Snapshot to be created
      default: "false"
    - name: PIPELINERUN_ID
      type: string
      description: PipelineRun ID
      default: "$(context.pipelineRun.name)"
  results:
    - name: TEST_OUTPUT
      value: "$(tasks.verify.results.TEST_OUTPUT)"
  tasks:
    - name: reduce-snapshot-to-single-component
      params:
        - name: SNAPSHOT
          value: "$(params.SNAPSHOT)"
        - name: SINGLE_COMPONENT
          value: "$(params.SINGLE_COMPONENT)"
        - name: PIPELINERUN_ID
          value: "$(params.PIPELINERUN_ID)"
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: quay.io/redhat-appstudio-tekton-catalog/task-reduce-snapshot-to-single-component:0.1@sha256:6a21312aba4d8df712b5b91d9971f8528fd4716e190969e38549c84a235c364f
          - name: name
            value: reduce-snapshot-to-single-component
          - name: kind
            value: task
    - name: verify
      params:
        - name: POLICY_CONFIGURATION
          value: "$(params.POLICY_CONFIGURATION)"
        - name: IMAGES
          value: "$(tasks.reduce-snapshot-to-single-component.results.SNAPSHOT)"
        - name: SSL_CERT_DIR
          value: "$(params.SSL_CERT_DIR)"
        # It's confusing for users to see a passing taskrun that represents a failing EC test.
        # For that reason let's have the taskrun fail when there are EC violations. Also, if
        # this is set to false (IIUC), it's not possible to have the IntegrationTest gate the
        # deploy to the devel environment work, which is what users expect to be able to do.
        - name: STRICT
          value: "true"
        - name: PUBLIC_KEY
          value: "$(params.PUBLIC_KEY)"
        - name: IGNORE_REKOR
          value: "true"
        - name: TIMEOUT
          value: "$(params.TIMEOUT)"
        - name: CA_TRUST_CONFIGMAP_NAME
          value: "$(params.CA_TRUST_CONFIGMAP_NAME)"
        - name: CA_TRUST_CONFIG_MAP_KEY
          value: "$(params.CA_TRUST_CONFIG_MAP_KEY)"
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: quay.io/enterprise-contract/ec-task-bundle:snapshot@sha256:cfdf33877830c588d9be7885b1c209f196d492a1640cc95a602a6585f7f35dec
          - name: name
            value: verify-enterprise-contract
          - name: kind
            value: task
      runAfter:
        - reduce-snapshot-to-single-component
