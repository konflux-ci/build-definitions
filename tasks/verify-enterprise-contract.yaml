---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: verify-enterprise-contract
  annotations:
    tekton.dev/displayName: Verify Enterprise Contract
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: cosign, chains, signature, conftest
  labels:
    app.kubernetes.io/version: "0.1"

spec:
  description: Verify the enterprise contract is met
  params:
    - name: POLICY_CONFIGURATION
      type: string
      description: |
        Name of the policy configuration (EnterpriseContractPolicy
        object) to use. `namespace/name` or `name` syntax supported. If
        namespace is omitted the namespace where the task runs is used.
      default: ec-policy

    - name: IMAGE_REF
      type: string
      description: Image reference to verify

    - name: HACBS_TEST_OUTPUT
      type: string
      description: The name of the tekton result that holds the test output
      default: HACBS_TEST_OUTPUT

    - name: PUBLIC_KEY
      type: string
      description: >-
        Public key used to verify signatures. Must be a valid k8s cosign
        reference, e.g. k8s://my-space/my-secret where my-secret contains
        the expected cosign.pub attribute.
      default: "k8s://$(context.taskRun.namespace)/cosign-public-key"

    - name: COSIGN_EXPERIMENTAL
      type: string
      description: Control transparency log lookups. Set to "1" to enable it.
      default: "0"

    - name: REKOR_HOST
      type: string
      description: Rekor host for transparency log lookups
      default: https://rekor.sigstore.dev

    - name: SSL_CERT_DIR
      type: string
      description: |
        Path to a directory containing SSL certs to be used when communicating
        with external services. This is useful when using the integrated registry
        and a local instance of Rekor on a development cluster which may use
        certificates issued by a not-commonly trusted root CA. In such cases,
        "/var/run/secrets/kubernetes.io/serviceaccount" is a good value. Multiple
        paths can be provided by using the ":" separator.
      default: ""

    - name: STRICT_POLICY
      type: string
      description: Fail the task if policy fails. Set to "0" to disable it.
      default: "1"

  results:
    - name: OUTPUT
      description: A list of policy violations
    - name: PASSED
      description: A string formatted boolean, either true or false

  steps:
    - name: verify-image-signature
      image: appstudio-utils
      command: [cosign]
      args:
        - verify
        - "--key=$(params.PUBLIC_KEY)"
        - "--rekor-url=$(params.REKOR_HOST)"
        - $(params.IMAGE_REF)
      env:
        - name: SSL_CERT_DIR
          # The Tekton Operator automatically sets the SSL_CERT_DIR env to the value below but,
          # of course, without the $(param.SSL_CERT_DIR) bit. When a Task Step sets it to a
          # value, the Tekton Operator does not do any processing of the value. However, Tekton
          # Pipelines will fail to execute because some of these values are required for its
          # execution. As a workaround, append the SSL_CERT_DIR value from params to the default
          # value expected by Tekton Pipelines. NOTE: If params.SSL_CERT_DIR is empty, the value
          # will contain a trailing ":" - this is ok.
          value: "/tekton-custom-certs:/etc/ssl/certs:/etc/pki/tls/certs:/system/etc/security/cacerts:$(params.SSL_CERT_DIR)"
        - name: COSIGN_EXPERIMENTAL
          value: $(params.COSIGN_EXPERIMENTAL)
      volumeMounts:
        - name: shared
          mountPath: /shared

    - name: verify-image-attestation-signature
      image: appstudio-utils
      command: [cosign]
      args:
        - verify-attestation
        - "--key=$(params.PUBLIC_KEY)"
        - "--rekor-url=$(params.REKOR_HOST)"
        - "--output-file=/shared/image-in-toto-attestation.json"
        - $(params.IMAGE_REF)
      env:
        - name: SSL_CERT_DIR
          # The Tekton Operator automatically sets the SSL_CERT_DIR env to the value below but,
          # of course, without the $(param.SSL_CERT_DIR) bit. When a Task Step sets it to a
          # value, the Tekton Operator does not do any processing of the value. However, Tekton
          # Pipelines will fail to execute because some of these values are required for its
          # execution. As a workaround, append the SSL_CERT_DIR value from params to the default
          # value expected by Tekton Pipelines. NOTE: If params.SSL_CERT_DIR is empty, the value
          # will contain a trailing ":" - this is ok.
          value: "/tekton-custom-certs:/etc/ssl/certs:/etc/pki/tls/certs:/system/etc/security/cacerts:$(params.SSL_CERT_DIR)"
        - name: COSIGN_EXPERIMENTAL
          value: $(params.COSIGN_EXPERIMENTAL)
      volumeMounts:
        - name: shared
          mountPath: /shared

    - name: verify-attestation-with-policy
      image: appstudio-utils
      command: [/appstudio-utils/util-scripts/verify-attestation-with-policy.sh]
      args:
        - /shared/image-in-toto-attestation.json
        - $(results.OUTPUT.path)
        - $(results.PASSED.path)
      env:
        - name: EC_WORK_DIR
          value: /shared/ec-work-dir
        - name: STRICT_POLICY
          value: $(params.STRICT_POLICY)
        - name: POLICY_CONFIGURATION
          value: $(params.POLICY_CONFIGURATION)
      volumeMounts:
        - name: shared
          mountPath: /shared

  volumes:
    - name: shared
      emptyDir: {}
