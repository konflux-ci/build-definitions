apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build
  name: generate-sbom
spec:
  description: |-
    Buildah task builds source into a container image and then pushes it to a container registry.
    Buildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from Dockerfiles, using its buildah bud command.This command executes the directives in the Dockerfile to assemble a container image, then pushes that image to a container registry.
  params:
  - description: Reference of the image buildah will produce.
    name: IMAGE
    type: string
  - default: registry.access.redhat.com/ubi8/buildah@sha256:31f84b19a0774be7cfad751be38fc97f5e86cefd26e0abaec8047ddc650b00bf
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: vfs
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    name: TLSVERIFY
    type: string
  - default: oci
    description: The format of the built container, oci or docker
    name: FORMAT
    type: string
  - default: ""
    description: Extra parameters passed for the build command when building images.
    name: BUILD_EXTRA_ARGS
    type: string
  - default: ""
    description: Extra parameters passed for the push command when pushing images.
    name: PUSH_EXTRA_ARGS
    type: string
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository where the built image was pushed
    name: IMAGE_URL
  steps:
  - image: quay.io/redhat-appstudio/syft:v0.46.2
    name: sbom-source
    args:
      - dir:$(workspaces.source.path)
      - --file=$(workspaces.source.path)/sbom-source.json
      - --output=cyclonedx-json
  - image: quay.io/redhat-appstudio/syft:v0.46.2
    name: sbom-image
    args:
      - oci-dir:/var/lib/containers/oci
      - --file=$(workspaces.source.path)/sbom-image.json
      - --output=cyclonedx-json
  - image: registry.redhat.io/ubi8/python-39:1-51
    name: merge-sboms
    script: |
      #!/bin/python3
      import json

      with open("./sbom-image.json") as f:
        image_sbom = json.load(f)

      with open("./sbom-source.json") as f:
        source_sbom = json.load(f)

      def get_identifier(component):
        return component["name"] + '@' + component.get("version", "")

      existing_components = [get_identifier(component) for component in image_sbom["components"]]

      for component in source_sbom["components"]:
        if get_identifier(component) not in existing_components:
          image_sbom["components"].append(component)

      image_sbom["components"].sort(key=lambda c: get_identifier(c))

      with open("./sbom.json", "w") as f:
        json.dump(image_sbom, f)
    workingDir: $(workspaces.source.path)
    securityContext:
      runAsUser: 0
  - image: $(params.BUILDER_IMAGE)
    name: inject-sbom
    resources: {}
    script: |
      container=$(buildah from --storage-driver=$(params.STORAGE_DRIVER) --pull-never $(params.IMAGE))
      buildah --storage-driver=$(params.STORAGE_DRIVER) copy $container sbom.json /root/
      buildah --storage-driver=$(params.STORAGE_DRIVER) commit $container $(params.IMAGE)
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
  - name: varlibcontainers
    mountPath: /var/lib/containers
