apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sast-snyk-check
spec:
  description: >-
    Static code security test with snyk
  results:
    - description: Test output
      name: HACBS_TEST_OUTPUT
  params:
    - name: SHARED_SECRET
      default: test-team-snyk
    - name: ARGS
      type: string
      description: extra args needs to append
      default: "--all-projects --exclude=test*,vendor,deps"
  volumes:
    - name: snyk-secret
      csi:
        readOnly: true
        driver: csi.sharedresource.openshift.io
        volumeAttributes:
          sharedSecret: $(params.SHARED_SECRET)
  steps:
    - name: sast-snyk-check
      image: quay.io/redhat-appstudio/hacbs-test:feature-sast
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      volumeMounts:
        - name: snyk-secret
          mountPath: "/etc/secrets"
          readOnly: true
      script: |
        #!/usr/bin/env bash
        SNYK_TOKEN="$(cat /etc/secrets/snyk_token)"
        if [[ -z $SNYK_TOKEN ]]; then
          echo "SNYK_TOKEN is empty and a secret 'test-team-snyk' which includes 'snyk_token' need to be created in test-team namespace" | tee stdout.txt
          exit 0
        fi
        export SNYK_TOKEN
        SNYK_EXIT_CODE=0
        snyk code test $(params.ARGS) ../.. --sarif-file-output=sast_snyk_check_out.json 1>&2>> stdout.txt || SNYK_EXIT_CODE=$?
        test_not_skipped=0
        SKIP_MSG="We found 0 supported files"
        grep -q "$SKIP_MSG" stdout.txt || test_not_skipped=$?
        if [[ "$SNYK_EXIT_CODE" -eq 0 ]] || [[ "$SNYK_EXIT_CODE" -eq 1 ]]; then
          cat sast_snyk_check_out.json
          HACBS_TEST_OUTPUT=$(jq -rce --arg date $(date +%s) \
            '{ result: (if (.runs[].results | length > 0) then "FAILURE" else "SUCCESS" end),
                   timestamp: $date,
                   namespace: "default",
                   successes: 0,
                   note: "",
                   failures: (.runs[].results // [])|map(.message.text) | unique
                 }' sast_snyk_check_out.json || true)
        # When the test is skipped, the "SNYK_EXIT_CODE" is 3 and it can also be 3 in some other situation
        elif [[ "$test_not_skipped" -eq 0 ]]; then
          HACBS_ERROR_OUTPUT=$(jq -rc --arg date $(date +%s) --arg SKIP_MESSAGE "${SKIP_MSG}" --null-input \
            '{result: "SKIPPED", note: $SKIP_MESSAGE, timestamp: $date}')
        else
          ERR_MSG="$(cat stdout.txt)"
          HACBS_ERROR_OUTPUT=$(jq -rc --arg date $(date +%s) --arg ERR_MESSAGE "${ERR_MSG}" --null-input \
            '{result: "ERROR", timestamp: $date, failures: [$ERR_MESSAGE]}')
        fi
        echo "${HACBS_TEST_OUTPUT:-${HACBS_ERROR_OUTPUT}}" | tee $(results.HACBS_TEST_OUTPUT.path)
  workspaces:
  - name: workspace
