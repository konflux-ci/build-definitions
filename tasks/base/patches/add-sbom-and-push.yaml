- op: remove
  path: /metadata/labels/build-definition.include

- op: add
  path: /spec/results/-
  value:
    name: SBOM_JAVA_COMPONENTS_COUNT
    description: The counting of Java components by publisher in JSON format

- op: add
  path: /spec/steps/-
  value:
    image: $(params.BUILDER_IMAGE)
    name: mount-container
    resources: {}
    script: |
      container=$(buildah from --pull-never $(params.IMAGE))
      buildah mount $container | tee /workspace/container_path
      echo $container > /workspace/container_name
    securityContext:
      capabilities:
        add:
          - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)

- op: add
  path: /spec/steps/-
  value:
    image: quay.io/redhat-appstudio/syft:v0.47.0
    name: sbom-get
    script: |
      syft dir:$(workspaces.source.path) --file=$(workspaces.source.path)/sbom-source.json --output=cyclonedx-json
      find $(cat /workspace/container_path) -xtype l -delete
      syft dir:$(cat /workspace/container_path) --file=$(workspaces.source.path)/sbom-image.json --output=cyclonedx-json
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers

- op: add
  path: /spec/steps/-
  value:
    name: analyse-dependencies-java-sbom
    image: quay.io/redhat-appstudio/hacbs-jvm-dependency-analyser:70a63556e607e02fe6a19a3f13bb35cedc1f3043
    script: |
      if [ -f /var/lib/containers/java ]; then
        /opt/jboss/container/java/run/run-java.sh path $(cat /workspace/container_path) -s $(workspaces.source.path)/sbom-java.json
      fi

    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    securityContext:
      runAsUser: 0

- op: add
  path: /spec/steps/-
  value:
    env:
      - name: SBOM_JAVA_COMPONENTS_COUNT_PATH
        value: $(results.SBOM_JAVA_COMPONENTS_COUNT.path)
    image: registry.redhat.io/ubi8/python-39:1-51
    name: merge-sboms
    script: |
      #!/bin/python3
      import json
      import os

      # load SBOMs
      with open("./sbom-image.json") as f:
        image_sbom = json.load(f)

      with open("./sbom-source.json") as f:
        source_sbom = json.load(f)

      java_sbom = { "components" : [] }
      if os.path.exists("./sbom-java.json"):
        with open("./sbom-java.json") as f:
          java_sbom = json.load(f)

      # fetch unique components from available SBOMs
      def get_identifier(component):
        return component["name"] + '@' + component.get("version", "")

      existing_components = [get_identifier(component) for component in image_sbom["components"]]

      for component in source_sbom["components"]:
        if get_identifier(component) not in existing_components:
          image_sbom["components"].append(component)
          existing_components.append(get_identifier(component))

      for component in java_sbom.get("components", []):
        if get_identifier(component) not in existing_components:
          image_sbom["components"].append(component)

      image_sbom["components"].sort(key=lambda c: get_identifier(c))

      # write the CycloneDX unified SBOM
      with open("./sbom-cyclonedx.json", "w") as f:
        json.dump(image_sbom, f, indent=4)

      # create and write the PURL unified SBOM
      purls = [{"purl": component["purl"]} for component in image_sbom["components"] if "purl" in component]
      purl_content = {"image_contents": {"dependencies": purls}}

      with open("sbom-purl.json", "w") as output_file:
        json.dump(purl_content, output_file, indent=4)

      # create Tekton result containing counting of Java publishers
      java_publishers = {}

      for component in java_sbom.get("components", []):
        publisher = component.get("publisher", None)

        if publisher is None:
          continue

        if publisher not in java_publishers.keys():
          java_publishers[publisher] = 0

        java_publishers[publisher] += 1

      with open(os.getenv("SBOM_JAVA_COMPONENTS_COUNT_PATH"), "w") as f:
        json.dump(java_publishers, f, indent=4)

    workingDir: $(workspaces.source.path)
    securityContext:
      runAsUser: 0

- op: add
  path: /spec/steps/-
  value:
    image: $(params.BUILDER_IMAGE)
    name: inject-sbom-and-push
    resources: {}
    script: |
      # Expose base image digests
      buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' | grep -v $(params.IMAGE) > $(results.BASE_IMAGES_DIGESTS.path)

      base_image_name=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.name"}}' $(params.IMAGE))
      base_image_digest=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.digest"}}' $(params.IMAGE))
      container=$(buildah from --pull-never $(params.IMAGE))
      buildah copy $container sbom-cyclonedx.json sbom-purl.json /root/buildinfo/content_manifests/
      buildah config -a org.opencontainers.image.base.name=${base_image_name} -a org.opencontainers.image.base.digest=${base_image_digest} $container
      buildah commit $container $(params.IMAGE)
      buildah push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
        docker://$(params.IMAGE)
      cat "$(workspaces.source.path)"/image-digest | tee $(results.IMAGE_DIGEST.path)
      echo "$(params.IMAGE)" | tee $(results.IMAGE_URL.path)
    securityContext:
      runAsUser: 0
      capabilities:
        add:
          - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)

- op: add
  path: /spec/sidecars
  value:
  - image: quay.io/redhat-appstudio/hacbs-jvm-sidecar:70a63556e607e02fe6a19a3f13bb35cedc1f3043
    env:
      - name: QUARKUS_REST_CLIENT_CACHE_SERVICE_URL
        value: "http://jvm-build-workspace-artifact-cache.$(context.taskRun.namespace).svc.cluster.local"
    name: proxy
    securityContext:
      runAsUser: 0
    livenessProbe:
      httpGet:
        path: /q/health/live
        port: 2000
      initialDelaySeconds: 1
      periodSeconds: 3
    readinessProbe:
      httpGet:
        path: /q/health/ready
        port: 2000
      initialDelaySeconds: 1
      periodSeconds: 3
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
