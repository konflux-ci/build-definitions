---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: verify-enterprise-contract-v2
  annotations:
    tekton.dev/displayName: Verify Enterprise Contract V2
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: ec, chains, signature, conftest
  labels:
    app.kubernetes.io/version: "0.2"

spec:
  description: Verify the enterprise contract is met
  params:
    - name: IMAGES
      type: string
      description: |
        The spec portion of an ApplicationSnapshot resource providing
        the image references to verify.

    - name: POLICY_CONFIGURATION
      type: string
      description: |
        Name of the policy configuration (EnterpriseContractPolicy
        resource) to use. `namespace/name` or `name` syntax supported. If
        namespace is omitted the namespace where the task runs is used.
      default: "$(context.taskRun.namespace)/ec-policy"

    - name: PUBLIC_KEY
      type: string
      description: >-
        Public key used to verify signatures. Must be a valid k8s cosign
        reference, e.g. k8s://my-space/my-secret where my-secret contains
        the expected cosign.pub attribute.
      default: "k8s://$(context.taskRun.namespace)/cosign-public-key"

    - name: REKOR_HOST
      type: string
      description: Rekor host for transparency log lookups
      default: ""

    - name: SSL_CERT_DIR
      type: string
      description: |
        Path to a directory containing SSL certs to be used when communicating
        with external services. This is useful when using the integrated registry
        and a local instance of Rekor on a development cluster which may use
        certificates issued by a not-commonly trusted root CA. In such cases,
        "/var/run/secrets/kubernetes.io/serviceaccount" is a good value. Multiple
        paths can be provided by using the ":" separator.
      default: ""

    - name: STRICT
      type: string
      description: Fail the task if policy fails. Set to "false" to disable it.
      default: "true"

  results:
    - name: REPORT
      description: Details of the policy evaluation for each image

  steps:
    - name: version
      image: appstudio-utils
      command: [ec]
      args:
        - version
    - name: validate
      image: appstudio-utils
      command: [ec]
      args:
        - validate
        - image
        - "--json-input"
        - "$(params.IMAGES)"
        - "--policy"
        - "$(params.POLICY_CONFIGURATION)"
        - "--public-key"
        - "$(params.PUBLIC_KEY)"
        - "--rekor-url"
        - "$(params.REKOR_HOST)"
        # NOTE: The syntax below is required to negate boolean parameters
        - "--strict=false"
        - "--output-file"
        - "$(results.REPORT.path)"
      env:
        - name: SSL_CERT_DIR
          # The Tekton Operator automatically sets the SSL_CERT_DIR env to the value below but,
          # of course, without the $(param.SSL_CERT_DIR) bit. When a Task Step sets it to a
          # value, the Tekton Operator does not do any processing of the value. However, Tekton
          # Pipelines will fail to execute because some of these values are required for its
          # execution. As a workaround, append the SSL_CERT_DIR value from params to the default
          # value expected by Tekton Pipelines. NOTE: If params.SSL_CERT_DIR is empty, the value
          # will contain a trailing ":" - this is ok.
          value: "/tekton-custom-certs:/etc/ssl/certs:/etc/pki/tls/certs:/system/etc/security/cacerts:$(params.SSL_CERT_DIR)"
    - name: display
      image: appstudio-utils
      command: [jq]
      args:
        - "."
        - "$(results.REPORT.path)"
    - name: assert
      image: appstudio-utils
      command: [jq]
      args:
        - "--argjson"
        - "strict"
        - "$(params.STRICT)"
        - "-e"
        - ".success or ($strict | not)"
        - "$(results.REPORT.path)"
