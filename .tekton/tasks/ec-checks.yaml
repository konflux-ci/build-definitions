apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: ec-checks
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/displayName: "Enterprise Contract Checks"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task can be used to run enterprise contract checks
  steps:
  - name: gather-tasks
    image: quay.io/redhat-appstudio/appstudio-utils:512cca38316355d6dbfc9c23ed3c5afabb943d24
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
    workingDir: $(workspaces.source.path)/source
    script: |
      source hack/ec-checks.sh
      $(build_tasks_dir build_tasks-ec)
      $(all_tasks_dir all_tasks-ec)
  - name: validate-all-tasks
    workingDir: "$(workspaces.source.path)/source"
    image: quay.io/enterprise-contract/ec-cli:snapshot@sha256:e1c1c04fd693efd2eaedc59a796186301b70e0bfe8155e7da533d7835f58ce2c
    script: |
      set -euo pipefail

      # Generate list of file parameters, e.g. --file foo.yaml --file bar.yaml
      files=(all_tasks-ec/*.yaml)
      args=${files[*]/#/--file }
      echo "[DEBUG] Files parameter: ${args[*]}"

      policy='enterprise-contract-service/redhat-trusted-tasks'

      ec validate input --policy "${policy}" --output yaml --strict=true ${args[*]}
  - name: validate-build-tasks
    workingDir: "$(workspaces.source.path)/source"
    image: quay.io/enterprise-contract/ec-cli:snapshot@sha256:e1c1c04fd693efd2eaedc59a796186301b70e0bfe8155e7da533d7835f58ce2c
    script: |
      set -euo pipefail

      # Generate list of file parameters, e.g. --file foo.yaml --file bar.yaml
      files=(build_tasks-ec/*.yaml)
      args=${files[*]/#/--file }
      echo "[DEBUG] Files parameter: ${args[*]}"

      policy='./policies/build-tasks.yaml'

      ec validate input --policy "${policy}" --output yaml --strict=true ${args[*]}
  workspaces:
    - name: source
