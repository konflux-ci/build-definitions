---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: build-definitions-pull-request
  annotations:
    pipelinesascode.tekton.dev/on-event: "pull_request"
    pipelinesascode.tekton.dev/on-target-branch: "main"
    pipelinesascode.tekton.dev/task: "[task/git-clone/0.1/git-clone.yaml, .tekton/tasks/buildah.yaml, .tekton/tasks/yaml-lint.yaml, .tekton/tasks/e2e-test.yaml, task/sast-snyk-check/0.1/sast-snyk-check.yaml]"
    pipelinesascode.tekton.dev/task-2: "yaml-lint"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: e2e_test_namespace
      value: build-templates-e2e
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      - name: e2e_test_namespace
    workspaces:
      - name: workspace
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: workspace
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
          - name: depth
            value: "0"
      - name: yaml-lint-check
        runAfter:
          - fetch-repository
        taskRef:
          name: yaml-lint
        workspaces:
          - name: shared-workspace
            workspace: workspace
        params:
        - name: args
          value: [".", "-c", "/workspace/shared-workspace/source/.yamllint"]
      - name: sast-snyk-check
        params:
          - name: SNYK_SECRET
            value: snyk-shared-secret
        runAfter:
          - fetch-repository
        taskRef:
          name: sast-snyk-check
        workspaces:
          - name: workspace
            workspace: workspace
      - name: build-container
        runAfter:
          - yaml-lint-check
        params:
          - name: IMAGE
            value: quay.io/redhat-appstudio/pull-request-builds:build-definitions-utils-{{revision}}
          - name: CONTEXT
            value: appstudio-utils
        taskRef:
          name: buildah
        workspaces:
          - name: source
            workspace: workspace
      - name: check-partner-tasks
        runAfter:
          - build-container
        taskSpec:
          steps:
            - name: check-task-structure
              image: quay.io/redhat-appstudio/pull-request-builds:build-definitions-utils-{{revision}}
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              workingDir: $(workspaces.source.path)/source
              script: |
                #!/usr/bin/env bash
                ./hack/check-partner-tasks.sh > partner-tasks.out
                echo $? > partner-tasks-code.out
                cat partner-tasks.out
            - name: create-comment
              image: quay.io/redhat-appstudio/github-app-token@sha256:b4f2af12e9beea68055995ccdbdb86cfe1be97688c618117e5da2243dc1da18e
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              volumeMounts:
                - name: infra-deployments-pr-creator
                  mountPath: /secrets/deploy-key
              workingDir: $(workspaces.source.path)/source
              env:
                - name: GITHUBAPP_KEY_PATH
                  value: /secrets/deploy-key/private-key
                - name: GITHUBAPP_APP_ID
                  value: "305606"
                - name: GITHUBAPP_INSTALLATION_ID
                  value: "35269675"
                - name: GITHUB_API_URL
                  value: https://api.github.com
                - name: REPO_OWNER
                  value: "{{repo_owner}}"
                - name: REPO_NAME
                  value: "{{repo_name}}"
                - name: PULL_REQUEST_NUMBER
                  value: "{{pull_request_number}}"
              script: |
                #!/usr/bin/env bash
                exit_code=$(cat partner-tasks-code.out)
                if [ $exit_code != "0" ]; then
                  .tekton/scripts/github-update-comment.py partner-tasks.out
                fi
                exit $exit_code
          workspaces:
            - name: source
          volumes:
            - name: infra-deployments-pr-creator
              secret:
                secretName: infra-deployments-pr-creator
        workspaces:
          - name: source
            workspace: workspace
      - name: build-bundles
        params:
          - name: revision
            value: "{{ revision }}"
          - name: e2e_test_namespace
            value: $(params.e2e_test_namespace)
        runAfter:
          - build-container
        workspaces:
          - name: source
            workspace: workspace
        taskSpec:
          params:
            - name: revision
              type: string
            - name: e2e_test_namespace
              type: string
          steps:
            - name: build-bundles
              image: quay.io/redhat-appstudio/pull-request-builds:build-definitions-utils-{{revision}}
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              workingDir: $(workspaces.source.path)/source
              script: |
                #!/usr/bin/env bash
                MY_QUAY_USER=redhat-appstudio-tekton-catalog \
                TEST_REPO_NAME=pull-request-builds \
                BUILD_TAG=$(params.revision) \
                SKIP_BUILD=1 \
                INSTALL_BUNDLE_NS=$(params.e2e_test_namespace) \
                ENABLE_SOURCE_BUILD=1 \
                hack/build-and-push.sh
              volumeMounts:
                - mountPath: /root/.docker/config.json
                  subPath: .dockerconfigjson
                  name: quay-secret
          volumes:
          - name: quay-secret
            secret:
              secretName: redhat-appstudio-tekton-catalog-build-definitions-pull-secret
          workspaces:
            - name: source
      - name: e2e-tests
        params:
          - name: e2e_test_namespace
            value: $(params.e2e_test_namespace)
          - name: app_suffix
            value: "{{ pull_request_number }}"
        runAfter:
          - build-bundles
        taskRef:
          name: e2e-test
      - name: check-task-pipeline-repo-existence
        runAfter:
          - build-bundles
        taskSpec:
          steps:
            - name: fail-when-repo-is-missed
              image: registry.redhat.io/openshift4/ose-tools-rhel8:v4.12@sha256:2098dc35cf999984ffb2a0aebd4f8bb1b52f1e2c308efef90831a3660c75c358
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              workingDir: $(workspaces.source.path)/source
              script: |
                #!/usr/bin/env bash
                .tekton/scripts/check-task-pipeline-bundle-repos.sh
          workspaces:
            - name: source
        workspaces:
          - name: source
            workspace: workspace
      - name: ec-task-checks
        runAfter:
          - fetch-repository
        taskRef:
          name: ec-checks
        workspaces:
          - name: source
            workspace: workspace
      - name: check-task-migration-md
        runAfter:
          - fetch-repository
        taskSpec:
          steps:
            - name: check-task-migration-md
              image: registry.redhat.io/openshift4/ose-tools-rhel8:v4.12@sha256:9deda623e4768ecbaa6f1c6204077d9a151d55f9569bfe414e793fcb36cc391e
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              workingDir: $(workspaces.source.path)/source
              script: |
                #!/usr/bin/env bash
                EXIT=0
                for TASK_DIR in $(ls task); do
                  # Do not check on initial version of task
                  for VERSION in $(ls -d task/$TASK_DIR/*/ | sort --version-sort | tail -n+2); do
                    MIGRATION_FILE=${VERSION}MIGRATION.md
                    if [ ! -f $MIGRATION_FILE ]; then
                       echo "Missing file $MIGRATION_FILE"
                       EXIT=1
                    fi
                  done
                done
                exit $EXIT
          workspaces:
            - name: source
        workspaces:
          - name: source
            workspace: workspace
    finally:
      - name: e2e-cleanup
        params:
          - name: e2e_test_namespace
            value: $(params.e2e_test_namespace)
        taskSpec:
          params:
            - name: e2e_test_namespace
              type: string
          steps:
            - name: e2e-cleanup
              image: registry.redhat.io/openshift4/ose-cli:v4.12@sha256:0d21299d2adfa3cb74562c4dffbedd3b107fffac3a2a537f14770088abd4671f
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              script: |
                #!/usr/bin/env bash
                # Perform cleanup of resources created by gitops service
                oc delete --ignore-not-found deployment --all -n $(params.e2e_test_namespace)
                oc delete --ignore-not-found eventlisteners --all -n $(params.e2e_test_namespace)
                for name in $(
                  oc get pipelineruns --namespace $(params.e2e_test_namespace) -o jsonpath='{range .items[?(@.metadata.deletionTimestamp < "'$(date -d "1 days ago" --utc +%Y-%m-%dT%H:%M:%SZ)'")]}{.metadata.name}{"\n"}{end}'); do
                  oc patch pipelinerun "$name" -n $(params.e2e_test_namespace) --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]'
                done

  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
