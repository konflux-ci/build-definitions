---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: build-definitions-bundle-push
  annotations:
    pipelinesascode.tekton.dev/on-event: "push"
    pipelinesascode.tekton.dev/on-target-branch: "main"
    pipelinesascode.tekton.dev/task: "[task/update-infra-deployments/0.1/update-infra-deployments.yaml, task/git-clone/0.1/git-clone.yaml, .tekton/tasks/buildah.yaml, task/slack-webhook-notification/0.1/slack-webhook-notification.yaml, .tekton/tasks/ec-checks.yaml]"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    - name: git-url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: slack-webhook-notification-team
      value: "integration-slack-alerts"
  pipelineSpec:
    params:
      - description: 'Source Repository URL'
        name: git-url
        type: string
      - description: 'Revision of the Source Repository'
        name: revision
        type: string
      - name: slack-webhook-notification-team
        default: ""
        type: string
    tasks:
      - name: clone-repository
        params:
          - name: url
            value: $(params.git-url)
          - name: revision
            value: "$(params.revision)"
          - name: depth
            value: "0"
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: workspace
      - name: ec-task-checks
        runAfter:
          - clone-repository
        taskRef:
          name: ec-checks
        workspaces:
          - name: source
            workspace: workspace
      - name: build-container
        params:
          - name: IMAGE
            value: quay.io/redhat-appstudio/appstudio-utils:{{ revision }}
          - name: CONTEXT
            value: appstudio-utils
        runAfter:
          - clone-repository
        taskRef:
          name: buildah
        workspaces:
          - name: source
            workspace: workspace
      - name: build-bundles
        params:
          - name: revision
            value: "$(params.revision)"
        runAfter:
          - build-container
        workspaces:
          - name: source
            workspace: workspace
        taskSpec:
          params:
            - name: revision
              type: string
          steps:
            - name: build-bundles
              image: quay.io/redhat-appstudio/appstudio-utils:{{ revision }}
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              workingDir: $(workspaces.source.path)/source
              command: ["./hack/build-and-push.sh"]
              env:
                - name: MY_QUAY_USER
                  value: redhat-appstudio-tekton-catalog
                - name: BUILD_TAG
                  value: "$(params.revision)"
                - name: SKIP_BUILD
                  value: "1"
                - name: SKIP_INSTALL
                  value: "1"
              volumeMounts:
                - mountPath: /root/.docker/config.json
                  subPath: .dockerconfigjson
                  name: quay-secret
          volumes:
          - name: quay-secret
            secret:
              secretName: redhat-appstudio-tekton-catalog-build-definitions-pull-secret
          workspaces:
            - name: source
      - name: update-infra-repo
        runAfter:
          - build-bundles
        params:
          - name: ORIGIN_REPO
            value: $(params.git-url)
          - name: REVISION
            value: $(params.revision)
          - name: SCRIPT
            value: |
              sed -i -E 's/[0-9a-f]{40}/$(params.revision)/g' components/build-service/base/build-pipeline-selectors/build-pipeline-selector.yaml
        taskRef:
          name: update-infra-deployments
      - name: build-acceptable-bundles
        runAfter:
          - build-bundles
        workspaces:
          - name: artifacts
            workspace: workspace
        taskSpec:
          workspaces:
            - name: artifacts
              description: Workspace containing arbitrary artifacts used during the task run.
          volumes:
          - name: quay-secret
            secret:
              secretName: redhat-appstudio-tekton-catalog-build-definitions-pull-secret
          steps:
            - name: build-bundles
              image: quay.io/redhat-appstudio/appstudio-utils:{{ revision }}
              workingDir: $(workspaces.artifacts.path)/source
              env:
              - name: REVISION
                value: "$(params.revision)"
              - name: GIT_URL
                value: "$(params.git-url)"
              # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
              # the cluster will set imagePullPolicy to IfNotPresent
              # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
              script: |-
                #!/usr/bin/env bash

                export BUNDLES=(
                  $(workspaces.artifacts.path)/source/task-bundle-list
                  $(workspaces.artifacts.path)/source/pipeline-bundle-list
                )

                .tekton/scripts/build-acceptable-bundles.sh

              volumeMounts:
                - mountPath: /root/.docker/config.json
                  subPath: .dockerconfigjson
                  name: quay-secret
    workspaces:
      - name: workspace
    finally:
      - name: slack-webhook-notification
        taskRef:
          name: slack-webhook-notification
        when:
        - input: $(params.slack-webhook-notification-team)
          operator: notin
          values: [""]
        - input: $(tasks.status)
          operator: in
          values: ["Failed"]
        params:
        - name: message
          value: ":x: Tekton pipelineRun $(context.pipelineRun.name) failed"
        - name: key-name
          value: $(params.slack-webhook-notification-team)
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
