apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ecosystem-cert-preflight-checks
spec:
  description: >-
    Scans container images for certification readiness
  params:
    - name: image-url
      description: Image url to scan.
  results:
    - name: TEST_OUTPUT
      description: Preflight pass or fail outcome.
  steps:
    - name: check-container
      image: quay.io/opdev/preflight:stable@sha256:add15669e17a86d807be05671f3c9834161d7af6f41bf4a50969be2da0487fbc
      args: ["check", "container", "$(params.image-url)"]
      volumeMounts:
        - name: pfltoutputdir
          mountPath: /artifacts
    - name: gather-pflt-results
      image: quay.io/redhat-appstudio/appstudio-utils@sha256:586149e3f18d966f681d956ab074b4e1d8433663d615ed86e19a3804ba952dfe
      volumeMounts:
        - name: pfltoutputdir
          mountPath: /artifacts
      script: |
        # Declare Supported architectures
        declare -a SUPPORTED_ARCHES=("amd64", "arm64", "ppc64le", "s390x")

        # Initialize result vars
        PFLT_PASS_COUNT=0
        PFLT_FAIL_COUNT=0
        PFLT_ERROR_COUNT=0
        PFLT_RESULT="FAILURE"
        PFLT_NOTE="Task prelifght is a ${PFLT_RESULT}: Refer to Tekton task logs for more information"

        # Loop over SUPPORTED_ARCHES and process results
        for ARCH in "${SUPPORTED_ARCHES[@]}"
        do
            # Check if results directory exits
            RESULT_JSON_PATH=artifacts/${ARCH}/results.json
            if ! [ -f $RESULT_JSON_PATH ]; then
                continue
            fi
            # Process results
            PFLT_PASSED=$(cat $RESULT_JSON_PATH |jq .passed)
            if [ $PFLT_PASSED = true ]; then PFLT_RESULT="SUCCESS" ; fi
            PFLT_NOTE="Task prelifght is a ${PFLT_RESULT} : Refer to Tekton task logs for more information"
            PFLT_PASS_COUNT=`expr $PFLT_PASS_COUNT + $(cat $RESULT_JSON_PATH | jq '.results.passed | length')`
            PFLT_FAIL_COUNT=`expr $PFLT_FAIL_COUNT + $(cat $RESULT_JSON_PATH | jq '.results.failed | length')`
            PFLT_ERROR_COUNT=`expr $PFLT_ERROR_COUNT + $(cat $RESULT_JSON_PATH | jq '.results.errors | length')`
        done

        if [[ $PFLT_ERROR_COUNT > 0 ]]; then PFLT_RESULT="ERROR" ; fi

        # Generate TEST_OUTPUT
        TEST_OUTPUT=$(jq -rce \
        --arg date "$(date +%s)" \
        --arg note "${PFLT_NOTE}" \
        --arg result "${PFLT_RESULT}" \
        --arg successes "${PFLT_PASS_COUNT}" \
        --arg failures "${PFLT_FAIL_COUNT}" \
        --arg warnings "0" \
        --null-input \
        '{  result: $result,
            timestamp: $date,
            note: $note,
            successes: $successes|tonumber,
            failures: $failures|tonumber,
            warnings: $warnings|tonumber
        }')
        echo $TEST_OUTPUT | tee $(results.TEST_OUTPUT.path)
  volumes:
    - name: pfltoutputdir
      emptyDir: {}
