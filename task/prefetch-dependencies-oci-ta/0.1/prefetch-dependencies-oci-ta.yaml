---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: prefetch-dependencies-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, hacbs
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: |-
    Task that uses Cachi2 to prefetch build dependencies. The fetched dependencies and the
    application source code are stored as a trusted artifact in the provided OCI repository.
    For additional info on Cachi2, see docs at
    https://github.com/containerbuildsystem/cachi2#basic-usage.
  params:
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: caTrustConfigMapKey
      description: The name of the key in the ConfigMap that contains the
        CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: caTrustConfigMapName
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
    - name: dev-package-managers
      description: |
        Enable in-development package managers. WARNING: the behavior may change at any time without notice. Use at your own risk.
      default: "false"
    - name: input
      description: Configures project packages that will have their dependencies
        prefetched.
    - name: log-level
      description: Set cachi2 log level (debug, info, warning, error)
      default: info
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: ""
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
  results:
    - name: CACHI2_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the prefetched dependencies.
      type: string
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
  volumes:
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
    - name: workdir
      emptyDir: {}
  workspaces:
    - name: git-basic-auth
      description: |
        A Workspace containing a .gitconfig and .git-credentials file or username and password.
        These will be copied to the user's home before any cachi2 commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to bind a Secret to this Workspace over other volume types.
      optional: true
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: skip-ta
      image: registry.access.redhat.com/ubi9/ubi-minimal:9.3-1612@sha256:119ac25920c8bb50c8b5fd75dcbca369bf7d1f702b82f3d39663307890f0bf26
      env:
        - name: INPUT
          value: $(params.input)
        - name: SOURCE_ARTIFACT
          value: $(params.SOURCE_ARTIFACT)
      script: |
        if [ -z "${INPUT}" ]; then
          mkdir -p /var/workdir/source
          mkdir -p /var/workdir/cachi2
          echo "true" >/var/workdir/source/.skip-trusted-artifacts
          echo "true" >/var/workdir/cachi2/.skip-trusted-artifacts
          echo -n "${SOURCE_ARTIFACT}" >$(results.SOURCE_ARTIFACT.path)
          echo -n "" >$(results.CACHI2_ARTIFACT.path)
        fi
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:4e39fb97f4444c2946944482df47b39c5bbc195c54c6560b0647635f553ab23d
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: prefetch-dependencies
      image: quay.io/redhat-appstudio/cachi2:0.7.0@sha256:1fc772aa3636fd0b43d62120d832e5913843e028e8cac42814b487c3a0a32bd8
      volumeMounts:
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
      env:
        - name: INPUT
          value: $(params.input)
        - name: DEV_PACKAGE_MANAGERS
          value: $(params.dev-package-managers)
        - name: LOG_LEVEL
          value: $(params.log-level)
        - name: WORKSPACE_GIT_AUTH_BOUND
          value: $(workspaces.git-basic-auth.bound)
        - name: WORKSPACE_GIT_AUTH_PATH
          value: $(workspaces.git-basic-auth.path)
      script: |
        if [ -z "${INPUT}" ]; then
          # Confirm input was provided though it's likely the whole task would be skipped if it wasn't
          echo "No prefetch will be performed because no input was provided for cachi2 fetch-deps"
          exit 0
        fi

        if [ "$DEV_PACKAGE_MANAGERS" = "true" ]; then
          dev_pacman_flag=--dev-package-managers
        else
          dev_pacman_flag=""
        fi

        # Copied from https://github.com/konflux-ci/build-definitions/blob/main/task/git-clone/0.1/git-clone.yaml
        if [ "${WORKSPACE_GIT_AUTH_BOUND}" = "true" ]; then
          if [ -f "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" ]; then
            cp "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" "${HOME}/.git-credentials"
            cp "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" "${HOME}/.gitconfig"
          # Compatibility with kubernetes.io/basic-auth secrets
          elif [ -f "${WORKSPACE_GIT_AUTH_PATH}/username" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/password" ]; then
            HOSTNAME=$(cd "/var/workdir/source" && git remote get-url origin | awk -F/ '{print $3}')
            echo "https://$(cat ${WORKSPACE_GIT_AUTH_PATH}/username):$(cat ${WORKSPACE_GIT_AUTH_PATH}/password)@$HOSTNAME" >"${HOME}/.git-credentials"
            echo -e "[credential \"https://$HOSTNAME\"]\n  helper = store" >"${HOME}/.gitconfig"
          else
            echo "Unknown git-basic-auth workspace format"
            exit 1
          fi
          chmod 400 "${HOME}/.git-credentials"
          chmod 400 "${HOME}/.gitconfig"
        fi

        ca_bundle=/mnt/trusted-ca/ca-bundle.crt
        if [ -f "$ca_bundle" ]; then
          echo "INFO: Using mounted CA bundle: $ca_bundle"
          cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
          update-ca-trust
        fi

        cachi2 --log-level="$LOG_LEVEL" fetch-deps \
          $dev_pacman_flag \
          --source=/var/workdir/source \
          --output=/var/workdir/cachi2/output \
          "${INPUT}"

        cachi2 --log-level="$LOG_LEVEL" generate-env /var/workdir/cachi2/output \
          --format env \
          --for-output-dir=/cachi2/output \
          --output /var/workdir/cachi2/cachi2.env

        cachi2 --log-level="$LOG_LEVEL" inject-files /var/workdir/cachi2/output \
          --for-output-dir=/cachi2/output
    - name: create-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:4e39fb97f4444c2946944482df47b39c5bbc195c54c6560b0647635f553ab23d
      args:
        - create
        - --store
        - $(params.ociStorage)
        - $(results.SOURCE_ARTIFACT.path)=/var/workdir/source
        - $(results.CACHI2_ARTIFACT.path)=/var/workdir/cachi2
      env:
        - name: IMAGE_EXPIRES_AFTER
          value: $(params.ociArtifactExpiresAfter)
