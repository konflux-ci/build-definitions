---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: deprecated-image-check
spec:
  description: >-
    Identifies the unmaintained and potentially insecure deprecated base images.
    Pyxis API collects metadata from image repository, and Conftest applies supplied policy to identify the deprecated images using that metadata.
  params:
    - name: POLICY_DIR
      description: Path to directory containing Conftest policies.
      default: "/project/repository/"
    - name: POLICY_NAMESPACE
      description: Namespace for Conftest policy.
      default: "required_checks"
    - name: BASE_IMAGES_DIGESTS
      description: Digests of base build images.
      default: ""
    - name: IMAGE_URL
      description: Fully qualified image name.
    - name: IMAGE_DIGEST
      description: Image digest.
  results:
    - description: Tekton task test output.
      name: TEST_OUTPUT

  steps:
    - name: check-images
      image: quay.io/redhat-appstudio/konflux-test:v1.4.0@sha256:54d49b37c9a2e280d42961a57e4f7a16c171d6b065559f1329b548db85300bea
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      env:
        - name: POLICY_DIR
          value: $(params.POLICY_DIR)
        - name: POLICY_NAMESPACE
          value: $(params.POLICY_NAMESPACE)
        - name: BASE_IMAGES_DIGESTS
          value: $(params.BASE_IMAGES_DIGESTS)
        - name: IMAGE_URL
          value: $(params.IMAGE_URL)
        - name: IMAGE_DIGEST
          value: $(params.IMAGE_DIGEST)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        source /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        IMAGES_TO_BE_PROCESSED_PATH="/tmp/images_to_be_processed.txt"
        SBOM_FILE_PATH="/tmp/sbom.json"

        success_counter=0
        failure_counter=0
        error_counter=0
        warnings_counter=0

        # Get base images from SBOM
        cosign download sbom "${IMAGE_URL}@${IMAGE_DIGEST}" > ${SBOM_FILE_PATH}

        cat ${SBOM_FILE_PATH} | jq -r '.formulation? // empty | .[] | .components? // empty | .[] | select(any((.properties // empty)[]; .name | test("^konflux:container:is_(base|builder)_image"))) | .name' > ${IMAGES_TO_BE_PROCESSED_PATH}
        echo "Detected base images from SBOM:"
        cat "${IMAGES_TO_BE_PROCESSED_PATH}"
        echo ""

        if [ -n "${BASE_IMAGES_DIGESTS}" ];
        then
          echo "Base images passed by param BASE_IMAGES_DIGESTS: $BASE_IMAGES_DIGESTS"
          # Get images from the parameter
          for IMAGE_WITH_TAG in $(echo -n "$BASE_IMAGES_DIGESTS" | sed 's/\\n/\'$'\n''/g' );
          do
            echo $IMAGE_WITH_TAG | cut -d ":" -f1 >> ${IMAGES_TO_BE_PROCESSED_PATH}
          done
        fi

        # we want to remove duplicated entries
        BASE_IMAGES=$(sort -u "${IMAGES_TO_BE_PROCESSED_PATH}")

        echo "Images to be checked:"
        echo "$BASE_IMAGES"
        echo ""

        for BASE_IMAGE in ${BASE_IMAGES};
        do
          IFS=:'/' read -r IMAGE_REGISTRY IMAGE_REPOSITORY<<< $BASE_IMAGE

          # Red Hat Catalog hack: registry.redhat.io must be queried as registry.access.redhat.com in Red Hat catalog
          IMAGE_REGISTRY_CATALOG=$(echo "${IMAGE_REGISTRY}" | sed 's/^registry.redhat.io$/registry.access.redhat.com/')

          export IMAGE_REPO_PATH=/tmp/${IMAGE_REPOSITORY}
          mkdir -p ${IMAGE_REPO_PATH}
          echo "Querying Red Hat Catalog for $BASE_IMAGE."
          http_code=$(curl -s -o ${IMAGE_REPO_PATH}/repository_data.json -w '%{http_code}' "https://catalog.redhat.com/api/containers/v1/repositories/registry/${IMAGE_REGISTRY_CATALOG}/repository/${IMAGE_REPOSITORY}")

          if [ "$http_code" == "200" ];
          then
            echo "Running conftest using $POLICY_DIR policy, $POLICY_NAMESPACE namespace."
            /usr/bin/conftest test --no-fail ${IMAGE_REPO_PATH}/repository_data.json \
            --policy $POLICY_DIR --namespace $POLICY_NAMESPACE \
            --output=json | tee ${IMAGE_REPO_PATH}/deprecated_image_check_output.json

            failures_num=$(jq -r '.[].failures|length' ${IMAGE_REPO_PATH}/deprecated_image_check_output.json)
            if [[ "${failures_num}" -gt 0 ]]; then
              echo "[FAILURE] Image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY} has been deprecated"
            fi
            failure_counter=$((failure_counter+failures_num))

            successes_num=$(jq -r '.[].successes' ${IMAGE_REPO_PATH}/deprecated_image_check_output.json)
            if [[ "${successes_num}" -gt 0 ]]; then
              echo "[SUCCESS] Image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY} is valid"
            fi
            success_counter=$((success_counter+successes_num))

          elif [ "$http_code" == "404" ];
          then
            echo "[WARNING] Registry/image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY} not found in Red Hat Catalog. Task cannot provide results if image is deprecated."
            warnings_counter=$((warnings_counter+1))
          else
            echo "[ERROR] Unexpected error (HTTP code: ${http_code}) occurred for registry/image ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}."
            error_counter=$((error_counter+1))
          fi
        done

        note="Task $(context.task.name) failed: Command conftest failed. For details, check Tekton task log."
        ERROR_OUTPUT=$(make_result_json -r ERROR -n "$POLICY_NAMESPACE" -t "$note")

        note="Task $(context.task.name) completed: Check result for task result."
        if [[ "$error_counter" == 0 ]];
        then
          if [[ "${failure_counter}" -gt 0 ]]; then
            RES="FAILURE"
          elif [[ "${warnings_counter}" -gt 0 ]]; then
            RES="WARNING"
          elif [[ "${success_counter}" -eq 0 ]]; then
            # when all counters are 0, there are no base images to check
            note="Task $(context.task.name) success: No base images to check."
            RES="SUCCESS"
          else
            RES="SUCCESS"
          fi
          TEST_OUTPUT=$(make_result_json \
            -r "${RES}" -n "$POLICY_NAMESPACE" \
            -s "${success_counter}" -f "${failure_counter}" -w "${warnings_counter}" -t "$note")
        fi
        echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee $(results.TEST_OUTPUT.path)
