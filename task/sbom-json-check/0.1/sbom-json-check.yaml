---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sbom-json-check
  annotations:
    build.appstudio.redhat.com/expires-on: 2025-09-30T00:00:00Z
spec:
  description: >-
    Verifies the integrity and security of the Software Bill of Materials (SBOM) file in JSON format using CyloneDX tool.
  params:
    - name: IMAGE_URL
      description: Fully qualified image name to verify.
      type: string
    - name: IMAGE_DIGEST
      description: Image digest.
      type: string
    - name: CA_TRUST_CONFIG_MAP_NAME
      type: string
      description: The name of the ConfigMap to read CA bundle data from.
      default: trusted-ca
    - name: CA_TRUST_CONFIG_MAP_KEY
      type: string
      description: The name of the key in the ConfigMap that contains the CA bundle data.
      default: ca-bundle.crt
  results:
    - description: Tekton task test output.
      name: TEST_OUTPUT
    - description: Images processed in the task.
      name: IMAGES_PROCESSED
  steps:
  - name: sbom-json-check
    image: quay.io/konflux-ci/konflux-test:v1.4.8@sha256:2224fabdb0a28a415d4af4c58ae53d7c4c53c83c315f12e07d1d7f48a80bfa70
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    securityContext:
      runAsUser: 0
      capabilities:
        add:
          - SETFCAP
    volumeMounts:
      - mountPath: /shared
        name: shared
      - name: trusted-ca
        mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
        subPath: ca-bundle.crt
        readOnly: true
    env:
      - name: IMAGE_URL
        value: $(params.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(params.IMAGE_DIGEST)
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      source /utils.sh
      echo "[WARNING]: !!!DEPRECATED!!! - sbom-json-check task is going to be removed in near future, please remove it from your pipeline. (Deprecation date: 2024-09-30)"
      trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

      images_processed_template='{"image": {"pullspec": "'"$IMAGE_URL"'", "digests": [%s]}}'
      mkdir /manifests/ && cd /manifests/

      imagewithouttag=$(echo -n $IMAGE_URL | sed "s/\(.*\):.*/\1/")
      image_with_digest=$(echo $imagewithouttag@$IMAGE_DIGEST)
      digests_processed=()

      image_manifests=$(get_image_manifests -i ${image_with_digest})
      echo "$image_manifests"
      if [ -n "$image_manifests" ]; then
        while read -r arch arch_sha; do
          destination=$(echo content-$arch)
          mkdir -p "$destination"
          arch_imageanddigest=$(echo $imagewithouttag@$arch_sha)
          echo "arch sha is $arch_sha"

          echo "Running \"oc image extract\" on image of arch $arch"
          oc image extract --registry-config ~/.docker/config.json $arch_imageanddigest --path="/root/buildinfo/content_manifests/*:/manifests/${destination}" --filter-by-os="linux/${arch}"
          if [ $? -ne 0 ]; then
            echo "Failed to extract manifests from image $arch_imageanddigest of arch $arch."
            note="Task $(context.task.name) failed: Failed to extract manifests from image ${arch_imageanddigest} with oc extract. For details, check Tekton task log."
            ERROR_OUTPUT=$(make_result_json -r "ERROR" -t "$note")
          fi
          digests_processed+=("\"$arch_sha\"")
        done < <(echo "$image_manifests" | jq -r 'to_entries[] | "\(.key) \(.value)"')
      fi

      # If the image is an Image Index, also add the Image Index digest to the list.
      if [[ "${digests_processed[*]}" != *"$IMAGE_DIGEST"* ]]; then
        digests_processed+=("\"$IMAGE_DIGEST\"")
      fi

      # arrays to keep count of successful and failed checks
      successes=()
      failures=()
      for directory in content-*; do
        if [[ -d "$directory" ]]; then
          directory_suffix=$(basename "$directory" | sed 's/content-//')

          touch fail_result.txt
          if [ -f "$directory/sbom-cyclonedx.json" ]; then
            result=$(echo -n $(sbom-utility validate --input-file "$directory/sbom-cyclonedx.json"))
            if [[ ! $result =~ "SBOM valid against JSON schema: `true`" ]]; then
              echo -e "$directory_suffix sbom-cyclonedx.json: $result\n" > fail_result.txt
              failures+=("$directory_suffix")
            else
              successes+=("$directory_suffix")
            fi
          else
            echo -e "Cannot access sbom-cyclonedx.json for directory_suffix : No such file or directory exists.\n" > fail_result.txt
            failures+=("$directory_suffix")
          fi
        fi
      done

      echo "Success: (${successes[@]}) and Failures: (${failures[@]})"
      success_count=${#successes[@]}
      failure_count=${#failures[@]}

      FAIL_RESULTS="$(cat fail_result.txt)"
      if [[ -z $FAIL_RESULTS ]]; then
        echo "SBOMs were validated for image $IMAGE_URL (${successes[@]})"
        note="Task $(context.task.name) completed: Check result for JSON check result."
        TEST_OUTPUT=$(make_result_json -r "SUCCESS" -s $success_count -f $failure_count -t "$note")
      else
        echo "Failed to verify sbom-cyclonedx.json for image $IMAGE_URL (${failures[@]}) with reason: $FAIL_RESULTS."
        note="Task $(context.task.name) failed: Failed to verify SBOM for image $IMAGE_URL."
        ERROR_OUTPUT=$(make_result_json -r "FAILURE" -s $success_count -f $failure_count -t "$note")
      fi

      echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee $(results.TEST_OUTPUT.path)

      digests_processed_string=$(IFS=,; echo "${digests_processed[*]}")
      echo "${images_processed_template/\[%s]/[$digests_processed_string]}" | tee $(results.IMAGES_PROCESSED.path)
  volumes:
  - name: shared
    emptyDir: {}
  - name: trusted-ca
    configMap:
      name: $(params.CA_TRUST_CONFIG_MAP_NAME)
      items:
        - key: $(params.CA_TRUST_CONFIG_MAP_KEY)
          path: ca-bundle.crt
      optional: true
