apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "tkn-bundle"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, appstudio, hacbs"
  name: tkn-bundle
spec:
  description: |-
    Creates and pushes a Tekton bundle containing the specified Tekton YAML files.
  params:
  - description: Reference of the image task will produce.
    name: IMAGE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - name: HOME
    type: string
    description: Value for the HOME environment variable.
    default: /tekton/home
  - name: SOURCE_ARTIFACT
    type: string
    description: The source trusted artifact URI
    default: ""
  - name: CACHI2_ARTIFACT
    type: string
    description: The prefetched dependencies trusted artifact URI
    default: ""
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository where the built image was pushed with tag only
    name: IMAGE_URL
  stepTemplate:
    env:
    - name: HOME
      value: "$(params.HOME)"
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:dbcf0102d0e9f21c2bcb06dcaa9af680cb9151f1984f5cec1fb397e1356ae771
    args:
      - use
      - --store
      - $(workspaces.artifacts.path)
      - $(params.SOURCE_ARTIFACT)=$(workspaces.source.path)/source
      - $(params.CACHI2_ARTIFACT)=$(workspaces.source.path)/cachi2
  - image: quay.io/openshift-pipeline/openshift-pipelines-cli-tkn:5.0
    name: build
    env:
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: IMAGE
      value: $(params.IMAGE)
    script: |
      #!/bin/env bash

      set -o errexit
      set -o pipefail
      set -o nounset

      # expand '**', and don't return glob expression when no matches found
      shopt -s globstar nullglob

      # read \$CONTEXT as an array split by comma or space into PATHS
      IFS=', ' read -r -a PATHS <<< "$CONTEXT"
      FILES=()
      for path in "${PATHS[@]}"; do
        # keeps current path expanded
        paths=()
        # are we negating the current path
        neg=0
        if [[ "${path}" == \!* ]]; then
          neg=1
          path="${path#\!}"
        fi
        if [[ -d "$(workspaces.source.path)/${path}" ]]; then
          # for directories look for any .yaml or .yml files
          paths+=(
            $(workspaces.source.path)/${path}/**/*.yaml
            $(workspaces.source.path)/${path}/**/*.yml
          )
        else
          # for files add the file to the collected paths
          paths+=("${path}")
        fi
        if [[ $neg == 0 ]]; then
          # collect curent paths to FILES
          FILES+=("${paths[@]}")
        else
          if [[ ${#PATHS[@]} -eq 1 ]]; then
            # single negative path provided, first include everything then
            # subtract the negative elements
            FILES=(
              $(workspaces.source.path)/**/*.yaml
              $(workspaces.source.path)/**/*.yml
            )
          fi
          for p in "${paths[@]}"; do
            # remove any collected paths from FILES, leaves blank elements in place
            FILES=("${FILES[@]/$p/}")
          done
          # remove blank elements
          TMP=("${FILES[@]}")
          FILES=()
          for p in "${TMP[@]}"; do
            [[ -n "${p}" ]] && FILES+=("${p}")
          done
        fi
      done
      [[ ${#FILES[@]} -eq 0 ]] \
        && echo "No YAML files matched by \"$CONTEXT\" in \"$(workspaces.source.path)\", aborting the build" \
        && exit 1
      exec 3>&1;
      OUT="$(tkn bundle push "$IMAGE" \
        $(printf ' -f %s' "${FILES[@]}") \
        |tee /proc/self/fd/3)"
      echo -n "$IMAGE" > $(results.IMAGE_URL.path)
      echo -n "${OUT#*Pushed Tekton Bundle to *@}" > $(results.IMAGE_DIGEST.path)
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
  - name: artifacts
    description: The trusted artifact store
