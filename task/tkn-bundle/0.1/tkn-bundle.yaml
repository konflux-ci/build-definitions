apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "tkn-bundle"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, konflux"
  name: tkn-bundle
spec:
  description: |-
    Creates and pushes a Tekton bundle containing the specified Tekton YAML files.
  params:
  - description: Reference of the image task will produce.
    name: IMAGE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - name: HOME
    type: string
    description: Value for the HOME environment variable.
    default: /tekton/home
  - name: STEPS_IMAGE
    type: string
    description: An optional image to configure task steps with in the bundle
    default: ""
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository and tag where the built image was pushed with tag only
    name: IMAGE_URL
  - description: Image reference of the built image
    name: IMAGE_REF
  stepTemplate:
    env:
    - name: HOME
      value: "$(params.HOME)"
    - name: TASK_FILE
      value: tekton_task_files
    - name: SOURCE_CODE_DIR
      value: source
  steps:
  - image: quay.io/konflux-ci/konflux-test:latest@sha256:d596724343a31c201a5c2e79f233f9ef78ac65726ae4ed5ffa41d76b3dac630f
    name: modify-task-files
    env:
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: STEPS_IMAGE
      value: $(params.STEPS_IMAGE)
    script: |
      #!/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      # expand '**', and don't return glob expression when no matches found
      shopt -s globstar nullglob

      # read \$CONTEXT as an array split by comma or space into PATHS
      IFS=', ' read -r -a PATHS <<< "$CONTEXT"
      FILES=()
      for path in "${PATHS[@]}"; do
        # keeps current path expanded
        paths=()
        # are we negating the current path
        neg=0
        if [[ "${path}" == \!* ]]; then
          neg=1
          path="${path#\!}"
        fi
        if [[ -d "$(workspaces.source.path)/${SOURCE_CODE_DIR}/${path}" ]]; then
          # for directories look for any .yaml or .yml files
          paths+=(
            "$(workspaces.source.path)/${SOURCE_CODE_DIR}/${path}"/**/*.yaml
            "$(workspaces.source.path)/${SOURCE_CODE_DIR}/${path}"/**/*.yml
          )
        else
          # for files add the file to the collected paths
          paths+=("$(workspaces.source.path)/${SOURCE_CODE_DIR}/${path}")
        fi
        if [[ $neg == 0 ]]; then
          # collect current paths to FILES
          FILES+=("${paths[@]}")
        else
          if [[ ${#PATHS[@]} -eq 1 ]]; then
            # single negative path provided, first include everything then
            # subtract the negative elements
            FILES=(
              "$(workspaces.source.path)/${SOURCE_CODE_DIR}"/**/*.yaml
              "$(workspaces.source.path)/${SOURCE_CODE_DIR}"/**/*.yml
            )
          fi
          for p in "${paths[@]}"; do
            # remove any collected paths from FILES, leaves blank elements in place
            FILES=("${FILES[@]/$p/}")
          done
          # remove blank elements
          TMP=("${FILES[@]}")
          FILES=()
          for p in "${TMP[@]}"; do
            [[ -n "${p}" ]] && FILES+=("${p}")
          done
        fi
      done

      if [[ -n "${STEPS_IMAGE}" ]]; then
        for f in "${FILES[@]}"; do
          yq --in-place --yml-output '(.spec.steps[] | select(has("image")).image) = env.STEPS_IMAGE' "$f"
        done
      fi

      printf "%s\n" "${FILES[@]}" > "${TASK_FILE}"
    workingDir: $(workspaces.source.path)
  - image: quay.io/konflux-ci/appstudio-utils@sha256:4dd23978070d02c567303d46bef1f03bfc16d77aef62e6899ac2ac022884b4b5
    name: build
    env:
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: IMAGE
      value: $(params.IMAGE)
    script: |
      #!/bin/env bash

      set -o errexit
      set -o pipefail
      set -o nounset

      mapfile -t FILES < "${TASK_FILE}"
      [[ ${#FILES[@]} -eq 0 ]] \
        && echo "No YAML files matched by \"$CONTEXT\" in \"$(workspaces.source.path)/${SOURCE_CODE_DIR}\", aborting the build" \
        && exit 1
      exec 3>&1;

      retry() {
          local status
          local retry=0
          local -r interval=${RETRY_INTERVAL:-5}
          local -r max_retries=5
          while true; do
              "$@" && break
              status=$?
              ((retry+=1))
              if [ $retry -gt $max_retries ]; then
                  return $status
              fi
              echo "info: Waiting for a while, then retry ..." 1>&2
              sleep "$interval"
          done
      }

      # shellcheck disable=SC2046
      OUT="$(retry tkn bundle push "$IMAGE" \
        $(printf ' -f %s' "${FILES[@]}") \
        |tee /proc/self/fd/3)"
      echo -n "$IMAGE" > "$(results.IMAGE_URL.path)"
      digest="${OUT#*Pushed Tekton Bundle to *@}"
      echo -n "${digest}" > "$(results.IMAGE_DIGEST.path)"
      echo -n "${IMAGE}@${digest}" > "$(results.IMAGE_REF.path)"

      # cleanup task file
      [[ -f "${TASK_FILE}" ]] && rm -f "${TASK_FILE}"
    securityContext:
      runAsUser: 0
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
