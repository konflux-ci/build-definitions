# TODO:
#   make this task fail if a bundle is an image index reference
#   change the related-image check to be done in EC with exported related images instead of
#     including it in the TEST_OUTPUT result
apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: validate-fbc
spec:
  description: >-
    Ensures file-based catalog (FBC) components are uniquely linted for proper construction as part of build pipeline.
    The manifest data of container images is checked using OpenShift Operator Framework's opm CLI tool.
    The opm binary is extracted from the container's base image, which must come from a trusted source.
  params:
    - name: IMAGE_URL
      description: Fully qualified image name.
      type: string
    - name: IMAGE_DIGEST
      description: Image digest.
      type: string
  results:
    - name: RELATED_IMAGE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the related images for the FBC fragment.
    - name: TEST_OUTPUT_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the related images for the FBC fragment.
    - name: TEST_OUTPUT
      description: Tekton task test output.
    - name: RELATED_IMAGES_DIGEST
      description: Digest for attached json file containing related images
    - name: IMAGES_PROCESSED
      description: Images processed in the task.
  volumes:
    - name: shared
      emptyDir: {}
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: IMAGE_URL
        value: $(params.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(params.IMAGE_DIGEST)
    volumeMounts:
      - mountPath: /shared
        name: shared
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: inspect-image
      image: quay.io/konflux-ci/konflux-test:v1.4.7@sha256:cf6808a3bd605630a5d9f20595ff7c43f8645c00381219d32f5a11e88fe37072
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: /var/workdir/inspect-image
      securityContext:
        runAsUser: 0
        capabilities:
          add:
            - SETFCAP
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        # shellcheck source=/dev/null
        source /utils.sh
        trap 'handle_error "$(results.TEST_OUTPUT.path)"' EXIT

        IMAGE_INSPECT=image_inspect.json
        BASE_IMAGE_INSPECT=base_image_inspect.json
        RAW_IMAGE_INSPECT=raw_image_inspect.json

        IMAGE_URL="${IMAGE_URL}@${IMAGE_DIGEST}"
        # Given a tag and a the digest in the IMAGE_URL we opt to use the digest alone
        # this is because containers/image currently doesn't support image references
        # that contain both. See https://github.com/containers/image/issues/1736
        if [[ "${IMAGE_URL}" == *":"*"@"* ]]; then
          IMAGE_URL="${IMAGE_URL/:*@/@}"
        fi

        status=-1
        max_run=5
        sleep_sec=10
        for run in $(seq 1 $max_run); do
          status=0
          [ "$run" -gt 1 ] && sleep $sleep_sec  # skip last sleep
          echo "Inspecting manifest for source image ${IMAGE_URL} (try $run/$max_run)."
          skopeo inspect --no-tags docker://"${IMAGE_URL}" > $IMAGE_INSPECT && break || status=$?
        done
        if [ "$status" -ne 0 ]; then
            echo "Failed to inspect image ${IMAGE_URL}"
            note="Step inspect-image failed: Encountered errors while inspecting image. For details, check Tekton task log."
            TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
            echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
            exit 0
        fi
        echo "Image ${IMAGE_URL} metadata:"
        cat "$IMAGE_INSPECT"

        run=1
        while [ "$run" -le "$max_run" ]; do
          status=0
          [ "$run" -gt 1 ] && sleep $sleep_sec  # skip last sleep
          echo "Inspecting raw image manifest ${IMAGE_URL} (try $run/$max_run)."
          skopeo inspect --no-tags --raw docker://"${IMAGE_URL}" > $RAW_IMAGE_INSPECT || status=$?

          if [ "$status" -eq 0 ] && [ "$(jq 'has("manifests")' ${RAW_IMAGE_INSPECT})" = "true" ]; then
              echo "Found an image index, lookup for amd64 manifest"
              INDEX_IMAGE_MANIFESTS=$(jq ' .manifests | map ( {(.platform.architecture|tostring|ascii_downcase):  .digest} ) | add'  "${RAW_IMAGE_INSPECT}" || true)

              AMD64_MANIFEST_DIGEST=$(jq -r '.amd64' <<< "${INDEX_IMAGE_MANIFESTS}" || true )
              if [ -z "$AMD64_MANIFEST_DIGEST" ]; then
                # we didn't find amd64 platform, fail horribly as it's the required platform currently for all checks
                echo "[ERROR] Could not find amd64 image manifest for image $IMAGE_URL"
                note="Step inspect-image failed: Couldn't find amd64 image manifest"
                TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
                echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
                exit 0
              fi

              # Replace image URL with new digest
              IMAGE_URL="${IMAGE_URL/[@:]*/@$AMD64_MANIFEST_DIGEST}"
              echo "Setting AMD64 specific image: $IMAGE_URL"
              run=1  # reset runs, we are looking another image; new image, new life
          else
              break
          fi
        done

        if [ "$status" -ne 0 ]; then
            echo "Failed to get raw metadata of image ${IMAGE_URL}"
            note="Step inspect-image failed: Encountered errors while inspecting image. For details, check Tekton task log."
            TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
            echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
            exit 0
        fi

        echo "Image ${IMAGE_URL} raw metadata:"
        jq < "$RAW_IMAGE_INSPECT" # jq for readable formatting

        echo "Getting base image manifest for source image ${IMAGE_URL}."
        BASE_IMAGE_NAME="$(jq -r ".annotations.\"org.opencontainers.image.base.name\"" $RAW_IMAGE_INSPECT)"
        BASE_IMAGE_DIGEST="$(jq -r ".annotations.\"org.opencontainers.image.base.digest\"" $RAW_IMAGE_INSPECT)"
        if [ "$BASE_IMAGE_NAME" == 'null' ]; then
          echo "Cannot get base image info from annotations."
          BASE_IMAGE_NAME="$(jq -r ".Labels.\"org.opencontainers.image.base.name\"" $IMAGE_INSPECT)"
          BASE_IMAGE_DIGEST="$(jq -r ".annotations.\"org.opencontainers.image.base.digest\"" $IMAGE_INSPECT)"
          if [ "$BASE_IMAGE_NAME" == 'null' ]; then
            echo "Cannot get base image info from Labels. For details, check source image ${IMAGE_URL}."
            exit 0
          fi
        fi
        if [ -z "$BASE_IMAGE_NAME" ]; then
          echo "Source image ${IMAGE_URL} is built from scratch, so there is no base image."
          exit 0
        fi

        # Strip out any tags and digests then append our known digest
        BASE_IMAGE_REPOSITORY="$(echo -n "${BASE_IMAGE_NAME}" | cut -d@ -f1 | sed 's_/\(.*\):\(.*\)_/\1_g')"
        BASE_IMAGE="${BASE_IMAGE_REPOSITORY}@$BASE_IMAGE_DIGEST"
        echo "Detected base image: $BASE_IMAGE"
        echo -n "$BASE_IMAGE" > /shared/BASE_IMAGE

        for run in $(seq 1 $max_run); do
          status=0
          [ "$run" -gt 1 ] && sleep $sleep_sec  # skip last sleep
          echo "Inspecting base image ${BASE_IMAGE} (try $run/$max_run)."
          skopeo inspect --no-tags "docker://$BASE_IMAGE"  > $BASE_IMAGE_INSPECT && break || status=$?
        done
        if [ "$status" -ne 0 ]; then
            echo "Failed to inspect base image ${BASE_IMAGE}"
            note="Step inspect-image failed: Encountered errors while inspecting image. For details, check Tekton task log."
            TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
            echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
            exit 0
        fi

        echo "Detected base image repository: $BASE_IMAGE_REPOSITORY"
        echo -n "$BASE_IMAGE_REPOSITORY" > /shared/BASE_IMAGE_REPOSITORY

        # FBC content should be identical across different architectures so the IMAGES_PROCESSED result
        # is a no-op for now. We can come back later and enforce that the content is identical between
        # all architectures if desired.
        image_without_tag=$(echo -n "$IMAGE_URL" | cut -d@ -f1 | sed 's_/\(.*\):\(.*\)_/\1_g')
        image_with_digest="${image_without_tag}@${IMAGE_DIGEST}"
        images_processed_template='{"image": {"pullspec": "'"$IMAGE_URL"'", "digests": [%s]}}'
        image_manifests=$(get_image_manifests -i "${image_with_digest}")
        echo "$image_manifests"
        if [ -n "$image_manifests" ]; then
          while read -r _arch arch_sha; do
            digests_processed+=("\"$arch_sha\"")
          done < <(echo "$image_manifests" | jq -r 'to_entries[] | "\(.key) \(.value)"')
        fi

        # If the image is an Image Index, also add the Image Index digest to the list.
        if [[ "${digests_processed[*]}" != *"$IMAGE_DIGEST"* ]]; then
          digests_processed+=("\"$IMAGE_DIGEST\"")
        fi
        digests_processed_string=$(IFS=,; echo "${digests_processed[*]}")
        echo "${images_processed_template/\[%s]/[$digests_processed_string]}" | tee "$(results.IMAGES_PROCESSED.path)"
    - name: extract-and-validate
      image: quay.io/konflux-ci/konflux-test:v1.4.5@sha256:801a105ba0f9c7f58f5ba5cde1a3b4404009fbebb1028779ca2c5de211e94940
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: /var/workdir/extract-and-validate
      securityContext:
        runAsUser: 0
        capabilities:
          add:
            - SETFCAP
      computeResources:
        limits:
          memory: 4Gi
        requests:
          memory: 512Mi
          cpu: 10m
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        source /utils.sh
        trap 'handle_error "$(results.TEST_OUTPUT.path)"' EXIT

        BASE_IMAGE=$(cat /shared/BASE_IMAGE)
        BASE_IMAGE_REPOSITORY=$(cat /shared/BASE_IMAGE_REPOSITORY)

        declare -a ALLOWED_BASE_IMAGES=(
          "registry.redhat.io/openshift4/ose-operator-registry"
          "registry.redhat.io/openshift4/ose-operator-registry-rhel9"
          "brew.registry.redhat.io/rh-osbs/openshift-ose-operator-registry-rhel9"
        )

        ### FBC base image check
        if [ -z "${BASE_IMAGE}" ]; then
          echo "Base image is unknown. The file-based catalog must have base image defined. Check inspect-image task log."
          note="Step extract-and-validate failed: The file-based catalog must have base image defined. For details, check Tekton task result TEST_OUTPUT in task inspect-image."
          TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        allowed=false
        for value in "${ALLOWED_BASE_IMAGES[@]}"
        do
          if [[ "${BASE_IMAGE_REPOSITORY}" == "${value}" ]]; then
            allowed=true
            break
          fi
        done

        if [[ "${allowed}" == false ]]; then
          echo "Base image ${BASE_IMAGE} is not allowed for the file based catalog image. Allowed images: ${ALLOWED_BASE_IMAGES}"
          note="Step extract-and-validate failed: Base image ${BASE_IMAGE} is not allowed for the file based catalog image. For details, check Tekton task logs"
          TEST_OUTPUT=$(make_result_json -r FAILURE -f 1 -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        ### Try to extract binaries with configs > check binaries functionality > check opm validate ###
        if [ ! -s ../inspect-image/image_inspect.json ]; then
          echo "File /var/workdir/inspect-image/image_inspect.json did not generate correctly. Check inspect-image task log."
          note="Step extract-and-validate failed: /var/workdir/inspect-image/image_inspect.json did not generate correctly. For details, check Tekton task result TEST_OUTPUT in task inspect-image."
          TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        if [ ! -s ../inspect-image/raw_image_inspect.json ]; then
          echo "File /var/workdir/inspect-image/raw_image_inspect.json did not generate correctly. Check inspect-image task log."
          note="Step extract-and-validate failed: /var/workdir/inspect-image/raw_image_inspect.json did not generate correctly. For details, check Tekton task result TEST_OUTPUT in task inspect-image."
          TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        echo "Getting base image for source image ${IMAGE_URL}."
        base_image_name="$(jq -r ".annotations.\"org.opencontainers.image.base.name\"" ../inspect-image/raw_image_inspect.json)" || status=$?
        if [ "$base_image_name" == 'null' ]; then
          echo "Could not get annotations from inspect-image/raw_image_inspect.json. Make sure file exists and it contains this annotation: org.opencontainers.image.base.name"
          echo "Try to get base image from label..."
          base_image_name="$(jq -r ".Labels.\"org.opencontainers.image.base.name\"" ../inspect-image/image_inspect.json)" || status=$?
          if [ "$base_image_name" == 'null' ]; then
            echo "Cannot get base image info from Labels. For details, check source image ../inspect-image/image_inspect.json."
            TEST_OUTPUT="$(make_result_json -r ERROR)"
            echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
            exit 0
          fi
        fi
        if [ -z "$base_image_name" ]; then
          echo "Source image ${IMAGE_URL} is built from scratch, so there is no base image."
          TEST_OUTPUT="$(make_result_json -r ERROR)"
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        status=0
        conffolder=$(jq -r '.Labels ."operators.operatorframework.io.index.configs.v1"' ../inspect-image/image_inspect.json) || status=$?
        if [ $status -ne 0 ]; then
          echo "Could not get labels from inspect-image/image_inspect.json. Make sure file exists and it contains this label: operators.operatorframework.io.index.configs.v1."
          TEST_OUTPUT="$(make_result_json -r ERROR)"
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi
        mkdir -p /tmp/image-content confdir
        pushd /tmp/image-content
        image_with_digest="${IMAGE_URL}@${IMAGE_DIGEST}"

        if ! oc image extract --registry-config ~/.docker/config.json "${image_with_digest}" ; then
          echo "Unable to extract or validate extracted binaries."
          note="Step extract-and-validate failed: Failed to extract image with oc extract command, so it cannot validate extracted binaries. For details, check Tekton task log."
          ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          popd
          exit 0
        fi

        if [ -z "$(ls -A .$conffolder)" ]; then
          echo "$conffolder is missing catalog file."
          TEST_OUTPUT="$(make_result_json -r ERROR)"
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          popd
          exit 0
        fi

        EXTRACT_DIR="/extracted_base_img"
        mkdir "${EXTRACT_DIR}"
        if ! oc image extract ${BASE_IMAGE} --path /:"${EXTRACT_DIR}"; then
          echo "Unable to extract opm binary"
          note="Step extract-and-validate failed: Failed to extract base image with oc extract command, so it cannot validate extracted binaries.  For details, check Tekton task log."
          ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
          exit 0
        fi

        OPM_BINARIES="$(find "${EXTRACT_DIR}" -type f -name opm)"
        BINARIES_COUNT=$(wc -l <<< "${OPM_BINARIES}")
        if [[ $BINARIES_COUNT -ne "1" ]]; then
            note="Step extract-and-validate failed: Expected exactly one opm binary in base image.  For details, check Tekton task log"
            ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
            echo "${ERROR_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
            echo "found $BINARIES_COUNT opm binaries:"
            echo "${OPM_BINARIES}"
            exit 0
        fi
        OPM_BINARY=$(echo "${OPM_BINARIES}" | head -n 1)
        echo "OPM_BINARY: '${OPM_BINARY}'"
        chmod 775 "$OPM_BINARY"

        # We have 9 total checks
        check_num=9
        failure_num=0
        TESTPASSED=true

        if [[ ! $(find . -name "grpc_health_probe") ]]; then
          echo "!FAILURE! - grpc_health_probe binary presence check failed."
          failure_num=$((failure_num + 1))
          TESTPASSED=false
        fi

        if ! ${OPM_BINARY} validate ."${conffolder}"; then
          echo "!FAILURE! - opm validate check failed."
          failure_num=$((failure_num + 1))
          TESTPASSED=false
        fi

        OPM_RENDERED_CATALOG=/tmp/catalog.json
        ${OPM_BINARY} render ."${conffolder}" > ${OPM_RENDERED_CATALOG}
        if [ ! -f ${OPM_RENDERED_CATALOG} ]; then
          echo "!FAILURE! - unable to render the fragment FBC."
          failure_num=$((failure_num + 1))
          TESTPASSED=false
        fi

        if jq -en 'reduce (inputs | select(.schema == "olm.package")) as $obj (0; .+1) < 1' ${OPM_RENDERED_CATALOG}; then
          echo "!FAILURE! - There are no olm package entries defined in this FBC fragment."
          failure_num=$((failure_num + 1))
          TESTPASSED=false
        fi

        # examines the base_image_name tag to derive the target OCP version
        # assumes this is in the form
        # image-path:[v]major-digits.minor-digits[@sha...]
        OCP_VER_FROM_BASE=$(echo "${base_image_name}" | sed -e "s/@.*$//" -e "s/^.*://")   # strips hash first due to greedy match
        # extracts major digits and filters out any leading alphabetic characters, for e.g. 'v4' --> '4'
        OCP_VER_MAJOR=$(echo "${OCP_VER_FROM_BASE}" | cut -d '.' -f 1 | sed "s/^[a-zA-Z]*//")
        OCP_VER_MINOR=$(echo "${OCP_VER_FROM_BASE}" | cut -d '.' -f 2)

        RUN_OCP_VERSION_VALIDATION="false"
        digits_regex='^[0-9]*$'
        if [[ ${OCP_VER_MAJOR} =~ $digits_regex ]] && [[ ${OCP_VER_MINOR} =~ $digits_regex ]] ; then
          RUN_OCP_VERSION_VALIDATION="true"
        fi

        if [ "${RUN_OCP_VERSION_VALIDATION}" == "false" ] ; then
          echo "!WARNING! - unable to assess bundle metadata alignment with OCP version because we cannot extract version info from base_image_name: ${base_image_name}"
        else
          OCP_BUNDLE_METADATA_THRESHOLD_MAJOR=4
          OCP_BUNDLE_METADATA_THRESHOLD_MINOR=17
          OCP_BUNDLE_METADATA_FORMAT="olm.bundle.object"

          if [[ "${OCP_VER_MAJOR}" -ge "${OCP_BUNDLE_METADATA_THRESHOLD_MAJOR}" ]] && [[ "${OCP_VER_MINOR}" -ge "${OCP_BUNDLE_METADATA_THRESHOLD_MINOR}" ]]; then
             OCP_BUNDLE_METADATA_FORMAT="olm.csv.metadata"
          fi

          # enforce the presence of either olm.csv.metadata or olm.bundle.object based on OCP version
          if [[ "${OCP_BUNDLE_METADATA_FORMAT}" = "olm.csv.metadata" ]]; then
            if ! jq -en 'reduce( inputs | select(.schema == "olm.bundle" and .properties[].type == "olm.bundle.object")) as $_ (0;.+1) == 0' ${OPM_RENDERED_CATALOG}; then
              echo "!FAILURE! - olm.bundle.object bundle properties are not permitted in a FBC fragment for OCP version ${OCP_VER_MAJOR}.${OCP_VER_MINOR}. Fragments must move to olm.csv.metadata bundle metadata."
              failure_num=$((failure_num + 1))
              TESTPASSED=false
            fi
          else
            if ! jq -en 'reduce( inputs | select(.schema == "olm.bundle" and .properties[].type == "olm.csv.metadata")) as $_ (0;.+1) == 0' ${OPM_RENDERED_CATALOG}; then
              echo "!FAILURE! - olm.csv.metadata bundle properties are not permitted in a FBC fragment for OCP version ${OCP_VER_MAJOR}.${OCP_VER_MINOR}. Fragments must only use olm.bundle.object bundle metadata."
              failure_num=$((failure_num + 1))
              TESTPASSED=false
            fi
          fi

          # enforce that each bundle has the OCP-version-appropriate bundle metadata.
          BUNDLE_COUNT=$(jq -en 'def count(stream): reduce stream as $i (0; .+1); count(inputs|select(.schema=="olm.bundle"))' ${OPM_RENDERED_CATALOG})
          BUNDLE_BO_COUNT=$(jq -en 'def count(stream): reduce stream as $i (0; .+1); count(inputs|select(.schema == "olm.bundle" and .properties[].type == "olm.bundle.object"))' ${OPM_RENDERED_CATALOG})
          BUNDLE_CM_COUNT=$(jq -en 'def count(stream): reduce stream as $i (0; .+1); count(inputs|select(.schema == "olm.bundle" and .properties[].type == "olm.csv.metadata"))' ${OPM_RENDERED_CATALOG})

          if [[ "${OCP_BUNDLE_METADATA_FORMAT}" = "olm.csv.metadata" ]]; then
            if [[ "${BUNDLE_COUNT}" -ne "${BUNDLE_CM_COUNT}" ]]; then
              echo "!FAILURE! - every olm.bundle object in the fragment must have a corresponding olm.csv.metadata bundle property"
            failure_num=$((failure_num + 1))
              TESTPASSED=false
            fi
          else
            if [[ "${BUNDLE_BO_COUNT}" -lt "${BUNDLE_COUNT}" ]]; then
              echo "!FAILURE! - every olm.bundle object in the fragment must have at least one olm.bundle.object bundle property"
            failure_num=$((failure_num + 1))
              TESTPASSED=false
            fi
          fi
        fi

        FAILEDIMAGES=""
        catalog="$(opm render ".$conffolder/")"

        # OPM generates catalog file in a way that yaml file could contain stream of JSON objects
        # thats why we need jq in for this situation, because yq can't parse this file
        # however there is also possibility that catalog.yaml has yaml data in it

        status=0
        echo "Related images detected:"
        # We need to see if the images exist first then we can slurp them to format properly
        jq  '.relatedImages[]? |  .image ' <<< "${catalog}" || status=$?
        if [ $status -ne 0 ]; then
          echo "!FAILURE! - Could not get related images. Make sure catalog.yaml exists in FBC fragment image and it is valid .yaml or .json format."
          note="Task $(context.task.name) failed: Could not fetch related images. Make sure you have catalog.yaml or catalog.json formatted correctly in your file-based catalog (FBC) fragment image."
          failure_num=$((failure_num + 1))
          TESTPASSED=false
        else
          jq  '.relatedImages[]? |  .image ' <<< "${catalog}" | jq --slurp > /shared/related-images.json
        fi

        echo -e "These are related images:\n$(jq -cr '.[]' /shared/related-images.json )."
        # cycle through those related images and show outputs
        jq -cr '.[]' /shared/related-images.json | while read -r image; do
          if ! skopeo inspect --no-tags "docker://${image}"; then
            echo "Skopeo inspect failed on related image: $image."
            FAILEDIMAGES="$FAILEDIMAGES $image,"
          fi
        done

        if [ -n "$FAILEDIMAGES" ]; then
          echo "These images failed inspection: $FAILEDIMAGES."
          note="Task $(context.task.name) failed: Command skopeo inspect could not inspect images. For details, check Tekton task log."
          failure_num=$((failure_num + 1))
          TESTPASSED=false
        fi

        note="Step extract-and-validate completed: Check result for task result."
        if [ $TESTPASSED == false ]; then
          ERROR_OUTPUT=$(make_result_json -r FAILURE -f $failure_num -s $((check_num - failure_num)) -t "$note")
          echo "${ERROR_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
        else
          TEST_OUTPUT=$(make_result_json -r SUCCESS -s $check_num -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
        fi
        popd
    - name: save-related-images
      image: quay.io/konflux-ci/oras:latest@sha256:66ccc8c3698304036a42739f6e1836f3399a46645be2d3c5d6d456b9c79fff40
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        attach-helper --subject "${IMAGE_URL}@${IMAGE_DIGEST}" --media-type-name "related-images+json" --digestfile "$(results.RELATED_IMAGES_DIGEST.path)" \
          /shared/related-images.json
