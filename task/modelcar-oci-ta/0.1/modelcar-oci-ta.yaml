apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: modelcar
  name: modelcar-oci-ta
spec:
  description: |-
    Given a base image and a OCI artifact reference with the model files, builds a ModelCar image.

    A ModelCar is a containerized approach to deploying machine learning models. It involves packaging
    model artifacts within a container image, enabling efficient and standardized deployment in
    Kubernetes environments, used as Sidecar containers (secondary containers that run alongside the
    main application container within the same Pod)

    The ModelCar image is built using the specified BASE_IMAGE parameter, which is extracted to an
    OCI image layout directory. Then all files included in the OCI artifact specified with the
    MODEL_IMAGE parameter are copied on top.

    An SBOM report defining the Model and Base Images as descendants of the ModelCar image is also
    generated in the process.
  params:
    - name: MODEL_IMAGE_AUTH
      description: Name of secret required to pull the model OCI artifact
      type: string
    - name: IMAGE
      description: Reference of the image we will push
      type: string
    - name: SBOM_TYPE
      description: 'Select the SBOM format to generate. Valid values: spdx,
        cyclonedx.'
      type: string
      default: spdx
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: BASE_IMAGE
      description: base image used to build the Modelcar image
      type: string
    - name: MODEL_IMAGE
      description: OCI artifact reference with the model files
      type: string
    - name: MODELCARD_PATH
      description: path to the Model Card
      type: string
    - name: REMOVE_ORIGINALS
      description: add --remove-originals param to olot
      type: string
      default: "false"
  results:
    - name: IMAGES
      description: Image reference of the built image containing both the repository and the digest
    - name: IMAGE_DIGEST
      description: Digest of the artifact just pushed
    - name: IMAGE_REF
      description: Image reference of the built image
    - name: IMAGE_URL
      description: Repository where the artifact was pushed
    - name: SBOM_BLOB_URL
      description: Link to the SBOM blob pushed to the registry.
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: workdir
      emptyDir: {}
    - name: model-secret
      secret:
        secretName: $(params.MODEL_IMAGE_AUTH)
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
  stepTemplate:
    env:
      - name: IMAGE
        value: $(params.IMAGE)
      - name: SBOM_TYPE
        value: $(params.SBOM_TYPE)
      - name: BASE_IMAGE
        value: $(params.BASE_IMAGE)
      - name: MODEL_IMAGE
        value: $(params.MODEL_IMAGE)
      - name: TARGET_OCI
        value: "/var/workdir/modelcar-oci"
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: download-models-and-create-base
      image: quay.io/konflux-ci/release-service-utils:2f93b7ed6a2099e7187bb110a6b95caac3b8bdbc
      volumeMounts:
        - mountPath: /model-secret
          name: model-secret
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -eu
        set -o pipefail

        if ! oras pull "$MODEL_IMAGE" \
          --registry-config /model-secret/.dockerconfigjson --output /var/workdir/models
        then
          echo "Failed to pull ${MODEL_IMAGE} from registry"
          exit 1
        fi
        chmod -R g+wx models

        oras copy --to-oci-layout "$BASE_IMAGE" "${TARGET_OCI}:latest"
        chmod -R g+w "$TARGET_OCI"

    - name: copy-model-files
      image: registry.access.redhat.com/ubi9/python-311:9.6-1753713955
      workingDir: /var/workdir
      env:
        - name: OLOT_VERSION
          value: 0.1.7
        - name: MODELCARD_PATH
          value: $(params.MODELCARD_PATH)
        - name: REMOVE_ORIGINALS
          value: $(params.REMOVE_ORIGINALS)
      script: |
        #!/bin/bash
        set -eu
        set -o pipefail

        REMOVE_ORIGINALS_ARG=""
        if [[ "$REMOVE_ORIGINALS" == "true" ]]; then
          REMOVE_ORIGINALS_ARG="--remove-originals"
        fi
        pip install olot=="${OLOT_VERSION}"
        olot "$REMOVE_ORIGINALS_ARG" -m "$MODELCARD_PATH" "$TARGET_OCI" models/*

    - name: push-and-write-results
      image: quay.io/konflux-ci/oras:latest@sha256:16d77d29cbdfdb7d77272c9c0c8b8c7f2d397c5e6381363b8d01766aa8bb518f
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -eu
        set -o pipefail

        select-oci-auth "$IMAGE" >auth.json

        echo "Pushing complete artifact manifest to ${IMAGE}"
        if ! retry oras cp --to-registry-config auth.json --from-oci-layout "${TARGET_OCI}:latest" "$IMAGE"
        then
            echo "Failed to push complete artifact manifest to ${IMAGE}"
            exit 1
        fi
        echo "Push complete!"

        if ! RESULTING_DIGEST=$(retry oras resolve --registry-config auth.json "${IMAGE}")
        then
          echo "Failed to get digest for ${IMAGE} from registry"
          exit 1
        fi
        
        
        # Write main results IMMEDIATELY (following build-image-manifest pattern)
        echo -n "$RESULTING_DIGEST" > "$(results.IMAGE_DIGEST.path)"
        echo -n "$IMAGE" > "$(results.IMAGE_URL.path)"
        echo -n "${IMAGE}@${RESULTING_DIGEST}" > "$(results.IMAGE_REF.path)"
        
        # Extract digest list from oras for multiarch IMAGES result
        DIGESTS=$(oras manifest fetch \
          --registry-config auth.json \
          --format go-template \
          --template '{{range .content.manifests}}{{.digest}},{{end}}' \
          "$IMAGE")

        # Remove trailing comma
        DIGESTS="${DIGESTS%,}"

        # Compose full image references
        IMAGES=""
        IFS=',' read -ra DIGEST_ARR <<<"$DIGESTS"
        for DIGEST in "${DIGEST_ARR[@]}"; do
          IMAGES+="${IMAGE}@${DIGEST}, "
        done

        # Trim trailing comma and space
        IMAGES="${IMAGES%, }"
        
        echo -n "$IMAGES" > "$(results.IMAGES.path)"

        # Save manifest data for oci-index SBOM generation
        oras manifest fetch --registry-config auth.json "$IMAGE" > manifest_data.json

    - name: generate-sbom
      image: quay.io/konflux-ci/mobster@sha256:5af1aa13f97ff2006e33b1e5d422c3a0b178ae000b35c9309f952b5fb4c174ff
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -e

        echo "=== GENERATE DUAL SBOM ==="
        
        MODELCAR_IMAGE=$(cat "$(results.IMAGE_REF.path)")
        IMAGE_DIGEST=$(cat "$(results.IMAGE_DIGEST.path)")
        IMAGE_URL=$(cat "$(results.IMAGE_URL.path)")
        
        echo "MODELCAR_IMAGE: $MODELCAR_IMAGE"
        echo "BASE_IMAGE: $BASE_IMAGE"
        echo "MODEL_IMAGE: $MODEL_IMAGE"

        # Generate ONLY OCI Index SBOM (testing multiarch approach)
        if [ -f "manifest_data.json" ]; then
          echo "Generating OCI Index SBOM for multiarch..."
          mobster generate \
            --output sbom.json \
            oci-index \
            --index-image-pullspec "$IMAGE_URL" \
            --index-image-digest "$IMAGE_DIGEST" \
            --index-manifest-path "manifest_data.json"
          echo "✓ OCI Index SBOM generated"
        else
          echo "No manifest data found, cannot generate SBOM"
          exit 1
        fi
        
        echo "✓ SBOM generation completed"
        

    - name: upload-sbom
      image: quay.io/konflux-ci/appstudio-utils:1610c1fc4cfc9c9053dbefc1146904a4df6659ef@sha256:90ac97b811073cb99a23232c15a08082b586c702b85da6200cf54ef505e3c50c
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -e

        echo "=== UPLOAD SBOM ==="
        
        IMAGE_REF=$(cat "$(results.IMAGE_REF.path)")
        IMAGE_URL=$(cat "$(results.IMAGE_URL.path)")
        
        echo "IMAGE_REF: $IMAGE_REF"
        echo "IMAGE_URL: $IMAGE_URL"
        
        # Pre-select the correct credentials to work around cosign not supporting the containers-auth.json spec
        mkdir -p /tmp/auth && select-oci-auth "$IMAGE_REF" > /tmp/auth/config.json
        export DOCKER_CONFIG=/tmp/auth

        # Upload OCI Index SBOM only
        echo "Uploading OCI Index SBOM..."
        if ! retry cosign attach sbom --sbom sbom.json --type "$SBOM_TYPE" "$IMAGE_REF"; then
            echo "Failed to push oci-index sbom to registry"
            exit 1
        fi
        echo "✓ OCI Index SBOM uploaded successfully"

        # Calculate SBOM URL (from oci-index SBOM)
        sbom_repo="${IMAGE_URL%:*}"
        sbom_digest="$(sha256sum sbom.json | cut -d' ' -f1)"
        SBOM_BLOB_URL="${sbom_repo}@sha256:${sbom_digest}"
        echo "SBOM_BLOB_URL: $SBOM_BLOB_URL"
        echo -n "$SBOM_BLOB_URL" > "$(results.SBOM_BLOB_URL.path)"
        
        echo "✓ SBOM upload completed"
