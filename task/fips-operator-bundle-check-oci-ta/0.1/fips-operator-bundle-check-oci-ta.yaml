---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: fips-operator-bundle-check-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: konflux
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: The fips-operator-bundle-check task uses the check-payload
    tool to verify if an operator bundle image is FIPS compliant. It only
    scans operator bundle images which either claim to be FIPS compliant by
    setting the `features.operators.openshift.io/fips-compliant` label to
    `"true"` on the bundle image or require one of `OpenShift Kubernetes Engine,
    OpenShift Platform Plus or OpenShift Container Platform` subscriptions
    to run the operator on an Openshift cluster. This task extracts relatedImages
    from the operator bundle image and scans them. Hence, it is necessary
    for relatedImages pullspecs to be pullable at build time. In order to
    resolve them, this task expects a `imageDigestMirrorSet` file located
    at `.tekton/images-mirror-set.yaml` of your operator bundle git repo.
    It should map unreleased `registry.redhat.io` pullspecs of relatedImages
    to their valid `quay.io` pullspecs.
  params:
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: image-digest
      description: Image digest to scan.
    - name: image-url
      description: Image URL.
  results:
    - name: IMAGES_PROCESSED
      description: Images processed in the task.
    - name: TEST_OUTPUT
      description: Tekton task test output.
      value: $(steps.fips-operator-check-step-action.results.TEST_OUTPUT)
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: get-unique-related-images
      image: quay.io/redhat-appstudio/konflux-test:v1.4.12@sha256:b42202199805420527c2552dea22b02ab0f051b79a4b69fbec9a77f8832e5623
      env:
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
        - name: SOURCE_CODE_DIR
          value: /var/workdir
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        # shellcheck source=/dev/null
        . /utils.sh

        image_without_tag=$(echo -n "${IMAGE_URL}" | sed "s/\(.*\):.*/\1/")
        # strip new-line escape symbol from parameter and save it to variable
        image_and_digest="${image_without_tag}@${IMAGE_DIGEST}"

        image_and_digest_labels=$(get_image_labels "${image_and_digest}")
        if ! echo "${image_and_digest_labels}" | grep -q '^operators.operatorframework.io.bundle.mediatype.v1='; then
          echo "The image $image_and_digest is not an operator bundle. Skipping FIPS static check..."
          exit 0
        fi

        # Run the FIPS check only if the bundle is part of the Openshift Subscription or has the fips label set
        image_and_digest_render_out=$(opm render "$image_and_digest")
        subscription_label=$(echo "${image_and_digest_render_out}" | jq -r '.properties[] | select(.value.annotations["operators.openshift.io/valid-subscription"] != null) | (.value.annotations["operators.openshift.io/valid-subscription"] | fromjson)[]')
        fips_label=$(echo "${image_and_digest_labels}" | grep '^features.operators.openshift.io/fips-compliant=' | cut -d= -f2 || true)

        if ! echo "${subscription_label}" | grep -e "OpenShift Kubernetes Engine" -e "OpenShift Container Platform" -e "OpenShift Platform Plus"; then
          echo "OpenShift Kubernetes Engine, OpenShift Platform Plus or OpenShift Container Platform are not present in operators.openshift.io/valid-subscription."
          echo "Subscription labels are : $subscription_label"
          if [ -z "${fips_label}" ] || [ "${fips_label}" != "true" ]; then
            echo "The label features.operators.openshift.io/fips-compliant is also not set to true. Skipping the FIPS static check..."
            exit 0
          else
            echo "The label features.operators.openshift.io/fips-compliant is set to true. Running the FIPS static check..."
          fi
        else
          echo "OpenShift Kubernetes Engine, OpenShift Platform Plus or OpenShift Container Platform are present in operators.openshift.io/valid-subscription. Running the FIPS static check..."
        fi

        mirror_set="${SOURCE_CODE_DIR}/source/.tekton/images-mirror-set.yaml"
        if [[ -f "${mirror_set}" ]]; then
          mirror_set_yaml=$(cat "${mirror_set}")
          process_image_digest_mirror_set "${mirror_set_yaml}" >"/tekton/home/related-images-map.txt"
        else
          echo "Could not find Related Images mirror set at ${mirror_set}. Unreleased relatedImages will fail the scan."
        fi

        unique_related_images=()
        digests_processed=()
        images_processed_template='{"image": {"pullspec": "'"$IMAGE_URL"'", "digests": [%s]}}'

        echo "Inspecting raw image manifest $image_and_digest."
        # Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes
        image_manifests=$(get_image_manifests -i "${image_and_digest}")
        echo "Image manifests are $image_manifests"

        declare -A seen_related_images
        # Extract relatedImages from the bundle image
        while read -r _ arch_sha; do
          digests_processed+=("\"$arch_sha\"")
          manifest_related_images=$(extract_related_images_from_bundle "$image_without_tag@$arch_sha")
          if [ -n "$manifest_related_images" ]; then
            for img in $manifest_related_images; do
              if [ -z "${seen_related_images["$img"]:-}" ]; then
                unique_related_images+=("$img")
                seen_related_images["$img"]=1
              fi
            done
          fi
        done < <(echo "$image_manifests" | jq -r 'to_entries[] | "\(.key) \(.value)"')

        echo "Unique related images: ${unique_related_images[*]}"
        echo "${unique_related_images[*]}" >/tekton/home/unique_related_images.txt

        # If the image is an Image Index, also add the Image Index digest to the list.
        if [[ "${digests_processed[*]}" != *"$IMAGE_DIGEST"* ]]; then
          digests_processed+=("\"$IMAGE_DIGEST\"")
        fi
        digests_processed_string=$(
          IFS=,
          echo "${digests_processed[*]}"
        )

        echo "${images_processed_template/\[%s]/[$digests_processed_string]}" >/tekton/home/images_processed.txt
      computeResources:
        limits:
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: fips-operator-check-step-action
      computeResources:
        limits:
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 256Mi
      ref:
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions
          - name: revision
            value: c366291f484f2510767a51d0f45d7bc37877e94e
          - name: pathInRepo
            value: stepactions/fips-operator-check-step-action/0.1/fips-operator-check-step-action.yaml
        resolver: git
    - name: parse-images-processed-result
      image: quay.io/redhat-appstudio/konflux-test:v1.4.12@sha256:b42202199805420527c2552dea22b02ab0f051b79a4b69fbec9a77f8832e5623
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        if [ -e "/tekton/home/images_processed.txt" ]; then
          tee "$(results.IMAGES_PROCESSED.path)" </tekton/home/images_processed.txt
        else
          echo "Task was skipped. Exiting"
          exit 0
        fi
