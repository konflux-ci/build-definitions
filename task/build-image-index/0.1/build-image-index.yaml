apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "docker"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, konflux"
  name: build-image-index
spec:
  description: |-
    This takes existing Image Manifests and combines them in an Image Index.
  params:
  - name: IMAGE
    description: The target image and tag where the image will be pushed to.
    type: string
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    type: string
    default: "true"
  - name: COMMIT_SHA
    description: The commit the image is built from.
    type: string
    default: ""
  - name: IMAGES
    description: List of Image Manifests to be referenced by the Image Index
    type: array
  - name: IMAGE_EXPIRES_AFTER
    description: Delete image tag after specified time resulting in garbage collection of the digest. Empty means to keep the image tag. Time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
    type: string
    default: ""
  - name: ALWAYS_BUILD_INDEX
    description: Build an image index even if IMAGES is of length 1. Default true. If the image index generation is skipped, the task will forward values for params.IMAGES[0] to results.IMAGE_*. In order to properly set all results, use the repository:tag@sha256:digest format for the IMAGES parameter.
    type: string
    default: "true"
  - name: STORAGE_DRIVER
    description: Storage driver to configure for buildah
    type: string
    default: vfs
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository and tag where the built image was pushed
    name: IMAGE_URL
  - description: List of all referenced image manifests
    name: IMAGES
  stepTemplate:
    env:
    - name: BUILDAH_FORMAT
      value: oci
    - name: COMMIT_SHA
      value: $(params.COMMIT_SHA)
    - name: IMAGE
      value: $(params.IMAGE)
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: ALWAYS_BUILD_INDEX
      value: $(params.ALWAYS_BUILD_INDEX)
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
  steps:
  - image: quay.io/konflux-ci/buildah-task:latest@sha256:1301e1a87a44898ab73e5dff8f6ac7499be4cb64eb7300e25d7a20ae266c87d3
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    name: build
    computeResources:
      limits:
        memory: 4Gi
      requests:
        memory: 512Mi
        cpu: 250m
    args: ["$(params.IMAGES[*])"]
    script: |
      #!/bin/bash
      # Fixing group permission on /var/lib/containers
      set -eu
      set -o pipefail
      chown root:root /var/lib/containers

      sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

      if [[ $# -ne 1 && "$ALWAYS_BUILD_INDEX" != "true" ]]; then
        echo "Skipping image index generation while supplying multiple image inputs is unsupported."
        exit 2
      fi

      image_manifests=""
      buildah manifest create "$IMAGE"
      for i in $@
      do
        TOADD="$i"
        TOADD_URL="$(echo "$i" | cut -d@ -f1)"
        TOADD_DIGEST="$(echo "$i" | cut -d@ -f2)"
        if [[ $(echo "$i" | tr -cd ":" | wc -c) == 2 ]]; then
          #format is repository:tag@sha256:digest
          #we need to remove the tag, and just reference the digest
          #as tag + digest is not supported
          TOADD_REPOSITORY="$(echo "$i" | cut -d: -f1)"
          TOADD="${TOADD_REPOSITORY}@${TOADD_DIGEST}"
        fi
        if [[ "$ALWAYS_BUILD_INDEX" != "true" ]]; then
          echo "Skipping image index generation. Returning results for $TOADD"
          echo -n "${TOADD_URL}" > "$(results.IMAGE_URL.path)"
          echo -n "${TOADD_DIGEST}" > "$(results.IMAGE_DIGEST.path)"
          echo -n "${TOADD}" > "$(results.IMAGES.path)"
          exit 0
        fi
        echo "Adding $TOADD"
        image_manifests="${image_manifests} ${TOADD},"
        buildah manifest add $IMAGE "docker://$TOADD" --all
      done

      status=-1
      max_run=5
      sleep_sec=10
      for run in $(seq 1 $max_run); do
        status=0
        [ "$run" -gt 1 ] && sleep $sleep_sec
        echo "Pushing image to registry"
        buildah manifest push \
          --tls-verify=$TLSVERIFY \
          --digestfile image-digest $IMAGE \
          docker://$IMAGE && break || status=$?
      done
      if [ "$status" -ne 0 ]; then
          echo "Failed to push image to registry after ${max_run} tries"
          exit 1
      fi

      cat image-digest | tee $(results.IMAGE_DIGEST.path)
      echo -n "$IMAGE" | tee "$(results.IMAGE_URL.path)"
      echo -n "${image_manifests:1:-1}" > "$(results.IMAGES.path)"
    securityContext:
      capabilities:
        add:
          - SETFCAP
