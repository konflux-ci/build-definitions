apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "docker"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, konflux"
  name: build-image-index
spec:
  description: |-
    This takes existing Image Manifests and combines them in an Image Index.
  params:
  - name: IMAGE
    description: The target image and tag where the image will be pushed to.
    type: string
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    type: string
    default: "true"
  - name: COMMIT_SHA
    description: The commit the image is built from.
    type: string
    default: ""
  - name: IMAGES
    description: List of Image Manifests to be referenced by the Image Index
    type: array
  - name: IMAGE_EXPIRES_AFTER
    description: Delete image tag after specified time resulting in garbage collection of the digest. Empty means to keep the image tag. Time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
    type: string
    default: ""
  - name: ALWAYS_BUILD_INDEX
    description: Build an image index even if IMAGES is of length 1. Default true. If the image index generation is skipped, the task will forward values for params.IMAGES[0] to results.IMAGE_*. In order to properly set all results, use the repository:tag@sha256:digest format for the IMAGES parameter.
    type: string
    default: "true"
  - name: STORAGE_DRIVER
    description: Storage driver to configure for buildah
    type: string
    default: vfs
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository and tag where the built image was pushed
    name: IMAGE_URL
  - description: List of all referenced image manifests
    name: IMAGES
  - description: Image reference of the built image containing both the repository and the digest
    name: IMAGE_REF
  - name: SBOM_BLOB_URL
    description: Reference of SBOM blob digest to enable digest-based verification from provenance
    type: string
  volumes:
    - name: shared-dir
      emptyDir: {}

  stepTemplate:
    env:
    - name: BUILDAH_FORMAT
      value: oci
    - name: COMMIT_SHA
      value: $(params.COMMIT_SHA)
    - name: IMAGE
      value: $(params.IMAGE)
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: ALWAYS_BUILD_INDEX
      value: $(params.ALWAYS_BUILD_INDEX)
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    volumeMounts:
      - name: shared-dir
        mountPath: /index-build-data
  steps:
  - image: quay.io/konflux-ci/buildah-task:latest@sha256:5cbd487022fb7ac476cbfdea25513b810f7e343ec48f89dc6a4e8c3c39fa37a2
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    name: build
    computeResources:
      limits:
        memory: 4Gi
      requests:
        memory: 512Mi
        cpu: 250m
    args: ["$(params.IMAGES[*])"]
    script: |
      #!/bin/bash
      # Fixing group permission on /var/lib/containers
      set -eu
      set -o pipefail
      chown root:root /var/lib/containers

      sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

      if [[ $# -ne 1 && "$ALWAYS_BUILD_INDEX" != "true" ]]; then
        echo "Skipping image index generation while supplying multiple image inputs is unsupported."
        exit 2
      fi

      buildah manifest create "$IMAGE"
      for i in $@
      do
        TOADD="$i"
        TOADD_URL="$(echo "$i" | cut -d@ -f1)"
        TOADD_DIGEST="$(echo "$i" | cut -d@ -f2)"
        if [[ $(echo "$i" | tr -cd ":" | wc -c) == 2 ]]; then
          #format is repository:tag@sha256:digest
          #we need to remove the tag, and just reference the digest
          #as tag + digest is not supported
          TOADD_REPOSITORY="$(echo "$i" | cut -d: -f1)"
          TOADD="${TOADD_REPOSITORY}@${TOADD_DIGEST}"
        fi
        if [[ "$ALWAYS_BUILD_INDEX" != "true" ]]; then
          echo "Skipping image index generation. Returning results for $TOADD."
          echo -n "${TOADD_URL}" > "$(results.IMAGE_URL.path)"
          echo -n "${TOADD_DIGEST}" > "$(results.IMAGE_DIGEST.path)"
          echo -n "${TOADD}" > "$(results.IMAGES.path)"
          exit 0
        fi
        echo "Adding $TOADD"
        buildah manifest add $IMAGE "docker://$TOADD" --all
      done

      status=-1
      max_run=5
      sleep_sec=10
      for run in $(seq 1 $max_run); do
        status=0
        [ "$run" -gt 1 ] && sleep $sleep_sec
        echo "Pushing image to registry"
        buildah manifest push \
          --tls-verify=$TLSVERIFY \
          --digestfile image-digest $IMAGE \
          docker://$IMAGE && break || status=$?
      done
      if [ "$status" -ne 0 ]; then
          echo "Failed to push image to registry after ${max_run} tries"
          exit 1
      fi

      INDEX_REPOSITORY="$(echo "$IMAGE" | cut -d@ -f1 | cut -d: -f1)"
      MANIFEST_DIGESTS=$(buildah manifest inspect "$IMAGE" | jq -er ".manifests[].digest")
      image_manifests=""
      for i in $MANIFEST_DIGESTS
      do
        image_manifests="${image_manifests} ${INDEX_REPOSITORY}@${i},"
      done

      cat image-digest | tee $(results.IMAGE_DIGEST.path)
      echo -n "$IMAGE" | tee "$(results.IMAGE_URL.path)"
      {
        echo -n "${IMAGE}@"
        cat "image-digest"
      } > "$(results.IMAGE_REF.path)"
      echo -n "${image_manifests:1:-1}" > "$(results.IMAGES.path)"

      IMAGE_DIGEST=$(cat image-digest)

      INDEX_IMAGE_PULLSPEC="${IMAGE}@${IMAGE_DIGEST}"
      buildah manifest inspect "$INDEX_IMAGE_PULLSPEC" > /index-build-data/manifest_data.json
    securityContext:
      capabilities:
        add:
          - SETFCAP

  - image: quay.io/redhat-appstudio/sbom-utility-scripts-image@sha256:53a3041dff341b7fd1765b9cc2c324625d19e804b2eaff10a6e6d9dcdbde3a91
    name: create-sbom
    computeResources:
      limits:
        memory: 512Mi
        cpu: 200m
      requests:
        memory: 256Mi
        cpu: 100m
    script: |
      #!/bin/bash
      set -e

      MANIFEST_DATA_FILE="/index-build-data/manifest_data.json"
      if [ ! -f "$MANIFEST_DATA_FILE" ]; then
        echo "The manifest_data.json file does not exist. Skipping the SBOM creation..."
        exit 0
      fi

      IMAGE_URL="$(cat "$(results.IMAGE_URL.path)")"
      IMAGE_DIGEST="$(cat "$(results.IMAGE_DIGEST.path)")"
      echo "Creating SBOM result file..."
      python3 index_image_sbom_script.py \
        --image-index-url "$IMAGE_URL" \
        --image-index-digest "$IMAGE_DIGEST" \
        --inspect-input-file "$MANIFEST_DATA_FILE" \
        --output-path /index-build-data/sbom-results.json

  - name: upload-sbom
    image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
    script: |
      #!/bin/bash
      set -e

      SBOM_RESULT_FILE="/index-build-data/sbom-results.json"
      if [ ! -f "$SBOM_RESULT_FILE" ]; then
        echo "The sbom_results.json file does not exists. Skipping the SBOM upload..."
        exit 0
      fi

      cosign attach sbom --sbom "$SBOM_RESULT_FILE" --type spdx "$(cat "$(results.IMAGE_REF.path)")"

      # Remove tag from IMAGE while allowing registry to contain a port number.
      sbom_repo="${IMAGE%:*}"
      sbom_digest="$(sha256sum "$SBOM_RESULT_FILE" | cut -d' ' -f1)"
      # The SBOM_BLOB_URL is created by `cosign attach sbom`.
      echo -n "${sbom_repo}@sha256:${sbom_digest}" | tee "$(results.SBOM_BLOB_URL.path)"
    computeResources:
      limits:
        memory: 512Mi
        cpu: 200m
      requests:
        memory: 256Mi
        cpu: 100m
