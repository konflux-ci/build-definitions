apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, hacbs"
  name: prefetch-dependencies
spec:
  description: |-
    Task that uses Cachi2 to prefetch build dependencies.
    See docs at https://github.com/containerbuildsystem/cachi2#basic-usage.
  params:
  - description: Configures project packages that will have their dependencies prefetched.
    name: input
  - description: >
      Enable in-development package managers. WARNING: the behavior may change at any time without
      notice. Use at your own risk.
    name: dev-package-managers
    default: "false"
  steps:
  - image: quay.io/redhat-appstudio/cachi2:0.7.0@sha256:1fc772aa3636fd0b43d62120d832e5913843e028e8cac42814b487c3a0a32bd8
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
    name: prefetch-dependencies
    env:
    - name: INPUT
      value: $(params.input)
    - name: DEV_PACKAGE_MANAGERS
      value: $(params.dev-package-managers)
    script: |
      if [ -z "${INPUT}" ]
      then
        echo "Build will be executed with network isolation, but no content was configured to be prefetched."
        exit 0
      fi

      if [ "$DEV_PACKAGE_MANAGERS" = "true" ]; then
        dev_pacman_flag=--dev-package-managers
      else
        dev_pacman_flag=""
      fi

      cachi2 fetch-deps \
      $dev_pacman_flag \
      --source=$(workspaces.source.path)/source \
      --output=$(workspaces.source.path)/cachi2/output \
      "${INPUT}"

      cachi2 generate-env $(workspaces.source.path)/cachi2/output \
      --format env \
      --for-output-dir=/cachi2/output \
      --output $(workspaces.source.path)/cachi2/cachi2.env

      cachi2 inject-files $(workspaces.source.path)/cachi2/output \
      --for-output-dir=/cachi2/output
  workspaces:
  - name: source
    description: Workspace with the source code, cachi2 artifacts will be stored on the workspace as well
