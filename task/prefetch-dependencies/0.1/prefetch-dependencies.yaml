apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, konflux"
  name: prefetch-dependencies
spec:
  description: |-
    Task that uses Cachi2 to prefetch build dependencies.
    See docs at https://github.com/containerbuildsystem/cachi2#basic-usage.

    ## Configuration

    Config file must be passed as a YAML string. For all available config options please check
    [available configuration parameters] page.

    Example of setting timeouts:

    ```yaml
    params:
      - name: config-file-content
        value: |
          ---
          requests_timeout: 300
          subprocess_timeout: 3600
    ```

    [available configuration parameters]: https://github.com/containerbuildsystem/cachi2?tab=readme-ov-file#available-configuration-parameters
  params:
  - description: Configures project packages that will have their dependencies prefetched.
    name: input
  - description: >
      Enable in-development package managers. WARNING: the behavior may change at any time without
      notice. Use at your own risk.
    name: dev-package-managers
    default: "false"
  - description: Set cachi2 log level (debug, info, warning, error)
    name: log-level
    default: "info"
  - description: |
      Pass configuration to cachi2.
      Note this needs to be passed as a YAML-formatted config dump, not as a file path!
    name: config-file-content
    default: ""
  - name: sbom-type
    default: cyclonedx
    description: "Select the SBOM format to generate. Valid values: spdx, cyclonedx."
  - name: caTrustConfigMapName
    type: string
    description: The name of the ConfigMap to read CA bundle data from.
    default: trusted-ca
  - name: caTrustConfigMapKey
    type: string
    description: The name of the key in the ConfigMap that contains the CA bundle data.
    default: ca-bundle.crt
  - name: ACTIVATION_KEY
    default: activation-key
    description: Name of secret which contains subscription activation key
    type: string

  stepTemplate:
    env:
      - name: CONFIG_FILE_CONTENT
        value: $(params.config-file-content)
    volumeMounts:
      - name: config
        mountPath: /mnt/config
      - mountPath: /shared
        name: shared
  steps:
  - name: sanitize-cachi2-config-file-with-yq
    image: quay.io/konflux-ci/yq:latest@sha256:408913942efbec9cc72f7f91cd65a4f660eaa02079a465796deff9333f07c399
    script: |
      if [ -n "${CONFIG_FILE_CONTENT}" ]
      then
        # we need to drop 'goproxy_url' for safety reasons until cachi2 decides what the SBOM
        # impact of this configuration option will be:
        # https://github.com/containerbuildsystem/cachi2/issues/577
        yq 'del(.goproxy_url)' <<< "${CONFIG_FILE_CONTENT}" > /mnt/config/config.yaml
      fi

  - name: check-prefetch-input
    image: quay.io/konflux-ci/cachi2:0.19.0@sha256:f67e7f9771c3d425bdd917313553c882d0ed942076dc31d9ce35524bdda1fb6e
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    env:
    - name: INPUT
      value: $(params.input)
    script: |
      if [ -z "${INPUT}" ]
      then
        # Confirm input was provided though it's likely the whole task would be skipped if it wasn't
        echo "No prefetch will be performed because no input was provided for cachi2 fetch-deps"
        echo "skip" > /shared/skip
      fi

  - name: register-red-hat
    image: quay.io/konflux-ci/cachi2:0.19.0@sha256:f67e7f9771c3d425bdd917313553c882d0ed942076dc31d9ce35524bdda1fb6e
    env:
    - name: INPUT
      value: $(params.input)
    - name: ACTIVATION_KEY
      value: $(params.ACTIVATION_KEY)
    volumeMounts:
    - mountPath: /activation-key
      name: activation-key
    results:
    - name: registered
      type: string
    script: |
      #!/bin/bash
      if [ -f /shared/skip ]; then
        echo "Skipping."
        exit 0
      fi

      echo "false" > /shared/registered
      ACTIVATION_KEY_PATH="/activation-key"

      mkdir -p /shared/rhsm/entitlement
      mkdir -p /shared/rhsm/consumer

      if [ -e /activation-key/org ]; then
        cp -r --preserve=mode "$ACTIVATION_KEY_PATH" /tmp/activation-key

        echo "Registering with Red Hat subscription manager."
        subscription-manager register --org "$(cat /tmp/activation-key/org)" --activationkey "$(cat /tmp/activation-key/activationkey)"

        # copy generated certificates to /shared/rhsm
        cp /etc/pki/entitlement/*.pem /shared/rhsm/entitlement/
        cp /etc/pki/consumer/*.pem /shared/rhsm/consumer/

        file="$(find /shared/rhsm/entitlement -regextype egrep -regex '.*[0-9]+\.pem' -printf %f)"
        echo "file: $file"
        basename "$file" .pem > /shared/RHSM_ID
        echo "./RHSM_ID:"
        cat /shared/RHSM_ID

        # trust the CA used for Red Hat CDN
        cp /etc/rhsm-host/ca/redhat-uep.pem /shared/rhsm/redhat-uep.pem
      fi

  - name: preprocess-input
    image: quay.io/konflux-ci/cachi2:0.19.0@sha256:f67e7f9771c3d425bdd917313553c882d0ed942076dc31d9ce35524bdda1fb6e
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent

    env:
    - name: INPUT
      value: $(params.input)
    - name: ACTIVATION_KEY
      value: $(params.ACTIVATION_KEY)
    args: ["$(params.input)"]
    script: |
      #!/bin/python3
      import json
      import os
      import sys


      def string_to_json(input: str):
          if input in ['bundler', 'generic', 'gomod', 'npm', 'pip', 'rpm', 'yarn-classic', 'yarn']:
              input = '{"type": "%s"}' % input
              print("json: %s" % input)
          return input


      def json_to_list(input: str):
          input = json.loads(input)
          if type(input) is dict:
              input = [input]
          return json.dumps(input)


      def inject_certs(input: str, rhsm_id: str):
          input_list: list = json.loads(input)

          cert = ("/shared/rhsm/entitlement/%s.pem" % rhsm_id)
          key = ("/shared/rhsm/entitlement/%s-key.pem" % rhsm_id)
          ca_bundle = os.getenv("CA_BUNDLE", None)
          for pkg_man in input_list:
              if pkg_man["type"] == "rpm":

                  # preserve verify setting
                  verify = \
                      pkg_man.get("options", {}).get("ssl", {}).get("ssl_verify", 1)

                  # preserve other options
                  options: dict = pkg_man.get('options', {})

                  ssl_options = {
                      "client_key": key,
                      "client_cert": cert,
                      "ca_bundle": ca_bundle,
                      "ssl_verify": verify}

                  options['ssl'] = ssl_options
                  pkg_man["options"] = options
          return (json.dumps(input_list))


      def convert_input(input, rhsm_id):
          input = string_to_json(input)
          input = json_to_list(input)
          input = inject_certs(input, rhsm_id)
          return input


      if __name__ == '__main__':

          if os.path.isfile("/shared/skip"):
              sys.exit()

          rhsm_id = ""
          input = ""

          try:
              f = open("/shared/RHSM_ID", "r")
              rhsm_id = f.read().strip("\n")
          except FileNotFoundError:
              print("No RHSM ID found.")

          if rhsm_id == "":
              input = sys.argv[1]
          else:
              print("RHSM Cert ID is: %s" % rhsm_id)
              print("Called with args: %s" % str(sys.argv))
              input = convert_input(sys.argv[1], rhsm_id)

          print("Preprocessing result: %s" % input)
          with open('/shared/rhsm/preprocessed_input', 'w') as f:
              f.write(input)


  - name: prefetch-dependencies
    image: quay.io/konflux-ci/cachi2:0.19.0@sha256:f67e7f9771c3d425bdd917313553c882d0ed942076dc31d9ce35524bdda1fb6e
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    env:
    - name: DEV_PACKAGE_MANAGERS
      value: $(params.dev-package-managers)
    - name: LOG_LEVEL
      value: $(params.log-level)
    - name: SBOM_TYPE
      value: $(params.sbom-type)
    - name: WORKSPACE_GIT_AUTH_BOUND
      value: $(workspaces.git-basic-auth.bound)
    - name: WORKSPACE_GIT_AUTH_PATH
      value: $(workspaces.git-basic-auth.path)
    - name: WORKSPACE_NETRC_BOUND
      value: $(workspaces.netrc.bound)
    - name: WORKSPACE_NETRC_PATH
      value: $(workspaces.netrc.path)
    volumeMounts:
      - name: trusted-ca
        mountPath: /mnt/trusted-ca
        readOnly: true
      - mountPath: /activation-key
        name: activation-key
    computeResources:
      limits:
        memory: 3Gi
      requests:
        cpu: '1'
        memory: 3Gi
    script: |
      #!/bin/bash

      if [ -f /shared/skip ]; then
        echo "Skipping."
        exit 0
      fi

      if [ -f /mnt/config/config.yaml ]; then
        config_flag=--config-file=/mnt/config/config.yaml
      else
        config_flag=""
      fi

      if [ "$DEV_PACKAGE_MANAGERS" = "true" ]; then
        dev_pacman_flag=--dev-package-managers
      else
        dev_pacman_flag=""
      fi

      INPUT=$(cat /shared/rhsm/preprocessed_input)
      export INPUT

      # trust Red Hat CA cert used for Red Hat CDN
      if [ -f /shared/rhsm/redhat-uep.pem ]; then
        echo "Adding Red Hat CA certificate to trusted roots."
        cp /shared/rhsm/redhat-uep.pem /etc/pki/ca-trust/source/anchors/
        update-ca-trust
      fi

      # Copied from https://github.com/konflux-ci/build-definitions/blob/main/task/git-clone/0.1/git-clone.yaml
      if [ "${WORKSPACE_GIT_AUTH_BOUND}" = "true" ] ; then
        if [ -f "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" ]; then
          cp "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" "${HOME}/.git-credentials"
          cp "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" "${HOME}/.gitconfig"
        # Compatibility with kubernetes.io/basic-auth secrets
        elif [ -f "${WORKSPACE_GIT_AUTH_PATH}/username" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/password" ]; then
          HOSTNAME=$(cd "$(workspaces.source.path)/source" && git remote get-url origin | awk -F/ '{print $3}')
          echo "https://$(cat ${WORKSPACE_GIT_AUTH_PATH}/username):$(cat ${WORKSPACE_GIT_AUTH_PATH}/password)@$HOSTNAME" > "${HOME}/.git-credentials"
          echo -e "[credential \"https://$HOSTNAME\"]\n  helper = store" > "${HOME}/.gitconfig"
        else
          echo "Unknown git-basic-auth workspace format"
          exit 1
        fi
        chmod 400 "${HOME}/.git-credentials"
        chmod 400 "${HOME}/.gitconfig"
      fi

      if [ "${WORKSPACE_NETRC_BOUND}" = "true" ]; then
        cp "${WORKSPACE_NETRC_PATH}/.netrc" "${HOME}/.netrc"
      fi

      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      cachi2 --log-level="$LOG_LEVEL" $config_flag fetch-deps \
      $dev_pacman_flag \
      --source=$(workspaces.source.path)/source \
      --output=$(workspaces.source.path)/cachi2/output \
      --sbom-output-type="$SBOM_TYPE" \
      "${INPUT}"

      cachi2 --log-level="$LOG_LEVEL" generate-env $(workspaces.source.path)/cachi2/output \
      --format env \
      --for-output-dir=/cachi2/output \
      --output $(workspaces.source.path)/cachi2/cachi2.env

      cachi2 --log-level="$LOG_LEVEL" inject-files $(workspaces.source.path)/cachi2/output \
      --for-output-dir=/cachi2/output

  - name: unregister-rhsm
    image: quay.io/konflux-ci/cachi2:0.19.0@sha256:f67e7f9771c3d425bdd917313553c882d0ed942076dc31d9ce35524bdda1fb6e
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    script: |
      #!/bin/bash
      if [ -f /shared/skip ]; then
        echo "Skipping."
        exit 0
      fi

      cp /shared/rhsm/consumer/* /etc/pki/consumer/
      cp /shared/rhsm/entitlement/* /etc/pki/entitlement/
      subscription-manager unregister || true

  workspaces:
  - name: source
    description: Workspace with the source code, cachi2 artifacts will be stored on the workspace as well
  - name: git-basic-auth
    description: |
      A Workspace containing a .gitconfig and .git-credentials file or username and password.
      These will be copied to the user's home before any cachi2 commands are run. Any
      other files in this Workspace are ignored. It is strongly recommended
      to bind a Secret to this Workspace over other volume types.
    optional: true
  - name: netrc
    description: |
      Workspace containing a .netrc file. Cachi2 will use the credentials in this file when
      performing http(s) requests.
    optional: true
  volumes:
    - name: shared
      emptyDir: {}
    - name: etc-pki-entitlement
      emptyDir: {}
    - name: activation-key
      secret:
        optional: true
        secretName: $(params.ACTIVATION_KEY)
    - name: trusted-ca
      configMap:
        name: $(params.caTrustConfigMapName)
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        optional: true
    - name: config
      emptyDir: {}
