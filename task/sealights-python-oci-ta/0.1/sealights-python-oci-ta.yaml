apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sealights-python-oci-ta
  labels:
    konflux-ci/sealights: "true"
    konflux-ci/sealights-language: "python"
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: konflux
spec:
  description: >-
    This Tekton task automates the process of configuring your Python application with Sealights for quality analytics and testing.
    It retrieves the source code from a trusted artifact, installs Python Sealights agent, configures the app for Sealights using
    vars from your PipelineRun, scans all .py files, reports scan to Sealights, and stores results to be used later on in testing.
    The task can be triggered by either Pull Request or other events.
  results:
    - name: sealights-bsid
      type: string
      description: "A unique identifier generated for the current Sealights build session."
    - name: sealights-build-name
      type: string
      description: "A unique build name generated using the commit SHA and current date to prevent conflicts during test reruns."
  params:
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with the application source code.
      type: string
    - name: component
      type: string
      description: "The name of the Konflux component associated with the integration tests."
    - name: scm-provider
      type: string
      default: "github"
      description: "The source control management (SCM) provider used for the project, such as 'Github', 'Gitlab'."
    - name: exclude
      type: array
      default: []
      description: "A list of paths to exclude from Sealights instrumentation during the code scan. Specify paths to prevent them from being analyzed (e.g., '/app/source/tests/*','/app/examples/*')."
    - name: repository-url
      type: string
      description: "The name or URL of the source code repository (e.g., 'github.com/org/repo')."
      default: ""
    - name: branch
      type: string
      description: "The name of the Git branch to use for the operation (e.g., 'main' or 'feature-branch')."
      default: "main"
    - name: revision
      type: string
      description: "The Git revision (commit SHA) from which the test pipeline is originating."
    - name: pull-request-number
      type: string
      description: "The identifier number of the pull request/merge request."
      default: ""
    - name: target-branch
      type: string
      description: "The name of the target branch for the pull request, typically the branch into which the changes will be merged (e.g., 'main', 'develop')."
      default: "main"
    - name: workspace-path
      type: string
      description: "The path to the root of your repository."
  volumes:
    - name: sealights-credentials
      secret:
        secretName: sealights-credentials
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /app
        name: workdir
      - name: sealights-credentials
        mountPath: /usr/local/sealights-credentials
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/app/source
    - name: sealights-python-instrumentation
      computeResources:
        limits:
          memory: 512Mi
          cpu: 500m
        requests:
          cpu: 100m
          memory: 256Mi
      image: quay.io/konflux-ci/tekton-integration-catalog/sealights-python:latest@sha256:fcdcd657ca338d62a635852c2e732578ef8a40c60a68f1a26fbefa9348de10fd
      workingDir: /app/source
      securityContext:
        runAsUser: 0
      env:
        - name: COMPONENT
          value: $(params.component)
        - name: SCM_PROVIDER
          value: $(params.scm-provider)
        - name: REPOSITORY_URL
          value: $(params.repository-url)
        - name: BRANCH
          value: $(params.branch)
        - name: REVISION
          value: $(params.revision)
        - name: PULL_REQUEST_NUMBER
          value: $(params.pull-request-number)
        - name: TARGET_BRANCH
          value: $(params.target-branch)
        - name: WORKSPACE_PATH
          value: $(params.workspace-path)
        - name: TEST_EVENT
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pipelinesascode.tekton.dev/event-type']
      args: ["$(params.exclude[*])"]
      script: |
        #!/bin/bash
        set -euo pipefail

        export SEALIGHTS_TOKEN BUILD_NAME EXCLUDE_ENUM

        SEALIGHTS_TOKEN="$(cat /usr/local/sealights-credentials/token)"
        BUILD_NAME="${REVISION}_$(date +'%y%m%d.%H%M')"
        EXCLUDE_ENUM="$(IFS=,; printf "%s," "$@" | sed 's/,$//')"

        # In case build is coming from a /retest event then it's a pull_request
        # if event type is not push and pull_request_number is not empty then is a pull_request
        if [ "$TEST_EVENT" != "push" ] && [ -n "$PULL_REQUEST_NUMBER" ]; then
          TEST_EVENT="pull_request"
        fi

        # Configures the app for sealights using vars from your pipeline run.
        if [[ -n "${TEST_EVENT}" && "${TEST_EVENT}" == "pull_request" ]]; then
          echo "[INFO] Generate build session id from a Pull Request source code"
          sl-python prConfig --appname "${COMPONENT}" --targetbranch "${TARGET_BRANCH}" \
            --pullrequestnumber "${PULL_REQUEST_NUMBER}" --latestcommit "${REVISION}" --repourl "${REPOSITORY_URL}" --buildname "${BUILD_NAME}" --exclude "${EXCLUDE_ENUM}" --workspacepath "${WORKSPACE_PATH}" --token "${SEALIGHTS_TOKEN}"
        else
          echo "[INFO] Creating build session ID (BSID) for app: ${COMPONENT}, branch: ${BRANCH}, build: ${BUILD_NAME}..."
          sl-python config --appname "${COMPONENT}" --branchname "${TARGET_BRANCH}" --buildname "${BUILD_NAME}" --exclude "${EXCLUDE_ENUM}" --workspacepath "${WORKSPACE_PATH}" --token "${SEALIGHTS_TOKEN}"
        fi

        # Scans all .py files that are not in the --exclude step above and reports scan to sealights.
        sl-python scan --buildsessionidfile buildSessionId.txt --scmprovider "${SCM_PROVIDER}" --token "${SEALIGHTS_TOKEN}"

        # Stores results to be used in future tasks for testing.
        echo -n "$(cat buildSessionId.txt)" > "$(results.sealights-bsid.path)"
        echo -n "$BUILD_NAME" > "$(results.sealights-build-name.path)"
