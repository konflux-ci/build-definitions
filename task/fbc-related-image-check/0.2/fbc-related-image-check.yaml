apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    build.appstudio.redhat.com/expires-on: "2025-01-31T00:00:00Z"
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: konflux
  labels:
    app.kubernetes.io/version: "0.2"
  name: fbc-related-image-check
spec:
  description: Checks the validity of all the images referenced in the file-based
    catalog (FBC) to inspect manifest content using Skopeo.
  results:
  - description: Tekton task test output.
    name: TEST_OUTPUT
  steps:
  - computeResources:
      limits:
        memory: 4Gi
      requests:
        cpu: 10m
        memory: 512Mi
    image: quay.io/konflux-ci/konflux-test:v1.4.12@sha256:b42202199805420527c2552dea22b02ab0f051b79a4b69fbec9a77f8832e5623
    name: check-related-images
    script: |
      #!/usr/bin/env bash
      set -euo pipefail
      # shellcheck source=/dev/null
      source /utils.sh
      trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

      FAILEDIMAGES=""
      # shellcheck disable=SC2046
      catalog="$(opm render $(workspaces.workspace.path)/hacbs/fbc-validation/confdir/)"

      # OPM generates catalog file in a way that yaml file could contain stream of JSON objects
      # thats why we need jq in for this situation, because yq can't parse this file
      # however there is also posibility that catalog.yaml has yaml data in it

      status=0
      # shellcheck disable=SC2086
      relImgs="$(jq -r '.relatedImages[]?.image' <<< ${catalog})" || status=$?
      if [ $status -ne 0 ]; then
        echo "Could not get related images. Make sure catalog.yaml exists in FBC fragment image and it is valid .yaml or .json format."
        note="Task $(context.task.name) failed: Could not fetch related images. Make sure you have catalog.yaml or catalog.json formatted correctly in your file-based catalog (FBC) fragment image."
        TEST_OUTPUT=$(make_result_json -r FAILURE -f 1 -t "$note")
        echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
        exit 0
      fi

      echo -e "These are related images:\n$relImgs."
      # cycle through those related images and show outputs
      for i in ${relImgs// /}
      do
        if ! skopeo inspect --no-tags "docker://${i}"; then
          echo "Skopeo inspect failed on related image: $i."
          FAILEDIMAGES+="$i, "
        fi
      done
      if [ -z "$FAILEDIMAGES" ]; then
        note="Task $(context.task.name) succeeded: For details, check Tekton task logs."
        TEST_OUTPUT=$(make_result_json -r SUCCESS -s 1 -t "$note")
        echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
        exit 0
      else
        echo "These images failed inspection: $FAILEDIMAGES."
        note="Task $(context.task.name) failed: Command skopeo inspect could not inspect images. For details, check Tekton task log."
        TEST_OUTPUT=$(make_result_json -r FAILURE -f 1 -t "$note")
        echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
        exit 0
      fi
    workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
  workspaces:
  - name: workspace
