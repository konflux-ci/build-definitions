apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: fbc-related-image-check
spec:
  description: >-
    Checks the validity of all the images referenced in the file-based catalog (FBC) to inspect manifest content using Skopeo.
  results:
    - name: TEST_OUTPUT
      description: Tekton task test output.
  workspaces:
    - name: workspace
  steps:
    - name: check-related-images
      image: quay.io/redhat-appstudio/hacbs-test:v1.1.8@sha256:8de0ec0875c7c6a41e0208b0030090992169f501166154edaded8a4f6121b164
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      computeResources:
        limits:
          memory: 4Gi
        requests:
          memory: 512Mi
          cpu: 10m
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        source /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        FAILEDIMAGES=""
        catalog="$(find $(workspaces.workspace.path)/hacbs/fbc-validation/ -name catalog.yaml)"

        # OPM generates catalog file in a way that yaml file could contain stream of JSON objects
        # thats why we need jq in for this situation, because yq can't parse this file
        # however there is also posibility that catalog.yaml has yaml data in it

        status=0
        relImgs="$(yq -r '.relatedImages[]?.image' $catalog)" || status=$?
        if [ $status -ne 0 ]; then
          echo "Processing the catalog with yq failed because catalog.yaml contains data type other than yaml. Attempting to process with jq..."
          status=0
          relImgs="$(jq -r '.relatedImages[]?.image' $catalog)" || status=$?
          if [ $status -ne 0 ]; then
            echo "Could not get related images. Make sure catalog.yaml exists in FBC fragment image and it is valid .yaml format."
            note="Task $(context.task.name) failed: Could not fetch related images. Make sure you have catalog.yaml formatted correctly in your file-based catalog (FBC) fragment image."
            TEST_OUTPUT=$(make_result_json -r FAILURE -f 1 -t "$note")
            echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
          fi
        fi

        echo -e "These are related images:\n$relImgs."
        # cycle through those related images and show outputs
        for i in ${relImgs// /}
        do
          if ! skopeo inspect --no-tags "docker://${i}"; then
            echo "Skopeo inspect failed on related image: $i."
            FAILEDIMAGES+="$i, "
          fi
        done
        if [ -z "$FAILEDIMAGES" ]; then
          note="Task $(context.task.name) succeeded: For details, check Tekton task logs."
          TEST_OUTPUT=$(make_result_json -r SUCCESS -s 1 -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        else
          echo "These images failed inspection: $FAILEDIMAGES."
          note="Task $(context.task.name) failed: Command skopeo inspect could not inspect images. For details, check Tekton task log."
          TEST_OUTPUT=$(make_result_json -r FAILURE -f 1 -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi
