---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-buildah-with-sbom
spec:
  description: |
    Test the buildah task with SBOM generation enabled
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup-source
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: create-dockerfile
            image: quay.io/konflux-ci/appstudio-utils:1610c1fc4cfc9c9053dbefc1146904a4df6659ef@sha256:90ac97b811073cb99a23232c15a08082b586c702b85da6200cf54ef505e3c50c
            script: |
              #!/usr/bin/env bash
              set -euo pipefail

              # Create a simple source directory with a Dockerfile
              mkdir -p "$(workspaces.source.path)"
              cat > "$(workspaces.source.path)/Dockerfile" << 'EOF'
              FROM registry.access.redhat.com/ubi9/ubi-minimal@sha256:d85040b6e3ed3628a89683f51a38c709185efc3fb552db2ad1b9180f2a6c38be
              RUN microdnf install -y findutils && microdnf clean all
              RUN echo "Hello from buildah SBOM test" > /hello.txt
              EOF

              echo "Created Dockerfile:"
              cat "$(workspaces.source.path)/Dockerfile"
      workspaces:
        - name: source
          workspace: tests-workspace
    - name: run-buildah
      taskRef:
        name: buildah
      params:
        - name: IMAGE
          value: registry-service.kind-registry/test-buildah-sbom:latest
        - name: DOCKERFILE
          value: ./Dockerfile
        - name: CONTEXT
          value: .
        - name: HERMETIC
          value: "false"
        - name: SKIP_SBOM_GENERATION
          value: "false"
        - name: SBOM_TYPE
          value: "spdx"
      workspaces:
        - name: source
          workspace: tests-workspace
      runAfter:
        - setup-source
    - name: verify-build
      params:
        - name: IMAGE_DIGEST
          value: $(tasks.run-buildah.results.IMAGE_DIGEST)
        - name: IMAGE_URL
          value: $(tasks.run-buildah.results.IMAGE_URL)
        - name: IMAGE_REF
          value: $(tasks.run-buildah.results.IMAGE_REF)
        - name: SBOM_BLOB_URL
          value: $(tasks.run-buildah.results.SBOM_BLOB_URL)
      taskSpec:
        params:
          - name: IMAGE_DIGEST
          - name: IMAGE_URL
          - name: IMAGE_REF
          - name: SBOM_BLOB_URL
        steps:
          - name: check-image-and-sbom
            env:
              - name: IMAGE_DIGEST
                value: $(params.IMAGE_DIGEST)
              - name: IMAGE_URL
                value: $(params.IMAGE_URL)
              - name: IMAGE_REF
                value: $(params.IMAGE_REF)
              - name: SBOM_BLOB_URL
                value: $(params.SBOM_BLOB_URL)
            image: quay.io/konflux-ci/appstudio-utils:1610c1fc4cfc9c9053dbefc1146904a4df6659ef@sha256:90ac97b811073cb99a23232c15a08082b586c702b85da6200cf54ef505e3c50c
            script: |
              #!/usr/bin/env bash
              set -euo pipefail

              echo "Checking that IMAGE_DIGEST is not empty"
              if [ -z "$IMAGE_DIGEST" ]; then
                echo "ERROR: IMAGE_DIGEST is empty"
                exit 1
              fi
              echo "IMAGE_DIGEST: $IMAGE_DIGEST"

              echo "Checking that IMAGE_URL is not empty"
              if [ -z "$IMAGE_URL" ]; then
                echo "ERROR: IMAGE_URL is empty"
                exit 1
              fi
              echo "IMAGE_URL: $IMAGE_URL"

              echo "Checking that IMAGE_REF is not empty"
              if [ -z "$IMAGE_REF" ]; then
                echo "ERROR: IMAGE_REF is not empty"
                exit 1
              fi
              echo "IMAGE_REF: $IMAGE_REF"

              echo "Checking that SBOM_BLOB_URL is not empty"
              if [ -z "$SBOM_BLOB_URL" ]; then
                echo "ERROR: SBOM_BLOB_URL is empty - SBOM was not generated"
                exit 1
              fi
              echo "SBOM_BLOB_URL: $SBOM_BLOB_URL"

              echo "Verifying SBOM_BLOB_URL format"
              if [[ ! "$SBOM_BLOB_URL" =~ @sha256: ]]; then
                echo "ERROR: SBOM_BLOB_URL does not contain expected digest format"
                exit 1
              fi

              echo "Downloading SBOM using cosign"
              # Use cosign to download the SBOM from the image
              # The SBOM is attached as an attestation by the buildah task
              # Remove the tag from IMAGE_REF if present (cosign expects digest-only for download sbom)
              IMAGE_DIGEST_ONLY="${IMAGE_URL}@${IMAGE_DIGEST}"

              # Try downloading with cosign, allowing http registry
              export COSIGN_EXPERIMENTAL=1
              if ! cosign download sbom --allow-http-registry --allow-insecure-registry "$IMAGE_DIGEST_ONLY" > /tmp/sbom.json 2>/dev/null; then
                echo "ERROR: Failed to download SBOM with cosign"
                echo "Image reference: $IMAGE_DIGEST_ONLY"
                echo "SBOM blob URL: ${SBOM_BLOB_URL}"
                exit 1
              fi

              echo "Verifying SBOM is valid JSON"
              if ! jq . /tmp/sbom.json > /dev/null 2>&1; then
                echo "ERROR: SBOM is not valid JSON"
                cat /tmp/sbom.json
                exit 1
              fi

              echo "Checking SBOM format is SPDX"
              spdx_version=$(jq -r '.spdxVersion' /tmp/sbom.json)
              if [[ -z "$spdx_version" || "$spdx_version" == "null" ]]; then
                echo "ERROR: SBOM does not appear to be SPDX format (missing spdxVersion)"
                jq . /tmp/sbom.json | head -20
                exit 1
              fi
              echo "SBOM format verified: $spdx_version"

              echo "Checking SBOM contains packages"
              package_count=$(jq '.packages | length' /tmp/sbom.json)
              if [ "$package_count" -eq 0 ]; then
                echo "ERROR: SBOM contains no packages"
                exit 1
              fi
              echo "SBOM contains $package_count packages"

              echo "Verifying SBOM has required SPDX fields"
              doc_name=$(jq -r '.name' /tmp/sbom.json)
              doc_namespace=$(jq -r '.documentNamespace' /tmp/sbom.json)
              if [[ -z "$doc_name" || "$doc_name" == "null" ]]; then
                echo "ERROR: SBOM missing required 'name' field"
                exit 1
              fi
              if [[ -z "$doc_namespace" || "$doc_namespace" == "null" ]]; then
                echo "ERROR: SBOM missing required 'documentNamespace' field"
                exit 1
              fi
              echo "SBOM document name: $doc_name"
              echo "SBOM document namespace: $doc_namespace"

              echo "Build with SBOM generation succeeded"
              echo "SBOM validation complete - all checks passed"
      runAfter:
        - run-buildah
