apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: acs-image-check
  annotations:
    task.results.format: application/json
    task.results.type: roxctl-image-check
    task.results.container: step-report
    task.output.location: logs
spec:
  description: Policy check an image with StackRox/RHACS This tasks allows you to
    check an image against build-time policies and apply enforcement to fail builds.
    It's a companion to the stackrox-image-scan task, which returns full vulnerability
    scan results for an image.
  params:
    - name: rox-secret-name
      type: string
      description: |
        Secret containing the StackRox server endpoint and API token with CI permissions under rox-api-endpoint and rox-api-token keys.
        For example: rox-api-endpoint: rox.stackrox.io:443 ; rox-api-token: eyJhbGciOiJS...
    - name: image
      type: string
      description: |
        Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
    - name: insecure-skip-tls-verify
      type: string
      default: "false"
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central
        endpoint.  Defaults to `"false"`.
    - name: image-digest
      type: string
      description: |
        Digest of the image
  volumes:
    - name: rox-secret
      secret:
        secretName: $(params.rox-secret-name)
        optional: true
    - name: shared-folder
      emptyDir:
        medium: Memory
        sizeLimit: 50Mi
  steps:
    - name: annotate-task
      image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c
      script: |
        #!/usr/bin/env bash
        echo "acs-image-check $(context.taskRun.name)"
        oc annotate taskrun $(context.taskRun.name) task.results.format=application/json
        oc annotate taskrun $(context.taskRun.name) task.results.type=roxctl-image-check
        oc annotate taskrun $(context.taskRun.name) task.results.container=step-report
        oc annotate taskrun $(context.taskRun.name) task.output.location=logs

    - name: rox-image-check
      image: registry.access.redhat.com/ubi8-minimal@sha256:c38cc770631788157f8ea989df65ff30359c9f8af3246fef244b32caed9d5862
      volumeMounts:
        - name: rox-secret
          mountPath: /rox-secret
        - name: shared-folder
          mountPath: /steps-shared-folder
      env:
        - name: PARAM_INSECURE_SKIP_TLS_VERIFY
          value: $(params.insecure-skip-tls-verify)
        - name: PARAM_IMAGE
          value: $(params.image)
        - name: PARAM_IMAGE_DIGEST
          value: $(params.image-digest)
      onError: continue
      script: |
        #!/usr/bin/env bash
        set +x

        # Check if rox API endpoint is configured
        if test -f /rox-secret/rox-api-endpoint ; then
          export ROX_CENTRAL_ENDPOINT=$(</rox-secret/rox-api-endpoint)
        else
          echo "rox API endpoint is not set, demo will exit with success"
          echo "TODO: configure the pipeline with your ACS server domain. Set your ACS endpoint under 'rox-api-endpoint' key in the secret specified in rox-secret-name parameter. For example: 'rox.stackrox.io:443'"
          exit 0
        fi

        # Check if rox API token is configured
        if test -f /rox-secret/rox-api-token ; then
          export ROX_API_TOKEN=$(</rox-secret/rox-api-token)
        else
          echo "rox API token is not set, demo will exit with success"
          echo "TODO: configure the pipeline to have access to ROXCTL. Set you ACS token under 'rox-api-token' key in the secret specified in rox-secret-name parameter."
          exit 0
        fi

        echo "Using rox central endpoint ${ROX_CENTRAL_ENDPOINT}"

        echo "Download roxctl cli"
        if [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ]; then
          curl_insecure='--insecure'
        fi
        curl $curl_insecure -s -L -H "Authorization: Bearer $ROX_API_TOKEN" \
          "https://${ROX_CENTRAL_ENDPOINT}/api/cli/download/roxctl-linux" \
          --output ./roxctl \
          > /dev/null
        if [ $? -ne 0 ]; then
          echo 'Failed to download roxctl'
          exit 1
        fi
        received_filesize=$(stat -c%s ./roxctl)
        if (( $received_filesize < 10000 )); then
          # Response from ACS server is not a binary but error message
          cat ./roxctl
          echo 'Failed to download roxctl'
          exit 2
        fi
        chmod +x ./roxctl  > /dev/null

        echo "roxctl image check"
        IMAGE=${PARAM_IMAGE}@${PARAM_IMAGE_DIGEST}
        ./roxctl image check \
          $( [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] && \
          echo -n "--insecure-skip-tls-verify") \
          -e "${ROX_CENTRAL_ENDPOINT}" --image "$IMAGE" --output json --force \
          > roxctl_image_check_output.json

        ROXCTL_CHECK_STATUS=$?

        cp roxctl_image_check_output.json /steps-shared-folder/acs-image-check.json

        # Exit code 3 means the error occurred during roxctl image check, but setup was successful
        if [ "$ROXCTL_CHECK_STATUS" -ne 0 ]; then
          exit 3
        fi

    - name: report
      image: registry.access.redhat.com/ubi8-minimal@sha256:c38cc770631788157f8ea989df65ff30359c9f8af3246fef244b32caed9d5862
      volumeMounts:
        - name: shared-folder
          mountPath: /steps-shared-folder
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        cat /steps-shared-folder/acs-image-check.json

    - name: fail-if-check-failed
      image: quay.io/konflux-ci/appstudio-utils:48c311af02858e2422d6229600e9959e496ddef1@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8
      volumeMounts:
        - name: shared-folder
          mountPath: /steps-shared-folder
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        ROX_IMAGE_CHECK_EXIT_CODE_PATH=$(steps.step-rox-image-check.exitCode.path)
        ROX_IMAGE_CHECK_STATUS=$(cat "$ROX_IMAGE_CHECK_EXIT_CODE_PATH")

        if [ "$ROX_IMAGE_CHECK_STATUS" -eq 0 ]
        then
          echo "No errors occurred"
          exit
        fi

        # Fail on non-zero rox-image-check step exit code
        # Except if the error is due to policy violations (exit code 3 && at least one severe violation)
        if [ "$ROX_IMAGE_CHECK_STATUS" -ne 3 ]
        then
          echo "Error occurred during setup of roxctl"
          exit "$ROX_IMAGE_CHECK_STATUS"
        fi

        # Number of policy violations with Critical and High severity parsed from the report
        severe_violations=$(
          jq '.summary |
            with_entries(
              select(.key | IN("CRITICAL", "HIGH"))
            ) |
            add' \
            /steps-shared-folder/acs-image-check.json
        )

        # If roxctl image check exited with non-zero code and it is not because of policy violations, report error
        if [ "$severe_violations" -eq 0 ]
        then
          echo "Error occurred during roxctl image check, please check the logs of rox-image-check step."
          exit "$ROX_IMAGE_CHECK_STATUS"
        fi

        echo "No errors occurred"
