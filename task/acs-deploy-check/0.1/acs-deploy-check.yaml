apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: acs-deploy-check
spec:
  description: >-
    Policy check a deployment with StackRox/RHACS This tasks allows you to check
    a deployment against build-time policies and apply enforcement to fail
    builds. It's a companion to the stackrox-image-scan task, which returns full
    vulnerability scan results for an image.
  params:
    - name: rox-central-endpoint
      type: string
      default: rox.stackrox.io:443
      description: |
        The address:port tuple for StackRox Central.
        For example: rox.stackrox.io:443
    - name: rox-api-token-secret-name
      type: string
      description: |
        Secret containing the StackRox API token with CI permissions under rox-api-token key
    - name: verbose
      type: string
      default: 'true'
    - name: insecure-skip-tls-verify
      type: string
      default: 'false'
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central
        endpoint.  Defaults to `"false"`.
  results:
    - name: SCAN_OUTPUT
      description: Summary of the roxctl scan
    - name: TEST_OUTPUT
      description: Result of the `roxctl deploy check` check
  volumes:
    - name: repository
      emptyDir: {}
    - name: rox-secret
      secret:
        secretName: $(params.rox-api-token-secret-name)
        optional: true
  steps:
    - name: rox-deploy-scan
      image: registry.access.redhat.com/ubi8-minimal@sha256:d8b81a38b5ad9694742ea03159d3217cd2dde3997b1ee53bbb53c33dd67be7b7
      volumeMounts:
        - name: repository
          mountPath: /workspace/repository
        - name: rox-secret
          mountPath: /rox-secret
      workingDir: /workspace/repository
      script: |
        #!/usr/bin/env bash
        set +x

        function set_test_output_result() {
          local date=$(date +%s)
          local result=${1:-ERROR}
          local note=$2
          local successes=${3:-0}
          local failures=${4:-0}
          local warnings=${5:-0}
          echo "{\"result\":\"${result}\",\"timestamp\":\"${date}\",\"note\":\"${note}\",\"namespace\":\"default\",\"successes\":\"${successes}\",\"failures\":\"${failures}\",\"warnings\":\"${warnings}\"}" \
            | tee $(results.TEST_OUTPUT.path)
        }

        # Check if rox API enpoint is configured
        if [ "$(params.rox-central-endpoint)" = 'rox.stackrox.io:443' ]; then
          echo "rox API endpoint is not set, demo will exit with success"
          echo "TODO: configure the pipeline with your ACS server domain"
          set_test_output_result SKIPPED "Task $(context.task.name) skipped: ACS API enpoint not specified"
          exit 0
        fi

        # Check if rox API token is configured
        if test -f /rox-secret/rox-api-token ; then
          export ROX_API_TOKEN=$(</rox-secret/rox-api-token)
        else
          echo "rox API token is not set, demo will exit with success"
          echo "TODO: configure the pipeline to have access to ROXCTL"
          exit 0
        fi

        echo "Using rox central endpoint $(params.rox-central-endpoint)"

        echo "Configuration"
        echo "Directory = $(pwd)"
        ls -al

        if [ "$(params.insecure-skip-tls-verify)" = "true" ] ; then
          curl_insecure='--insecure'
        fi
        curl $curl_insecure -s -L -H "Authorization: Bearer $ROX_API_TOKEN" \
          "https://$(params.rox-central-endpoint)/api/cli/download/roxctl-linux" \
          --output ./roxctl  \
          > /dev/null
        if [ $? -ne 0 ]; then
          note='Failed to download roxctl'
          echo $note
          set_test_output_result ERROR "$note"
          exit 1
        fi
        chmod +x ./roxctl  > /dev/null

        for component in argocd/components/*; do
          echo $component
          if [ -f $component/base/deployment.yaml ]; then
            echo "ROXCTL on $component/base/deployment.yaml"
            ./roxctl deployment check \
              $( [ "$(params.insecure-skip-tls-verify)" = "true" ] && \
              echo -n "--insecure-skip-tls-verify") \
              -e "$(params.rox-central-endpoint)" --file "$component/base/deployment.yaml"
          fi
        done

        # Set TEST_OUTPUT result
        note="Task $(context.task.name) completed: Refer to Tekton task result SCAN_OUTPUT for found vulnerabilities."
        set_test_output_result SUCCESS "$note"
