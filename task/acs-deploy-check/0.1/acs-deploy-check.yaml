apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: acs-deploy-check
spec:
  description: >-
    Policy check a deployment with StackRox/RHACS This tasks allows you to check
    a deployment against build-time policies and apply enforcement to fail
    builds. It's a companion to the stackrox-image-scan task, which returns full
    vulnerability scan results for an image.
  params:
    - name: rox-secret-name
      type: string
      description: |
        Secret containing the StackRox server endpoint and API token with CI permissions under rox-api-endpoint and rox-api-token keys.
        For example: rox-api-endpoint: rox.stackrox.io:443 ; rox-api-token: eyJhbGciOiJS...
    - name: gitops-repo-url
      type: string
      description: URL of gitops repository to check.
    - name: verbose
      type: string
      default: 'true'
    - name: insecure-skip-tls-verify
      type: string
      default: 'false'
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central
        endpoint.  Defaults to `"false"`.
  results:
    - name: SCAN_OUTPUT
      description: Summary of the roxctl scan
    - name: TEST_OUTPUT
      description: Result of the `roxctl deploy check` check
  volumes:
    - name: repository
      emptyDir: {}
    - name: rox-secret
      secret:
        secretName: $(params.rox-secret-name)
        optional: true
  steps:
    - name: rox-deploy-scan
      image: quay.io/redhat-appstudio/task-toolset@sha256:931a9f7886586391ccb38d33fd15a47eb03568f9b19512b0a57a56384fa52a3c
      volumeMounts:
        - name: repository
          mountPath: /workspace/repository
        - name: rox-secret
          mountPath: /rox-secret
      workingDir: /workspace/repository
      env:
        - name: PARAM_INSECURE_SKIP_TLS_VERIFY
          value: $(params.insecure-skip-tls-verify)
      script: |
        #!/usr/bin/env bash
        set +x

        function set_test_output_result() {
          local date=$(date +%s)
          local result=${1:-ERROR}
          local note=$2
          local successes=${3:-0}
          local failures=${4:-0}
          local warnings=${5:-0}
          echo "{\"result\":\"${result}\",\"timestamp\":\"${date}\",\"note\":\"${note}\",\"namespace\":\"default\",\"successes\":\"${successes}\",\"failures\":\"${failures}\",\"warnings\":\"${warnings}\"}" \
            | tee $(results.TEST_OUTPUT.path)
        }

        # Check if rox API enpoint is configured
        if test -f /rox-secret/rox-api-endpoint ; then
          export ROX_CENTRAL_ENDPOINT=$(</rox-secret/rox-api-endpoint)
        else
          echo "rox API endpoint is not set, demo will exit with success"
          echo "TODO: configure the pipeline with your ACS server domain. Set your ACS endpoint under 'rox-api-endpoint' key in the secret specified in rox-secret-name parameter. For example: 'rox.stackrox.io:443'"
          set_test_output_result SKIPPED "Task $(context.task.name) skipped: ACS API enpoint not specified"
          exit 0
        fi

        # Check if rox API token is configured
        if test -f /rox-secret/rox-api-token ; then
          export ROX_API_TOKEN=$(</rox-secret/rox-api-token)
        else
          echo "rox API token is not set, demo will exit with success"
          echo "TODO: configure the pipeline to have access to ROXCTL. Set you ACS token under 'rox-api-token' key in the secret specified in rox-secret-name parameter."
          set_test_output_result SKIPPED "Task $(context.task.name) skipped: ACS API token not provided"
          exit 0
        fi

        echo "Using rox central endpoint ${ROX_CENTRAL_ENDPOINT}"

        # Clone gitops repository
        git clone $(params.gitops-repo-url) --single-branch --depth 1 gitops
        cd gitops

        echo "Configuration"
        echo "Directory = $(pwd)"
        ls -al

        if [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] ; then
          curl_insecure='--insecure'
        fi
        curl $curl_insecure -s -L -H "Authorization: Bearer $ROX_API_TOKEN" \
          "https://${ROX_CENTRAL_ENDPOINT}/api/cli/download/roxctl-linux" \
          --output ./roxctl  \
          > /dev/null
        if [ $? -ne 0 ]; then
          note='Failed to download roxctl'
          echo $note
          set_test_output_result ERROR "$note"
          exit 1
        fi
        chmod +x ./roxctl  > /dev/null

        critical_total=0
        high_total=0
        medium_total=0
        low_total=0
        for component in components/*; do
          echo $component
          if [ -f $component/base/deployment.yaml ]; then
            echo "ROXCTL on $component/base/deployment.yaml"
            ./roxctl deployment check \
              $( [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] && \
              echo -n "--insecure-skip-tls-verify") \
              -e "${ROX_CENTRAL_ENDPOINT}" --file "$component/base/deployment.yaml" \
              > /tmp/roxctl_deployment_check_output.txt
            cat /tmp/roxctl_deployment_check_output.txt

            summary_line_pattern="^\(TOTAL: [0-9]+, LOW: [0-9]+, MEDIUM: [0-9]+, HIGH: [0-9]+, CRITICAL: [0-9]+\)$"
            summary_line=$(grep -E "$summary_line_pattern" /tmp/roxctl_deployment_check_output.txt)
            if [[ -n "$summary_line" ]]; then
              critical=$(echo $summary_line | grep -oP '(?<=CRITICAL: )\d+')
              high=$(echo $summary_line | grep -oP '(?<=HIGH: )\d+')
              medium=$(echo $summary_line | grep -oP '(?<=MEDIUM: )\d+')
              low=$(echo $summary_line | grep -oP '(?<=LOW: )\d+')
              echo "{\"vulnerabilities\":{\"critical\":${critical},\"high\":${high},\"medium\":${medium},\"low\":${low}}}"
              ((critical_total += critical))
              ((high_total += high))
              ((medium_total += medium))
              ((low_total += low))
            else
              note="Task $(context.task.name) failed to parse scan summary for component $component"
              set_test_output_result ERROR "${note}"
              exit 2
            fi
          fi
        done

        # Set SCAN_OUTPUT result
        echo "Total:"
        echo "{\"vulnerabilities\":{\"critical\":${critical_total},\"high\":${high_total},\"medium\":${medium_total},\"low\":${low_total}}}" | tee $(results.SCAN_OUTPUT.path)

        # Set TEST_OUTPUT result
        if [[ -n "$critical_total" && "$critical_total" -eq 0 && "$high_total" -eq 0 && "$medium_total" -eq 0 && "$low_total" -eq 0 ]]; then
          note="Task $(context.task.name) completed. No vulnerabilities found."
        else
          note="Task $(context.task.name) completed: Refer to Tekton task result SCAN_OUTPUT for found vulnerabilities."
        fi
        set_test_output_result SUCCESS "$note"
