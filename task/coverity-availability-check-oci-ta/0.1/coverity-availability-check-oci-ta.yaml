---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: coverity-availability-check-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: konflux
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: This task performs needed checks in order to use Coverity image
    in the pipeline. It will check for a Coverity license secret and an authentication
    secret for pulling the image.
  params:
    - name: AUTH_TOKEN_COVERITY_IMAGE
      description: Name of secret which contains the authentication token
        for pulling the Coverity image.
      default: auth-token-coverity-image
    - name: CACHI2_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the prefetched dependencies.
      type: string
      default: ""
    - name: COV_LICENSE
      description: Name of secret which contains the Coverity license
      default: cov-license
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
  results:
    - name: STATUS
      description: Tekton task simple status to be later checked
    - name: TEST_OUTPUT
      description: Tekton task result output.
  volumes:
    - name: auth-token-coverity-image
      secret:
        optional: true
        secretName: $(params.AUTH_TOKEN_COVERITY_IMAGE)
    - name: cov-license
      secret:
        optional: true
        secretName: $(params.COV_LICENSE)
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:81c4864dae6bb11595f657be887e205262e70086a05ed16ada827fd6391926ac
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
        - $(params.CACHI2_ARTIFACT)=/var/workdir/cachi2
    - name: coverity-availability-check
      image: quay.io/redhat-appstudio/konflux-test:v1.4.7@sha256:cf6808a3bd605630a5d9f20595ff7c43f8645c00381219d32f5a11e88fe37072
      workingDir: /var/workdir/source
      volumeMounts:
        - mountPath: /etc/secrets/cov
          name: cov-license
          readOnly: true
        - mountPath: /etc/secrets/auth/config.json
          name: auth-token-coverity-image
          subPath: .dockerconfigjson
      env:
        - name: COV_LICENSE
          value: $(params.COV_LICENSE)
        - name: AUTH_TOKEN_COVERITY_IMAGE
          value: $(params.AUTH_TOKEN_COVERITY_IMAGE)
      script: |
        #!/usr/bin/env bash
        set -eo pipefail
        # shellcheck source=/dev/null
        . /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        # Checking Coverity license
        COV_LICENSE_PATH=/etc/secrets/cov/cov-license
        if [ -f "${COV_LICENSE_PATH}" ] && [ -s "${COV_LICENSE_PATH}" ]; then
          echo "Coverity license detected!"
        else
          echo 'No license file for Coverity was detected. Coverity scan will not be executed...'
          echo 'Please, create a secret called 'cov-license' with a key called 'cov-license' and the value containing the Coverity license'
          note="Task $(context.task.name) failed: No license file for Coverity was detected. Please, create a secret called 'cov-license' with a key called 'cov-license' and the value containing the Coverity license"
          TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo -n "failed" | tee "$(results.STATUS.path)"
          exit 0
        fi

        # Checking authentication token for downloading coverity image
        AUTH_TOKEN_COVERITY_IMAGE_PATH=/etc/secrets/auth/config.json
        if [ -f "${AUTH_TOKEN_COVERITY_IMAGE_PATH}" ] && [ -s "${AUTH_TOKEN_COVERITY_IMAGE_PATH}" ]; then
          echo "Authentication token detected!"
        else
          echo 'No authentication token for downloading Coverity image detected. Coverity scan will not be executed...'
          echo 'Please, create an imagePullSecret named 'auth-token-coverity-image' with the authentication token for pulling the Coverity image'
          note="Task $(context.task.name) failed: No authentication token for downloading Coverity image detected. Please, create an imagePullSecret named 'auth-token-coverity-image' with the authentication token for pulling the Coverity image"
          TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo -n "failed" | tee "$(results.STATUS.path)"
          exit 0
        fi

        note="Task $(context.task.name) completed: Coverity availability checks under /var/workdir/hacbs/$(context.task.name) finished succesfully."
        # shellcheck disable=SC2034
        TEST_OUTPUT=$(make_result_json -r SUCCESS -s 1 -t "$note")
        echo -n "success" | tee "$(results.STATUS.path)"
        echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee "$(results.TEST_OUTPUT.path)"
