apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: sast-snyk-check
spec:
  description: |-
    Scans source code for security vulnerabilities, including common issues such as SQL injection, cross-site scripting (XSS), and code injection attacks using Snyk Code, a Static Application Security Testing (SAST) tool.

    Follow the steps given [here](https://konflux-ci.dev/docs/how-tos/testing/build/snyk/) to obtain a snyk-token and to enable the snyk task in a Pipeline.

    The snyk binary used in this Task comes from a container image defined in https://github.com/konflux-ci/konflux-test

    See https://snyk.io/product/snyk-code/ and https://snyk.io/ for more information about the snyk tool.
  results:
    - description: Tekton task test output.
      name: TEST_OUTPUT
  params:
    - name: SNYK_SECRET
      description: Name of secret which contains Snyk token.
      default: snyk-secret
    - name: ARGS
      type: string
      description: Append arguments.
      default: ""
    - description: Image URL.
      name: image-url
      type: string
      # In a future 0.4 version of the task, drop the default to make this required
      default: ""
    - name: caTrustConfigMapName
      type: string
      description: The name of the ConfigMap to read CA bundle data from.
      default: trusted-ca
    - name: caTrustConfigMapKey
      type: string
      description: The name of the key in the ConfigMap that contains the CA bundle data.
      default: ca-bundle.crt
    - name: IMP_FINDINGS_ONLY
      type: string
      description: Report only important findings. Default is true. To report all findings, specify "false"
      default: "true"
    - name: KFP_GIT_URL
      type: string
      description: URL from repository to download known false positives files
      # FIXME: Red Hat internal projects will default to https://gitlab.cee.redhat.com/osh/known-false-positives.git when KONFLUX-4530 is resolved
      default: ""
    - name: PROJECT_NAME
      type: string
      description: Name of the scanned project, used to find path exclusions. By default, the Konflux component name will be used.
      default: ""
    - name: RECORD_EXCLUDED
      type: string
      description: Write excluded records in file. Useful for auditing (defaults to false).
      default: "false"
  volumes:
    - name: snyk-secret
      secret:
        secretName: $(params.SNYK_SECRET)
        optional: true
    - name: trusted-ca
      configMap:
        name: $(params.caTrustConfigMapName)
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        optional: true
  steps:
    - name: sast-snyk-check
      image: quay.io/konflux-ci/konflux-test:v1.4.8@sha256:2224fabdb0a28a415d4af4c58ae53d7c4c53c83c315f12e07d1d7f48a80bfa70
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      volumeMounts:
        - name: snyk-secret
          mountPath: "/etc/secrets"
          readOnly: true
        - name: trusted-ca
          mountPath: /mnt/trusted-ca
          readOnly: true
      env:
        - name: SNYK_SECRET
          value: $(params.SNYK_SECRET)
        - name: ARGS
          value: $(params.ARGS)
        - name: IMP_FINDINGS_ONLY
          value: $(params.IMP_FINDINGS_ONLY)
        - name: KFP_GIT_URL
          value: $(params.KFP_GIT_URL)
        - name: PROJECT_NAME
          value: $(params.PROJECT_NAME)
        - name: RECORD_EXCLUDED
          value: $(params.RECORD_EXCLUDED)
        - name: COMPONENT_LABEL
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']
      script: |
        #!/usr/bin/env bash

        set -euo pipefail
        # shellcheck source=/dev/null
        . /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        if [[ -z "${PROJECT_NAME}" ]]; then
            PROJECT_NAME=${COMPONENT_LABEL}
        fi

        echo "The PROJECT_NAME used is: ${PROJECT_NAME}"

        # Installation of Red Hat certificates for cloning Red Hat internal repositories
        ca_bundle=/mnt/trusted-ca/ca-bundle.crt
        if [ -f "$ca_bundle" ]; then
          echo "INFO: Using mounted CA bundle: $ca_bundle"
          cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
          update-ca-trust
        fi

        SNYK_TOKEN_PATH="/etc/secrets/snyk_token"
        if [ -f "${SNYK_TOKEN_PATH}" ] && [ -s "${SNYK_TOKEN_PATH}" ]; then
          # SNYK token is provided
          SNYK_TOKEN="$(cat ${SNYK_TOKEN_PATH})"
          export SNYK_TOKEN
        else
          # According to shellcheck documentation, the following error can be ignored as it is ignored through indirection: https://www.shellcheck.net/wiki/SC2034
          # shellcheck disable=SC2034
          to_enable_snyk='[here](https://konflux-ci.dev/docs/how-tos/testing/build/snyk/)'
          note="Task $(context.task.name) skipped: If you wish to use the Snyk code SAST task, please create a secret name snyk-secret with the key 'snyk_token' containing the Snyk token by following the steps given ${to_enable_snyk}"
          TEST_OUTPUT=$(make_result_json -r SKIPPED -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        SNYK_EXIT_CODE=0
        SOURCE_CODE_DIR=$(workspaces.workspace.path)
        SEVERITY_THRESHOLD="high"
        if [ "${IMP_FINDINGS_ONLY}" == "false" ]; then
          SEVERITY_THRESHOLD="low"
        fi
        set +e
        # We do want to expand ARGS (it can be multiple CLI flags, not just one)
        # shellcheck disable=SC2086
        snyk code test $ARGS --severity-threshold="$SEVERITY_THRESHOLD" "$SOURCE_CODE_DIR" --max-depth=1 --sarif-file-output="${SOURCE_CODE_DIR}"/sast_snyk_check_out.json 1>&2>> stdout.txt
        SNYK_EXIT_CODE=$?
        set -e
        test_not_skipped=0
        SKIP_MSG="We found 0 supported files"
        grep -q "$SKIP_MSG" stdout.txt || test_not_skipped=$?

        if [[ "$SNYK_EXIT_CODE" -eq 0 ]] || [[ "$SNYK_EXIT_CODE" -eq 1 ]]; then
          # In order to generate csdiff/v1, we need to add the whole path of the source code as Snyk only provides an URI to embed the context
          (cd  "${SOURCE_CODE_DIR}" && csgrep --mode=json --embed-context=3 "${SOURCE_CODE_DIR}"/sast_snyk_check_out.json) \
            | csgrep --mode=json --strip-path-prefix="source/"  \
            > sast_snyk_check_out_all_findings.json

          echo "Results:"
          (set -x && csgrep --mode=evtstat sast_snyk_check_out_all_findings.json)

          # We check if the KFP_GIT_URL variable is set to apply the filters or not
          if [[ -z "${KFP_GIT_URL}" ]]; then
            echo "KFP_GIT_URL variable not defined. False positives won't be filtered"
            mv sast_snyk_check_out_all_findings.json filtered_sast_snyk_check_out.json
          else
            echo "Filtering false positives in results files using csfilter-kfp..."

            CMD=(
              csfilter-kfp
              --verbose
              --kfp-git-url="${KFP_GIT_URL}"
              --project-nvr="${PROJECT_NAME}"
            )

            if [ "${RECORD_EXCLUDED}" == "true" ]; then
              CMD+=(--record-excluded="excluded-findings.json")
            fi

            set +e
            "${CMD[@]}" sast_snyk_check_out_all_findings.json > filtered_sast_snyk_check_out.json
            status=$?
            set -e
            if [ "$status" -ne 0 ]; then
              echo "Error: failed to filter known false positives" >&2
              return 1
            else
              echo "Message: Succeed to filter known false positives" >&2
            fi
            echo "Results after filtering:"
            (set -x && csgrep --mode=evtstat filtered_sast_snyk_check_out.json)
          fi

          # Generation of scan stats

          total_files=$(jq '[.runs[0].properties.coverage[].files] | add' "${SOURCE_CODE_DIR}"/sast_snyk_check_out.json)
          supported_files=$(jq '[.runs[0].properties.coverage[] | select(.type == "SUPPORTED") | .files] | add' "${SOURCE_CODE_DIR}"/sast_snyk_check_out.json)

          # We make sure the values are 0 if no supported/total files are found
          total_files=${total_files:-0}
          supported_files=${supported_files:-0}

          coverage_ratio=0
          if (( total_files > 0 )); then
              coverage_ratio=$((supported_files * 100 / total_files))
          fi

          # embed stats in results file and convert to SARIF
          csgrep --mode=sarif --set-scan-prop snyk-scanned-files-coverage:"${coverage_ratio}" \
                              --set-scan-prop snyk-scanned-files-success:"${supported_files}"  \
                              --set-scan-prop snyk-scanned-files-total:"${total_files}" \
                              filtered_sast_snyk_check_out.json  > sast_snyk_check_out.sarif

          TEST_OUTPUT=
          parse_test_output "$(context.task.name)" sarif sast_snyk_check_out.sarif  || true

        # When the test is skipped, the "SNYK_EXIT_CODE" is 3 and it can also be 3 in some other situation
        elif [[ "$test_not_skipped" -eq 0 ]]; then
          note="Task $(context.task.name) success: Snyk code test found zero supported files."
          ERROR_OUTPUT=$(make_result_json -r SUCCESS -t "$note")
        else
          echo "sast-snyk-check test failed because of the following issues:"
          cat stdout.txt
          note="Task $(context.task.name) failed: For details, check Tekton task log."
          ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
        fi
        echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee "$(results.TEST_OUTPUT.path)"

    - name: upload
      image: quay.io/konflux-ci/oras:latest@sha256:7a85f12b14b9122df29450dfa60c6d035b04db1a7372f7b606a0fb74ed716844
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      env:
        - name: IMAGE_URL
          value: $(params.image-url)
      script: |
        #!/usr/bin/env bash

        if [ -z "${IMAGE_URL}" ]; then
          echo 'No image-url provided. Skipping upload.'
          exit 0
        fi

        UPLOAD_FILES="sast_snyk_check_out.sarif excluded-findings.json"
        for UPLOAD_FILE in ${UPLOAD_FILES}; do
            if [ ! -f "${UPLOAD_FILE}" ]; then
              echo "No ${UPLOAD_FILE} exists. Skipping upload."
              continue
            fi
            if [ "${UPLOAD_FILES}" == "excluded-findings.json" ]; then
                MEDIA_TYPE=application/json
            else
                MEDIA_TYPE=application/sarif+json
            fi
            echo "Selecting auth"
            select-oci-auth "${IMAGE_URL}" > "${HOME}/auth.json"
            echo "Attaching to ${IMAGE_URL}"
            oras attach --no-tty --registry-config "$HOME/auth.json" --artifact-type "${MEDIA_TYPE}" "${IMAGE_URL}" "${UPLOAD_FILE}:${MEDIA_TYPE}"
        done

  workspaces:
    - name: workspace
