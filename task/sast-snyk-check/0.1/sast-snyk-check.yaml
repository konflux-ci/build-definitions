apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: sast-snyk-check
spec:
  description: >-
    Scans source code for security vulnerabilities, including common issues such as SQL injection, cross-site scripting (XSS), and code injection attacks using Snyk Code, a Static Application Security Testing (SAST) tool.
  results:
    - description: Tekton task test output.
      name: TEST_OUTPUT
  params:
    - name: SNYK_SECRET
      description: Name of secret which contains Snyk token.
      default: snyk-secret
    - name: ARGS
      type: string
      description: Append arguments.
      default: "--all-projects --exclude=test*,vendor,deps"
    - description: Image URL.
      name: image-url
      type: string
      # In a future 0.2 version of the task, drop the default to make this required
      default: ""
    - description: Image digest to report findings for.
      name: image-digest
      type: string
      # In a future 0.2 version of the task, drop the default to make this required
      default: ""
  volumes:
    - name: snyk-secret
      secret:
        secretName: $(params.SNYK_SECRET)
        optional: true
  steps:
    - name: sast-snyk-check
      image: quay.io/konflux-ci/konflux-test:v1.4.8@sha256:2224fabdb0a28a415d4af4c58ae53d7c4c53c83c315f12e07d1d7f48a80bfa70
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      volumeMounts:
        - name: snyk-secret
          mountPath: "/etc/secrets"
          readOnly: true
      env:
        - name: SNYK_SECRET
          value: $(params.SNYK_SECRET)
        - name: ARGS
          value: $(params.ARGS)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        . /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        SNYK_TOKEN_PATH="/etc/secrets/snyk_token"

        if [ -f "${SNYK_TOKEN_PATH}" ] && [ -s "${SNYK_TOKEN_PATH}" ]; then
          # SNYK token is provided
          SNYK_TOKEN="$(cat ${SNYK_TOKEN_PATH})"
          export SNYK_TOKEN
        else
          to_enable_snyk='[here](https://konflux-ci.dev/docs/how-tos/testing/build/snyk/)'
          note="Task $(context.task.name) skipped: If you wish to use the Snyk code SAST task, please create a secret name snyk-secret with the key "snyk_token" containing the Snyk token by following the steps given ${to_enable_snyk}"
          TEST_OUTPUT=$(make_result_json -r SKIPPED -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        SNYK_EXIT_CODE=0
        SOURCE_CODE_DIR=$(workspaces.workspace.path)/source
        snyk code test $ARGS $SOURCE_CODE_DIR --sarif-file-output=sast_snyk_check_out.json 1>&2>> stdout.txt || SNYK_EXIT_CODE=$?
        test_not_skipped=0
        SKIP_MSG="We found 0 supported files"
        grep -q "$SKIP_MSG" stdout.txt || test_not_skipped=$?

        if [[ "$SNYK_EXIT_CODE" -eq 0 ]] || [[ "$SNYK_EXIT_CODE" -eq 1 ]]; then
          cat sast_snyk_check_out.json
          TEST_OUTPUT=
          parse_test_output $(context.task.name) sarif sast_snyk_check_out.json  || true

        # When the test is skipped, the "SNYK_EXIT_CODE" is 3 and it can also be 3 in some other situation
        elif [[ "$test_not_skipped" -eq 0 ]]; then
          note="Task $(context.task.name) success: Snyk code test found zero supported files."
          ERROR_OUTPUT=$(make_result_json -r SUCCESS -t "$note")
        else
          echo "sast-snyk-check test failed because of the following issues:"
          cat stdout.txt
          note="Task $(context.task.name) failed: For details, check Tekton task log."
          ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
        fi
        echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee $(results.TEST_OUTPUT.path)
    - name: upload
      image: quay.io/konflux-ci/oras:latest@sha256:7a85f12b14b9122df29450dfa60c6d035b04db1a7372f7b606a0fb74ed716844
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      env:
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
      script: |
        #!/usr/bin/env bash

        UPLOAD_FILE=sast_snyk_check_out.json
        MEDIA_TYPE=application/sarif+json

        if [ -z "${IMAGE_URL}" ] || [ -z "${IMAGE_DIGEST}"  ]; then
          echo 'No image-url or image-digest param provided. Skipping upload.'
          exit 0;
        fi

        if [ ! -f "${UPLOAD_FILE}" ]; then
          echo "No ${UPLOAD_FILE} exists. Skipping upload."
          exit 0;
        fi

        echo "Selecting auth"
        select-oci-auth $IMAGE_URL > $HOME/auth.json
        echo "Attaching to ${IMAGE_URL} via the OCI 1.1 Referrers API"
        oras attach --no-tty --registry-config "$HOME/auth.json" --distribution-spec v1.1-referrers-api --artifact-type "${MEDIA_TYPE}" "${IMAGE_URL}" "${UPLOAD_FILE}:${MEDIA_TYPE}"
        echo "Attaching to ${IMAGE_URL} via the OCI 1.1 Referrers Tag"
        oras attach --no-tty --registry-config "$HOME/auth.json" --distribution-spec v1.1-referrers-tag --artifact-type "${MEDIA_TYPE}" "${IMAGE_URL}" "${UPLOAD_FILE}:${MEDIA_TYPE}"
  workspaces:
  - name: workspace
