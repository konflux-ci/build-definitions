apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: sast-snyk-check
spec:
  description: >-
    Scans source code for security vulnerabilities, including common issues such as SQL injection, cross-site scripting (XSS), and code injection attacks using Snyk Code, a Static Application Security Testing (SAST) tool.
  results:
    - description: Tekton task test output.
      name: TEST_OUTPUT
  params:
    - name: SNYK_SECRET
      description: Name of secret which contains Snyk token.
      default: snyk-secret
    - name: ARGS
      type: string
      description: Append arguments.
      default: "--all-projects --exclude=test*,vendor,deps"
  volumes:
    - name: snyk-secret
      secret:
        secretName: $(params.SNYK_SECRET)
        optional: true
  steps:
    - name: sast-snyk-check
      image: quay.io/redhat-appstudio/hacbs-test:v1.1.9@sha256:866675ee3064cf4768691ecca478063ce12f0556fb9d4f24ca95c98664ffbd43
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      volumeMounts:
        - name: snyk-secret
          mountPath: "/etc/secrets"
          readOnly: true
      env:
        - name: SNYK_SECRET
          value: $(params.SNYK_SECRET)
        - name: ARGS
          value: $(params.ARGS)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        . /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        SNYK_TOKEN_PATH="/etc/secrets/snyk_token"

        if [ -f "${SNYK_TOKEN_PATH}" ] && [ -s "${SNYK_TOKEN_PATH}" ]; then
          # SNYK token is provided
          SNYK_TOKEN="$(cat ${SNYK_TOKEN_PATH})"
          export SNYK_TOKEN
        else
          note="Task $(context.task.name) skipped: If you wish to use the Snyk code SAST task, please create a secret named snyk-secret with the key "snyk_token" containing the Snyk token."
          TEST_OUTPUT=$(make_result_json -r SKIPPED -t "$note")
          echo "${TEST_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        SNYK_EXIT_CODE=0
        SOURCE_CODE_DIR=$(workspaces.workspace.path)/source
        snyk code test $ARGS $SOURCE_CODE_DIR --sarif-file-output=sast_snyk_check_out.json 1>&2>> stdout.txt || SNYK_EXIT_CODE=$?
        test_not_skipped=0
        SKIP_MSG="We found 0 supported files"
        grep -q "$SKIP_MSG" stdout.txt || test_not_skipped=$?

        if [[ "$SNYK_EXIT_CODE" -eq 0 ]] || [[ "$SNYK_EXIT_CODE" -eq 1 ]]; then
          cat sast_snyk_check_out.json
          TEST_OUTPUT=
          parse_test_output $(context.task.name) sarif sast_snyk_check_out.json  || true

        # When the test is skipped, the "SNYK_EXIT_CODE" is 3 and it can also be 3 in some other situation
        elif [[ "$test_not_skipped" -eq 0 ]]; then
          note="Task $(context.task.name) success: Snyk code test found zero supported files."
          ERROR_OUTPUT=$(make_result_json -r SUCCESS -t "$note")
        else
          echo "sast-snyk-check test failed because of the following issues:"
          cat stdout.txt
          note="Task $(context.task.name) failed: For details, check Tekton task log."
          ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
        fi
        echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee $(results.TEST_OUTPUT.path)
  workspaces:
    - name: workspace
