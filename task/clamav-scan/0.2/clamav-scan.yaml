apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "virus, konflux"
  name: clamav-scan
spec:
  description: >-
    Scans the content of container images for viruses, malware, and other malicious content using ClamAV antivirus scanner.
  results:
    - name: TEST_OUTPUT
      description: Tekton task test output.
    - name: IMAGES_PROCESSED
      description: Images processed in the task.
  params:
    - name: image-digest
      description: Image digest to scan.
    - name: image-url
      description: Image URL.
    - name: docker-auth
      description: unused
      default: ""
    - name: ca-trust-config-map-name
      type: string
      description: The name of the ConfigMap to read CA bundle data from.
      default: trusted-ca
    - name: ca-trust-config-map-key
      type: string
      description: The name of the key in the ConfigMap that contains the CA bundle data.
      default: ca-bundle.crt
    - name: scan-threads
      type: string
      description: Number of threads to run in clamscan parallel. Should be <= 8.
      default: "1"

  steps:
    - name: extract-and-scan-image
      # This image receives daily builds, ensuring we always have access to the latest virus definitions
      image: quay.io/konflux-ci/clamav-db:latest
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: /work
      # need to change user since 'oc image extract' requires more privileges when running as root permissions
      # https://bugzilla.redhat.com/show_bug.cgi?id=1969929
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      env:
        - name: HOME
          value: /work
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
        - name: SCAN_THREADS
          value: $(params.scan-threads)
        - name: MAX_SCAN_THREADS
          value: "8"
      computeResources:
        limits:
          memory: 16Gi
        requests:
          memory: 2Gi
          cpu: 1
      script: |
        #!/usr/bin/env bash

        echo "SCAN_THREADS: $SCAN_THREADS"

        threads="${SCAN_THREADS:-1}"

        # validate SCAN_THREADS is numeric
        if ! [[ "$threads" =~ ^[0-9]+$ ]]; then
          echo "[WARN] SCAN_THREADS not a positive integer. Setting threads to 1."
          threads=1
        fi

        # warning if SCAN_THREADS is greater than visible CPUs
        if [ "$threads" -gt "$(nproc)" ]; then
          echo "[WARN] SCAN_THREADS ($threads) exceeds visible CPUs ($(nproc)) — performance may degrade."
        fi

        # Cap threads to MAX_THREADS
        if [ "$threads" -gt "$MAX_SCAN_THREADS" ]; then
          echo "SCAN_THREADS ($threads) exceeds MAX_SCAN_THREADS ($MAX_SCAN_THREADS) — capping threads to: $MAX_SCAN_THREADS"
          threads="$MAX_SCAN_THREADS"
        fi

        set -euo pipefail
        . /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        imagewithouttag=$(echo $IMAGE_URL | sed "s/\(.*\):.*/\1/" | tr -d '\n')

        # strip new-line escape symbol from parameter and save it to variable
        imageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)

        # check if image is attestation one, skip the clamav scan in such case
        if [[ $imageanddigest == *.att ]]
        then
            echo "$imageanddigest is an attestation image. Skipping ClamAV scan."
            exit 0
        fi

        images_processed_template='{"image": {"pullspec": "'"$IMAGE_URL"'", "digests": [%s]}}'
        digests_processed=()
        mkdir logs
        mkdir content
        cd content
        echo "Extracting image(s)."

        # Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes
        image_manifests=$(get_image_manifests -i "${imageanddigest}")
        if [ -n "$image_manifests" ]; then
          while read -r arch arch_sha; do
            destination=$(echo content-$arch)
            mkdir -p "$destination"
            arch_imageanddigest=$(echo $imagewithouttag@$arch_sha)

            echo "Running \"oc image extract\" on image of arch $arch"
            retry oc image extract --registry-config ~/.docker/config.json "$arch_imageanddigest" --path="/:${destination}" --filter-by-os="linux/${arch}"
            if [ $? -ne 0 ]; then
              echo "Unable to extract image for arch $arch. Skipping ClamAV scan!"
              exit 0
            fi

            db_version=$(clamscan --version | sed 's|.*/\(.*\)/.*|\1|')

            if [[ "$threads" -eq 1 ]]; then
              # single-threaded so use the original task code
              # no change, from the original except we hardcode a "-1-" to the logfile
              # so the results processing later treats this as a single bucket log
              echo "Single-threaded mode detected."
              echo "Scanning image for arch $arch. This operation may take a while."
              clamscan "${destination}" -ri --max-scansize=4095M --max-filesize=2000M \
                --max-scantime=0 --max-files=0 --max-recursion=1000 --max-dir-recursion=20000 --max-embeddedpe=4095M \
                --max-htmlnormalize=10M --max-htmlnotags=4095M --max-scriptnormalize=5M --max-ziptypercg=4095M \
                --max-partitions=50000 --max-iconspe=100000 --max-rechwp3=20000 --pcre-match-limit=100000000 --pcre-recmatch-limit=2000000 \
                --pcre-max-filesize=4095M --alert-exceeds-max=yes \
                --alert-encrypted=yes --alert-encrypted-archive=yes --alert-encrypted-doc=yes --alert-macros=yes \
                --alert-phishing-ssl=yes --alert-phishing-cloak=yes --alert-partition-intersection=yes \
                | tee "/work/logs/clamscan-result-1-$arch.log" || true
            else
              echo "Multi-threaded mode detected ($threads threads)."

              # Step 1: Generate complete manifest of all file paths in the destination and their sizes
              # the paths names are sanitized to handle the following valid filenames:
              #   1. spaces
              #   2. newlines
              #   3. special characters
              echo "Generating sanitized file list..."
              find "$destination" -type f -print0 | while IFS= read -r -d '' file; do
                  # get the file size with stat this is used for sorting
                  size=$(stat -c "%s" "$file")

                  # tsv format: <size>\t<path>
                  printf "%s\t%s\n" "$size" "$file"
              done >"$HOME/files_manifest.tsv"

              # Step 2: Sort the list by size descending
              echo "Sorting files by size (descending)..."
              sort -nr "$HOME/files_manifest.tsv" >"$HOME/files_manifest_sorted.tsv"

              # Step 3: create empty bucket files based on scan-threads
              for i in $(seq 0 $((threads - 1))); do
                  : >"$HOME/file_bucket_$i.txt" # Clear or create empty files
              done

              # Step 3: Distribute files to buckets (round-robin), this should produce equally weighted buckets
              echo "Distributing files into $threads buckets..."
              i=0
              while IFS=$'\t' read -r size path; do
                  bucket=$((i % threads))
                  echo "$path" >>"$HOME/file_bucket_$bucket.txt"
                  ((i = i + 1))
              done <"$HOME/files_manifest_sorted.tsv"

              # Step 5: Launch clamscan processes in parallel giving each process a file bucket to work on
              echo "Launching clamscan processes..."
              for i in $(seq 0 $((threads - 1))); do
                  LOGFILE="$HOME/logs/clamscan-result-$i-$arch.log"
                  BUCKET_FILE="$HOME/file_bucket_$i.txt"

                  echo "Starting clamscan on bucket $i..."

                  clamscan -f "$BUCKET_FILE" -i --max-scansize=4095M --max-filesize=2000M \
                      --max-scantime=0 --max-files=0 --max-embeddedpe=4095M \
                      --max-htmlnormalize=10M --max-htmlnotags=4095M --max-scriptnormalize=5M --max-ziptypercg=4095M \
                      --max-partitions=50000 --max-iconspe=100000 --max-rechwp3=20000 --pcre-match-limit=100000000 --pcre-recmatch-limit=2000000 \
                      --pcre-max-filesize=4095M --alert-exceeds-max=yes \
                      --alert-encrypted=yes --alert-encrypted-archive=yes --alert-encrypted-doc=yes --alert-macros=yes \
                      --alert-phishing-ssl=yes --alert-phishing-cloak=yes --alert-partition-intersection=yes \
                      | tee "$LOGFILE" || true &
              done

              echo "Waiting for all clamscan processes to finish..."
              wait
              echo "All scans completed. Logs are in: $HOME"
            fi

            digests_processed+=("\"$arch_sha\"")

            for logfile in /work/logs/clamscan-result-*-"$arch".log; do
              [ -e "$logfile" ] || continue  # skip if no matching files

              echo "Executed-on: Scan was executed on clamscan version - $(clamscan --version) Database version: $db_version" | tee -a "$logfile"

              echo "Running EC on: $logfile"
              bucket_id=$(basename "$logfile" | sed -E 's/clamscan-result-([0-9]+)-.*\.log/\1/')
              json_input="/work/logs/clamscan-result-$bucket_id-$arch.json"
              json_output="/work/logs/clamscan-ec-test-$bucket_id-$arch.json"

              # Convert log to JSON format for EC
              jq -Rs '{ output: . }' "$logfile" > "$json_input"

              # Run EC (json)
              EC_EXPERIMENTAL=1 ec test \
                --namespace required_checks \
                --policy /project/clamav/virus-check.rego \
                -o json \
                "$json_input" || true

              # workaround: due to a bug in ec-cli, we cannot generate json and appstudio output at the same time, running it again
              EC_EXPERIMENTAL=1 ec test \
                --namespace required_checks \
                --policy /project/clamav/virus-check.rego \
                -o appstudio \
                "$json_input" | tee "$json_output" || true

              cat "$json_output"
            done
          done < <(echo "$image_manifests" | jq -r 'to_entries[] | "\(.key) \(.value)"')
        else
          echo "Failed to get image manifests from image \"$imageanddigest\""
          note="Task $(context.task.name) failed: Failed to get image manifests from image \"$imageanddigest\". For details, check Tekton task log."
          ERROR_OUTPUT=$(make_result_json -r "ERROR" -t "$note")
          echo "${ERROR_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        jq -s -rce '
          reduce .[] as $item ({"timestamp":"0","namespace":"","successes":0,"failures":0,"warnings":0,"result":"","note":""};
            {
            "timestamp" : (if .timestamp < $item.timestamp then $item.timestamp else .timestamp end),
            "namespace" : $item.namespace,
            "successes" : (.successes + $item.successes),
            "failures" : (.failures + $item.failures),
            "warnings" : (.warnings + $item.warnings),
            "result" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.result else .result end),
            "note" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.note else .note end)
            })' /work/logs/clamscan-ec-test-*.json | tee $(results.TEST_OUTPUT.path)

        # If the image is an Image Index, also add the Image Index digest to the list.
        if [[ "${digests_processed[*]}" != *"$IMAGE_DIGEST"* ]]; then
          digests_processed+=("\"$IMAGE_DIGEST\"")
        fi

        digests_processed_string=$(IFS=,; echo "${digests_processed[*]}")
        echo "${images_processed_template/\[%s]/[$digests_processed_string]}" | tee $(results.IMAGES_PROCESSED.path)
      volumeMounts:
        - mountPath: /work
          name: work
        - name: trusted-ca
          mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          subPath: ca-bundle.crt
          readOnly: true
    - name: upload
      image: quay.io/konflux-ci/oras:latest@sha256:8d756a91aae1fa5186efafee056446bb5e77228cf5ad9a7ae0e3f8d727da50cd
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 256Mi
          cpu: 100m
      env:
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
      workingDir: /work
      script: |
        #!/usr/bin/env bash
        set -e

        # Don't return a glob expression when no matches are found
        shopt -s nullglob

        cd logs

        for UPLOAD_FILE in clamscan-result*.log; do
          MEDIA_TYPE=text/vnd.clamav
          args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
        done
        for UPLOAD_FILE in clamscan-ec-test*.json; do
          MEDIA_TYPE=application/vnd.konflux.test_output+json
          args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
        done

        if [ -z "${args}" ]; then
          echo "No files found. Skipping upload."
          exit 0;
        fi

        echo "Selecting auth"
        select-oci-auth $IMAGE_URL > $HOME/auth.json
        echo "Attaching to ${IMAGE_URL}"
         oras attach --no-tty --registry-config "$HOME/auth.json" --artifact-type application/vnd.clamav "${IMAGE_URL}@${IMAGE_DIGEST}" "${args[@]}"
      volumeMounts:
        - mountPath: /work
          name: work
        - name: trusted-ca
          mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          subPath: ca-bundle.crt
          readOnly: true
  volumes:
    - name: dbfolder
      emptyDir: {}
    - name: work
      emptyDir: {}
    - name: trusted-ca
      configMap:
        name: $(params.ca-trust-config-map-name)
        items:
          - key: $(params.ca-trust-config-map-key)
            path: ca-bundle.crt
        optional: true
