apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "virus, konflux"
  name: clamav-scan
spec:
  description: >-
    Scans the content of container images for viruses, malware, and other malicious content using ClamAV antivirus scanner.
  results:
    - name: TEST_OUTPUT
      description: Tekton task test output.
    - name: IMAGES_PROCESSED
      description: Images processed in the task.
  params:
    - name: image-digest
      description: Image digest to scan.
    - name: image-url
      description: Image URL.
    - name: image-arch
      description: Image arch.
      default: ""
    - name: docker-auth
      description: unused
      default: ""
    - name: ca-trust-config-map-name
      type: string
      description: The name of the ConfigMap to read CA bundle data from.
      default: trusted-ca
    - name: ca-trust-config-map-key
      type: string
      description: The name of the key in the ConfigMap that contains the CA bundle data.
      default: ca-bundle.crt
    - name: clamd-max-threads
      description: Maximum number of threads clamd runs.
      default: "8"

  steps:
    - name: extract-and-scan-image
      # This image receives daily builds, ensuring we always have access to the latest virus definitions
      image: quay.io/konflux-ci/clamav-db:latest
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      workingDir: /work
      # need to change user since 'oc image extract' requires more privileges when running as root permissions
      # https://bugzilla.redhat.com/show_bug.cgi?id=1969929
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      env:
        - name: HOME
          value: /work
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
        - name: IMAGE_ARCH
          value: $(params.image-arch)
        - name: MAX_THREADS
          value: $(params.clamd-max-threads)
      computeResources:
        limits:
          memory: 8Gi
        requests:
          memory: 2Gi
          cpu: 500m
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        . /utils.sh
        trap 'handle_error $(results.TEST_OUTPUT.path)' EXIT

        # Start clamd in background
        /start-clamd.sh

        imagewithouttag=$(echo $IMAGE_URL | sed "s/\(.*\):.*/\1/" | tr -d '\n')

        # strip new-line escape symbol from parameter and save it to variable
        imageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)

        # check if image is attestation one, skip the clamav scan in such case
        if [[ $imageanddigest == *.att ]]
        then
            echo "$imageanddigest is an attestation image. Skipping ClamAV scan."
            exit 0
        fi

        images_processed_template='{"image": {"pullspec": "'"$IMAGE_URL"'", "digests": [%s]}}'
        digests_processed=()
        mkdir logs
        mkdir content
        cd content
        echo "Extracting image(s)."

        # Get the arch and image manifests by inspecting the image. This is mainly for identifying image indexes
        image_manifests=$(get_image_manifests -i "${imageanddigest}")
        # Proceed only if a specific arch is provided.
        # This typically occurs when using Tekton Matrix to launch multiple TaskRuns to scan all architectures of a multi-arch image in parallel.
        if [ -n "$IMAGE_ARCH" ]; then
          arch="${IMAGE_ARCH#*/}"
          if [ "${arch}" = "x86_64" ]; then
            arch="amd64"
          fi

          # Check if arch is supported; if not (e.g., it's 'local', see link below), default to amd64.
          # https://github.com/redhat-appstudio/infra-deployments/blob/main/components/multi-platform-controller/production/stone-prd-rh01/host-config.yaml#L9-L14
          case "$arch" in
            amd64|ppc64le|arm64|s390x)
              ;;
            *)
              arch="amd64"
              ;;
          esac

          image_manifests=$(echo "$image_manifests" | jq -c --arg arch "$arch" '{($arch): .[$arch]}')
        fi

        if [ -n "$image_manifests" ]; then
          while read -r arch arch_sha; do
            destination=$(echo content-$arch)
            mkdir -p "$destination"
            arch_imageanddigest=$(echo $imagewithouttag@$arch_sha)

            echo "Running \"oc image extract\" on image of arch $arch"
            retry oc image extract --only-files=true --registry-config ~/.docker/config.json "$arch_imageanddigest" --path="/:${destination}" --filter-by-os="linux/${arch}"
            if [ $? -ne 0 ]; then
              echo "Unable to extract image for arch $arch. Skipping ClamAV scan!"
              exit 0
            fi

            db_version=$(clamdscan --version | sed 's|.*/\(.*\)/.*|\1|')

            echo "Scanning image for arch $arch. This operation may take a while."
            clamdscan "${destination}" -vi --multiscan --fdpass \
              | tee /work/logs/clamscan-result-$arch.log || true

            echo "Executed-on: Scan was executed on clamsdcan version - $(clamdscan --version) Database version: $db_version" | tee -a "/work/logs/clamscan-result-$arch.log"

            digests_processed+=("\"$arch_sha\"")

            if [[ -e "/work/logs/clamscan-result-$arch.log" ]]; then
              # file_suffix=$(basename "$file" | sed 's/clamscan-result-//;s/.log//')
              # OPA/EC requires structured data input, add clamAV log into json
              jq -Rs '{ output: . }' /work/logs/clamscan-result-$arch.log > /work/logs/clamscan-result-log-$arch.json

              EC_EXPERIMENTAL=1 ec test \
                --namespace required_checks \
                --policy /project/clamav/virus-check.rego \
                -o json \
                /work/logs/clamscan-result-log-$arch.json || true

              # workaround: due to a bug in ec-cli, we cannot generate json and appstudio output at the same time, running it again
              EC_EXPERIMENTAL=1 ec test \
                --namespace required_checks \
                --policy /project/clamav/virus-check.rego \
                -o appstudio \
                /work/logs/clamscan-result-log-$arch.json | tee /work/logs/clamscan-ec-test-$arch.json || true

              cat /work/logs/clamscan-ec-test-$arch.json
            fi
          done < <(echo "$image_manifests" | jq -r 'to_entries[] | "\(.key) \(.value)"')
        else
          echo "Failed to get image manifests from image \"$imageanddigest\""
          note="Task $(context.task.name) failed: Failed to get image manifests from image \"$imageanddigest\". For details, check Tekton task log."
          ERROR_OUTPUT=$(make_result_json -r "ERROR" -t "$note")
          echo "${ERROR_OUTPUT}" | tee "$(results.TEST_OUTPUT.path)"
          exit 0
        fi

        jq -s -rce '
          reduce .[] as $item ({"timestamp":"0","namespace":"","successes":0,"failures":0,"warnings":0,"result":"","note":""};
            {
            "timestamp" : (if .timestamp < $item.timestamp then $item.timestamp else .timestamp end),
            "namespace" : $item.namespace,
            "successes" : (.successes + $item.successes),
            "failures" : (.failures + $item.failures),
            "warnings" : (.warnings + $item.warnings),
            "result" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.result else .result end),
            "note" : (if .result == "" or ($item.result == "SKIPPED" and .result == "SUCCESS") or ($item.result == "WARNING" and (.result == "SUCCESS" or .result == "SKIPPED")) or ($item.result == "FAILURE" and .result != "ERROR") or $item.result == "ERROR" then $item.note else .note end)
            })' /work/logs/clamscan-ec-test-*.json | tee $(results.TEST_OUTPUT.path)

        # If the image is an Image Index, also add the Image Index digest to the list.
        if [[ "${digests_processed[*]}" != *"$IMAGE_DIGEST"* ]]; then
          digests_processed+=("\"$IMAGE_DIGEST\"")
        fi

        digests_processed_string=$(IFS=,; echo "${digests_processed[*]}")
        echo "${images_processed_template/\[%s]/[$digests_processed_string]}" | tee $(results.IMAGES_PROCESSED.path)
      volumeMounts:
        - mountPath: /work
          name: work
        - name: trusted-ca
          mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          subPath: ca-bundle.crt
          readOnly: true
    - name: upload
      image: quay.io/konflux-ci/oras:latest@sha256:8d756a91aae1fa5186efafee056446bb5e77228cf5ad9a7ae0e3f8d727da50cd
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 256Mi
          cpu: 100m
      env:
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
      workingDir: /work
      script: |
        #!/usr/bin/env bash
        set -e

        # Don't return a glob expression when no matches are found
        shopt -s nullglob

        cd logs

        for UPLOAD_FILE in clamscan-result*.log; do
          MEDIA_TYPE=text/vnd.clamav
          args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
        done
        for UPLOAD_FILE in clamscan-ec-test*.json; do
          MEDIA_TYPE=application/vnd.konflux.test_output+json
          args+=("${UPLOAD_FILE}:${MEDIA_TYPE}")
        done

        if [ -z "${args}" ]; then
          echo "No files found. Skipping upload."
          exit 0;
        fi

        echo "Selecting auth"
        select-oci-auth $IMAGE_URL > $HOME/auth.json
        echo "Attaching to ${IMAGE_URL}"
         retry oras attach --no-tty --registry-config "$HOME/auth.json" --artifact-type application/vnd.clamav "${IMAGE_URL}@${IMAGE_DIGEST}" "${args[@]}"
      volumeMounts:
        - mountPath: /work
          name: work
        - name: trusted-ca
          mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          subPath: ca-bundle.crt
          readOnly: true
  volumes:
    - name: dbfolder
      emptyDir: {}
    - name: work
      emptyDir: {}
    - name: trusted-ca
      configMap:
        name: $(params.ca-trust-config-map-name)
        items:
          - key: $(params.ca-trust-config-map-key)
            path: ca-bundle.crt
        optional: true
