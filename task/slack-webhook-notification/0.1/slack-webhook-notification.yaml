apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: slack-webhook-notification
spec:
  description: >-
    Sends message to slack using incoming webhook
  params:
    - name: message
      description: Message to be sent
    - name: secret-name
      description: |
        Secret with at least one key where value is webhook URL for slack.
        eg. oc create secret generic my-secret --from-literal team1=https://hooks.slack.com/services/XXX/XXXXXX --from-literal team2=https://hooks.slack.com/services/YYY/YYYYYY
      default: slack-webhook-notification-secret
    - name: key-name
      description: Key in the key in secret which contains webhook URL for slack.
  volumes:
    - name: webhook-secret
      secret:
        secretName: $(params.secret-name)
        optional: true
  steps:
    - name: send-message
      image: registry.access.redhat.com/ubi9/ubi-minimal:9.3-1361.1699548032@sha256:3e313209ac617a92b50350286752311d99ea2dafc429ef0e5311889294b0bc21
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
      volumeMounts:
        - name: webhook-secret
          mountPath: "/etc/secrets"
          readOnly: true
      env:
        - name: HOME
          value: /tekton/home
        - name: KEY_NAME
          value: $(params.key-name)
        - name: MESSAGE
          value: $(params.message)
      script: |
        #!/usr/bin/env bash
        if [ -f "/etc/secrets/$KEY_NAME" ]; then
          WEBHOOK_URL=$(cat "/etc/secrets/$KEY_NAME")
        else
          echo "Secret not defined properly"
          exit 1
        fi
        curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$MESSAGE\"}" $WEBHOOK_URL
