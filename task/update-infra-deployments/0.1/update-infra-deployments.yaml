apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: update-infra-deployments
spec:
  description: |
    Clones redhat-appstudio/infra-deployments repository, runs script in 'SCRIPT' parameter, generates pull-request for redhat-appstudio/infra-deployments repository.
  params:
    - name: SCRIPT
      description: Bash script for changing the infra-deployments
    - name: ORIGIN_REPO
      description: URL of github repository which was built by the Pipeline
    - name: REVISION
      description: Git reference which was built by the Pipeline
    - name: TARGET_GH_REPO
      description: GitHub repository of the infra-deployments code
      default: redhat-appstudio/infra-deployments
    - name: GIT_IMAGE
      description: Deprecated. Has no effect. Will be removed in the future.
      default: ""
    - name: SCRIPT_IMAGE
      description: Deprecated. Has no effect. Will be removed in the future.
      default: ""
    - name: shared-secret
      default: infra-deployments-pr-creator
      description: secret in the namespace which contains private key for the GitHub App
    - name: GITHUB_APP_ID
      description: ID of Github app used for updating PR
      default: "305606"
    - name: GITHUB_APP_INSTALLATION_ID
      description: Installation ID of Github app in the organization
      default: "35269675"
  volumes:
    - name: infra-deployments-pr-creator
      secret:
        # 'private-key' - private key for Github app
        secretName: $(params.shared-secret)
    - name: shared-dir
      emptyDir: {}

  steps:
    - name: git-clone-infra-deployments
      image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8:v1.8.2-8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8
      volumeMounts:
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      env:
        - name: TARGET_GH_REPO
          value: "$(params.TARGET_GH_REPO)"
        - name: ORIGIN_REPO
          value: $(params.ORIGIN_REPO)
        - name: GIT_IMAGE
          value: $(params.GIT_IMAGE)
      script: |
        if [ -n "${GIT_IMAGE}" ]; then
          echo "WARNING: provided deprecated GIT_IMAGE parameter has no effect."
        fi

        REPO_NAME=$(echo $ORIGIN_REPO | cut -f5 -d/)

        git clone "https://github.com/${TARGET_GH_REPO}.git" cloned
    - name: run-update-script
      image: quay.io/redhat-appstudio/update-infra-deployments-task-script-image@sha256:2748f1a4f1af4e35214745aed4e56a9d06f6bdbd30572e7ade13729e67f23cc9
      volumeMounts:
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      env:
        - name: SCRIPT
          value: $(params.SCRIPT)
        - name: SCRIPT_IMAGE
          value: $(params.SCRIPT_IMAGE)
      script: |
        if [ -n "${SCRIPT_IMAGE}" ]; then
          echo "WARNING: provided deprecated SCRIPT_IMAGE parameter has no effect."
        fi

        cd cloned
        echo "$SCRIPT" | sh
    - name: get-diff-files
      image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8:v1.8.2-8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8
      volumeMounts:
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      env:
        - name: GIT_IMAGE
          value: $(params.GIT_IMAGE)
      script: |
        if [ -n "${GIT_IMAGE}" ]; then
          echo "WARNING: provided deprecated GIT_IMAGE parameter has no effect."
        fi

        cd cloned
        git status -s --porcelain | cut -c4- > ../updated_files.txt
        # Check if ../updated_files.txt is empty or not
        if [ -s ../updated_files.txt ]; then
          echo -e "Script has modified files:\n$(cat ../updated_files.txt)"
        else
          echo "No modified files after running the script, exiting..."
          exit 1
        fi

      # Based on https://github.com/tektoncd/catalog/tree/main/task/github-app-token/0.2/
    - name: create-mr
      image: registry.access.redhat.com/ubi9/python-39:9.5-1733173511@sha256:eb65add9b84a3d3ac104b7bc091f49faffe9e69aef8bafb0654547b1708c4841
      # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
      # the cluster will set imagePullPolicy to IfNotPresent
      volumeMounts:
        - name: infra-deployments-pr-creator
          mountPath: /secrets/deploy-key
        - name: shared-dir
          mountPath: /shared
      workingDir: /shared
      env:
        - name: GITHUBAPP_KEY_PATH
          value: /secrets/deploy-key/private-key
        - name: GITHUBAPP_APP_ID
          value: "$(params.GITHUB_APP_ID)"
        - name: GITHUBAPP_INSTALLATION_ID
          value: "$(params.GITHUB_APP_INSTALLATION_ID)"
        - name: GITHUB_API_URL
          value: https://api.github.com
        - name: ORIGIN_REPO
          value: $(params.ORIGIN_REPO)
        - name: REVISION
          value: $(params.REVISION)
        - name: TARGET_GH_REPO
          value: "$(params.TARGET_GH_REPO)"
      script: |
        #!/usr/bin/env python3
        import json
        import logging
        import os
        import time
        import base64
        import subprocess
        import urllib.error
        import urllib.request

        logging.basicConfig(level=logging.DEBUG, format="%(asctime)s:%(name)s:%(levelname)s:%(message)s")
        logger = logging.getLogger("updater")

        EXPIRE_MINUTES_AS_SECONDS = int(os.environ.get('GITHUBAPP_TOKEN_EXPIRATION_MINUTES', 10)) * 60
        # TODO support github enterprise
        GITHUB_API_URL = os.environ["GITHUB_API_URL"]

        ORIGIN_REPO = os.environ["ORIGIN_REPO"]
        TARGET_GH_REPO = os.environ["TARGET_GH_REPO"]


        class Response:
            def __init__(self, content, status):
                self.content = content
                self.status = status

            def json(self):
                return json.loads(self.content)


        class GitHub():
            token = None

            def __init__(self, private_key_path, app_id=None, installation_id=None):
                self._private_key_path = private_key_path
                self.app_id = app_id
                self.token = self._get_token(installation_id)

            def _app_token(self, expire_in=EXPIRE_MINUTES_AS_SECONDS):
                # based on https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app#example-using-bash-to-generate-a-jwt
                now = int(time.time())

                header_ = {"typ": "JWT", "alg": "RS256"}
                header = base64.b64encode(json.dumps(header_).encode())

                payload_ = {"iat": now, "exp": now + expire_in, "iss": self.app_id}
                payload = base64.b64encode(json.dumps(payload_).encode())

                header_payload = header + b"." + payload
                proc = subprocess.run(
                    ["openssl", "dgst", "-sha256", "-sign", self._private_key_path],
                    input=header_payload,
                    check=True,
                    stdout=subprocess.PIPE,
                )
                signature = base64.b64encode(proc.stdout)

                token = header_payload + b"." + signature
                return token.decode()

            def _get_token(self, installation_id=None):
                app_token = self._app_token()
                if not installation_id:
                    return app_token

                req = self._request(
                    "POST",
                    f"/app/installations/{installation_id}/access_tokens",
                    headers={
                        "Authorization": f"Bearer {app_token}",
                        "Accept": "application/vnd.github.machine-man-preview+json"
                    })

                ret = req.json()
                if 'token' not in ret:
                    raise Exception(f"Authentication errors: {ret}")

                return ret['token']

            def _request(self, method, url, headers={}, data={}):
                if self.token and 'Authorization' not in headers:
                    headers.update({"Authorization": "Bearer " + self.token})
                if not url.startswith("http"):
                    url = f"{GITHUB_API_URL}{url}"
                req = urllib.request.Request(
                    url, method=method, headers=headers, data=json.dumps(data).encode()
                )
                try:
                    with urllib.request.urlopen(req) as resp:
                        return Response(resp.read(), resp.status)
                except urllib.error.HTTPError as e:
                    return Response(e.read(), e.code)

            def create_mr(self):
                repo_name = ORIGIN_REPO.split('/')[-1]
                logger.info("Create update pull request, head: %s, base: main", repo_name)
                req = self._request(
                    "POST",
                    f"/repos/{TARGET_GH_REPO}/pulls",
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={
                        "head": repo_name,
                        "base": "main",
                        "title": f"{repo_name} update",
                        "maintainer_can_modify": False
                    })
                json_output = req.json()
                print(json_output)
                return json_output

            def create_reset_branch(self):
                branch = ORIGIN_REPO.split('/')[-1]
                target_branch = self._request("GET", f"/repos/{TARGET_GH_REPO}/git/refs/heads/{branch}").json()
                main_branch_sha = self._request("GET", f"/repos/{TARGET_GH_REPO}/git/refs/heads/main").json()['object']['sha']
                if "ref" in target_branch:
                    logger.info("Update branch %s", branch)
                    self._request(
                        "PATCH",
                        f"/repos/{TARGET_GH_REPO}/git/refs/heads/{branch}",
                        data={"sha": main_branch_sha, "force": True}
                    )
                else:
                    logger.info("Create branch %s", branch)
                    self._request(
                        "POST",
                        f"/repos/{TARGET_GH_REPO}/git/refs",
                        data={"sha": main_branch_sha, "ref": f"refs/heads/{branch}"}
                    )

            def upload_content(self):
                branch = ORIGIN_REPO.split('/')[-1]
                for file in open('updated_files.txt').readlines():
                    file = file.strip()
                    with open(f"cloned/{file}", "rb") as fd:
                        encoded_string = base64.b64encode(fd.read()).decode("utf-8")
                    old_sha = self._request("GET", f'/repos/{TARGET_GH_REPO}/contents/{file}').json().get("sha")
                    if old_sha is None:
                        logger.info("Upload a new file %s", file)
                        self._request("PUT", f'/repos/{TARGET_GH_REPO}/contents/{file}', data={"message": f"update {file}", "branch": branch, "content": encoded_string})
                    else:
                        logger.info("Update file %s", file)
                        self._request("PUT", f'/repos/{TARGET_GH_REPO}/contents/{file}', data={"message": f"update {file}", "branch": branch, "content": encoded_string, "sha": old_sha})

            def get_pr(self):
                repo_name = ORIGIN_REPO.split('/')[-1]
                req = self._request(
                    "GET",
                    f"/repos/{TARGET_GH_REPO}/pulls",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                json_output = req.json()
                for item in json_output:
                    if item["user"]["login"].endswith("[bot]") and item["head"]["ref"] == repo_name:
                        return item

            def get_pr_url_from_sha(self, sha):
                req = self._request(
                    "GET",
                    f"/search/issues?q={sha}",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                return req.json()["items"][0]["pull_request"]["html_url"]

            def update_mr_description(self, pr_url, description):
                req = self._request(
                    "PATCH",
                    pr_url,
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={ "body": description })
                json_output = req.json()
                print(json_output)


        def main():
            key_path = os.environ.get('GITHUBAPP_KEY_PATH')
            if key_path is None:
                raise ValueError("The GITHUBAPP_KEY_PATH environment variable is not set")
            if not os.path.exists(key_path):
                raise ValueError(f"The GITHUBAPP_KEY_PATH file ({key_path!r}) does not exist")

            if os.environ.get('GITHUBAPP_APP_ID'):
                app_id = os.environ['GITHUBAPP_APP_ID']
            else:
                raise Exception("application id is not set")

            print(f"Getting user token for application_id: {app_id}")
            github_app = GitHub(
                key_path,
                app_id=app_id,
                installation_id=os.environ.get('GITHUBAPP_INSTALLATION_ID'))

            github_app.create_reset_branch()
            github_app.upload_content()
            infra_pr = github_app.create_mr()
            if "url" not in infra_pr:
                logger.info("No field 'url' is included in %r.", infra_pr)
                logger.info("Try to find out the pull request in another way")
                infra_pr = github_app.get_pr()
            if not infra_pr:
                logger.warning("No pull request is found to update the description.")
                return
            description = infra_pr["body"]
            if description == None:
                description = "Included PRs:"
            new_pr_link = github_app.get_pr_url_from_sha(os.environ["REVISION"])
            new_description = f"{description}\r\n- {new_pr_link}"
            logger.info("Update description of pull request %s:\n%s", infra_pr["url"], new_description)
            github_app.update_mr_description(infra_pr["url"], new_description)


        if __name__ == '__main__':
            main()

  workspaces:
    - name: artifacts
      description: Workspace containing arbitrary artifacts used during the task run.
      optional: true
