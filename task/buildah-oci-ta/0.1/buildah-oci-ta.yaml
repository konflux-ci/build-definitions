---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildah-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, appstudio, hacbs
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: docker
spec:
  description: |-
    Buildah task builds source code into a container image and pushes the image into container registry using buildah tool.
    In addition it generates a SBOM file, injects the SBOM file into final container image and pushes the SBOM file as separate image using cosign tool.
    When [Java dependency rebuild](https://redhat-appstudio.github.io/docs.stonesoup.io/Documentation/main/cli/proc_enabled_java_dependencies.html) is enabled it triggers rebuilds of Java artifacts.
    When prefetch-dependencies task was activated it is using its artifacts to run build in hermetic environment.
  params:
    - name: ADDITIONAL_SECRET
      description: Name of a secret which will be made available to the build
        with 'buildah build --secret' at /run/secrets/$ADDITIONAL_SECRET
      type: string
      default: does-not-exist
    - name: ADD_CAPABILITIES
      description: Comma separated list of extra capabilities to add when
        running 'buildah build'
      type: string
      default: ""
    - name: BUILD_ARGS
      description: Array of --build-arg values ("arg=value" strings)
      type: array
      default: []
    - name: BUILD_ARGS_FILE
      description: Path to a file with build arguments, see https://www.mankier.com/1/buildah-build#--build-arg-file
      type: string
      default: ""
    - name: CACHI2_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the prefetched dependencies.
      type: string
      default: ""
    - name: COMMIT_SHA
      description: The image is built from this commit.
      type: string
      default: ""
    - name: CONTEXT
      description: Path to the directory to use as context.
      type: string
      default: .
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      type: string
      default: ./Dockerfile
    - name: DOCKER_AUTH
      description: unused, should be removed in next task version
      type: string
      default: ""
    - name: ENTITLEMENT_SECRET
      description: Name of secret which contains the entitlement certificates
      type: string
      default: etc-pki-entitlement
    - name: HERMETIC
      description: Determines if build will be executed without network access.
      type: string
      default: "false"
    - name: IMAGE
      description: Reference of the image buildah will produce.
      type: string
    - name: IMAGE_EXPIRES_AFTER
      description: Delete image tag after specified time. Empty means to keep
        the image tag. Time values could be something like 1h, 2d, 3w for
        hours, days, and weeks, respectively.
      type: string
      default: ""
    - name: PREFETCH_INPUT
      description: In case it is not empty, the prefetched content should
        be made available to the build.
      type: string
      default: ""
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: SQUASH
      description: Squash new layers added as a part of this build, as per
        --squash
      type: string
      default: "false"
    - name: SQUASH_ALL
      description: Squash all new and previous layers added as a part of this
        build, as per --squash-all
      type: string
      default: "false"
    - name: TARGET_STAGE
      description: Target stage in Dockerfile to build. If not specified,
        the Dockerfile is processed entirely to (and including) its last stage.
      type: string
      default: ""
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull
        to a non-TLS registry)
      type: string
      default: "true"
    - name: YUM_REPOS_D_FETCHED
      description: Path in source workspace where dynamically-fetched repos
        are present
      default: fetched.repos.d
    - name: YUM_REPOS_D_SRC
      description: Path in the git repository in which yum repository files
        are stored
      default: repos.d
    - name: YUM_REPOS_D_TARGET
      description: Target path on the container in which yum repository files
        should be made available
      default: /etc/yum.repos.d
    - name: caTrustConfigMapKey
      description: The name of the key in the ConfigMap that contains the
        CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: caTrustConfigMapName
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
  results:
    - name: BASE_IMAGES_DIGESTS
      description: Digests of the base images used for build
    - name: IMAGE_DIGEST
      description: Digest of the image just built
    - name: IMAGE_URL
      description: Image repository where the built image was pushed
    - name: JAVA_COMMUNITY_DEPENDENCIES
      description: The Java dependencies that came from community sources
        such as Maven central.
    - name: SBOM_JAVA_COMPONENTS_COUNT
      description: The counting of Java components by publisher in JSON format
      type: string
  volumes:
    - name: additional-secret
      secret:
        optional: true
        secretName: $(params.ADDITIONAL_SECRET)
    - name: etc-pki-entitlement
      secret:
        optional: true
        secretName: $(params.ENTITLEMENT_SECRET)
    - name: shared
      emptyDir: {}
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
    - name: varlibcontainers
      emptyDir: {}
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: ADDITIONAL_SECRET
        value: $(params.ADDITIONAL_SECRET)
      - name: ADD_CAPABILITIES
        value: $(params.ADD_CAPABILITIES)
      - name: BUILDAH_FORMAT
        value: oci
      - name: BUILD_ARGS_FILE
        value: $(params.BUILD_ARGS_FILE)
      - name: CONTEXT
        value: $(params.CONTEXT)
      - name: DOCKERFILE
        value: $(params.DOCKERFILE)
      - name: ENTITLEMENT_SECRET
        value: $(params.ENTITLEMENT_SECRET)
      - name: HERMETIC
        value: $(params.HERMETIC)
      - name: IMAGE
        value: $(params.IMAGE)
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.IMAGE_EXPIRES_AFTER)
      - name: SQUASH
        value: $(params.SQUASH)
      - name: SQUASH_ALL
        value: $(params.SQUASH_ALL)
      - name: STORAGE_DRIVER
        value: vfs
      - name: TARGET_STAGE
        value: $(params.TARGET_STAGE)
      - name: TLSVERIFY
        value: $(params.TLSVERIFY)
      - name: YUM_REPOS_D_FETCHED
        value: $(params.YUM_REPOS_D_FETCHED)
      - name: YUM_REPOS_D_SRC
        value: $(params.YUM_REPOS_D_SRC)
      - name: YUM_REPOS_D_TARGET
        value: $(params.YUM_REPOS_D_TARGET)
    volumeMounts:
      - mountPath: /shared
        name: shared
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:4e39fb97f4444c2946944482df47b39c5bbc195c54c6560b0647635f553ab23d
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
        - $(params.CACHI2_ARTIFACT)=/var/workdir/cachi2
    - name: build
      image: quay.io/redhat-appstudio/buildah:v1.31.0@sha256:34f12c7b72ec2c28f1ded0c494b428df4791c909f1f174dd21b8ed6a57cf5ddb
      args:
        - $(params.BUILD_ARGS[*])
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /entitlement
          name: etc-pki-entitlement
        - mountPath: /additional-secret
          name: additional-secret
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
      env:
        - name: COMMIT_SHA
          value: $(params.COMMIT_SHA)
      script: |
        ca_bundle=/mnt/trusted-ca/ca-bundle.crt
        if [ -f "$ca_bundle" ]; then
          echo "INFO: Using mounted CA bundle: $ca_bundle"
          cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
          update-ca-trust
        fi

        SOURCE_CODE_DIR=source
        if [ -e "$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE" ]; then
          dockerfile_path="$(pwd)/$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE"
        elif [ -e "$SOURCE_CODE_DIR/$DOCKERFILE" ]; then
          dockerfile_path="$(pwd)/$SOURCE_CODE_DIR/$DOCKERFILE"
        elif echo "$DOCKERFILE" | grep -q "^https\?://"; then
          echo "Fetch Dockerfile from $DOCKERFILE"
          dockerfile_path=$(mktemp --suffix=-Dockerfile)
          http_code=$(curl -s -L -w "%{http_code}" --output "$dockerfile_path" "$DOCKERFILE")
          if [ $http_code != 200 ]; then
            echo "No Dockerfile is fetched. Server responds $http_code"
            exit 1
          fi
          http_code=$(curl -s -L -w "%{http_code}" --output "$dockerfile_path.dockerignore.tmp" "$DOCKERFILE.dockerignore")
          if [ $http_code = 200 ]; then
            echo "Fetched .dockerignore from $DOCKERFILE.dockerignore"
            mv "$dockerfile_path.dockerignore.tmp" $SOURCE_CODE_DIR/$CONTEXT/.dockerignore
          fi
        else
          echo "Cannot find Dockerfile $DOCKERFILE"
          exit 1
        fi
        if [ -n "$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR" ] && grep -q '^\s*RUN \(./\)\?mvn' "$dockerfile_path"; then
          sed -i -e "s|^\s*RUN \(\(./\)\?mvn\)\(.*\)|RUN echo \"<settings><mirrors><mirror><id>mirror.default</id><url>http://$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR/v1/cache/default/0/</url><mirrorOf>*</mirrorOf></mirror></mirrors></settings>\" > /tmp/settings.yaml; \1 -s /tmp/settings.yaml \3|g" "$dockerfile_path"
          touch /var/lib/containers/java
        fi

        # Fixing group permission on /var/lib/containers
        chown root:root /var/lib/containers

        sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

        # Setting new namespace to run buildah - 2^32-2
        echo 'root:1:4294967294' | tee -a /etc/subuid >>/etc/subgid

        BUILDAH_ARGS=()

        BASE_IMAGES=$(grep -i '^\s*FROM' "$dockerfile_path" | sed 's/--platform=\S*//' | awk '{print $2}')
        if [ "${HERMETIC}" == "true" ]; then
          BUILDAH_ARGS+=("--pull=never")
          UNSHARE_ARGS="--net"
          for image in $BASE_IMAGES; do
            if [ "${image}" != "scratch" ]; then
              unshare -Ufp --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -- buildah pull $image
            fi
          done
          echo "Build will be executed with network isolation"
        fi

        if [ -n "${TARGET_STAGE}" ]; then
          BUILDAH_ARGS+=("--target=${TARGET_STAGE}")
        fi

        if [ -n "${BUILD_ARGS_FILE}" ]; then
          BUILDAH_ARGS+=("--build-arg-file=$(pwd)/$SOURCE_CODE_DIR/${BUILD_ARGS_FILE}")
        fi

        for build_arg in "$@"; do
          BUILDAH_ARGS+=("--build-arg=$build_arg")
        done

        if [ -n "${ADD_CAPABILITIES}" ]; then
          BUILDAH_ARGS+=("--cap-add=${ADD_CAPABILITIES}")
        fi

        if [ "${SQUASH}" == "true" ]; then
          BUILDAH_ARGS+=("--squash")
        fi

        if [ "${SQUASH_ALL}" == "true" ]; then
          BUILDAH_ARGS+=("--squash-all")
        fi

        if [ -f "/var/workdir/cachi2/cachi2.env" ]; then
          cp -r "/var/workdir/cachi2" /tmp/
          chmod -R go+rwX /tmp/cachi2
          VOLUME_MOUNTS="--volume /tmp/cachi2:/cachi2"
          sed -i 's|^\s*run |RUN . /cachi2/cachi2.env \&\& \\\n    |i' "$dockerfile_path"
          echo "Prefetched content will be made available"

          prefetched_repo_for_my_arch="/tmp/cachi2/output/deps/rpm/$(uname -m)/repos.d/cachi2.repo"
          if [ -f "$prefetched_repo_for_my_arch" ]; then
            echo "Adding $prefetched_repo_for_my_arch to $YUM_REPOS_D_FETCHED"
            mkdir -p "$YUM_REPOS_D_FETCHED"
            cp --no-clobber "$prefetched_repo_for_my_arch" "$YUM_REPOS_D_FETCHED"
          fi
        fi

        # if yum repofiles stored in git, copy them to mount point outside the source dir
        if [ -d "${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}" ]; then
          mkdir -p ${YUM_REPOS_D_FETCHED}
          cp -r ${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}/* ${YUM_REPOS_D_FETCHED}
        fi

        # if anything in the repofiles mount point (either fetched or from git), mount it
        if [ -d "${YUM_REPOS_D_FETCHED}" ]; then
          chmod -R go+rwX ${YUM_REPOS_D_FETCHED}
          mount_point=$(realpath ${YUM_REPOS_D_FETCHED})
          VOLUME_MOUNTS="${VOLUME_MOUNTS} --volume ${mount_point}:${YUM_REPOS_D_TARGET}"
        fi

        LABELS=(
          "--label" "build-date=$(date -u +'%Y-%m-%dT%H:%M:%S')"
          "--label" "architecture=$(uname -m)"
          "--label" "vcs-type=git"
        )
        [ -n "$COMMIT_SHA" ] && LABELS+=("--label" "vcs-ref=$COMMIT_SHA")
        [ -n "$IMAGE_EXPIRES_AFTER" ] && LABELS+=("--label" "quay.expires-after=$IMAGE_EXPIRES_AFTER")

        ENTITLEMENT_PATH="/entitlement"
        if [ -d "$ENTITLEMENT_PATH" ]; then
          cp -r --preserve=mode "$ENTITLEMENT_PATH" /tmp/entitlement
          VOLUME_MOUNTS="${VOLUME_MOUNTS} --volume /tmp/entitlement:/etc/pki/entitlement"
          echo "Adding the entitlement to the build"
        fi

        ADDITIONAL_SECRET_PATH="/additional-secret"
        if [ -d "$ADDITIONAL_SECRET_PATH" ]; then
          cp -r --preserve=mode "$ADDITIONAL_SECRET_PATH" /tmp/additional-secret
          BUILDAH_ARGS+=("--secret=id=${ADDITIONAL_SECRET},src=/tmp/additional-secret")
          echo "Adding the secret ${ADDITIONAL_SECRET} to the build, available at /run/secrets/${ADDITIONAL_SECRET}"
        fi

        unshare -Uf $UNSHARE_ARGS --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -w ${SOURCE_CODE_DIR}/$CONTEXT -- buildah build \
          $VOLUME_MOUNTS \
          "${BUILDAH_ARGS[@]}" \
          "${LABELS[@]}" \
          --tls-verify=$TLSVERIFY --no-cache \
          --ulimit nofile=4096:4096 \
          -f "$dockerfile_path" -t $IMAGE .

        container=$(buildah from --pull-never $IMAGE)
        buildah mount $container | tee /shared/container_path
        echo $container >/shared/container_name

        # Save the SBOM produced by Cachi2 so it can be merged into the final SBOM later
        if [ -f "/tmp/cachi2/output/bom.json" ]; then
          cp /tmp/cachi2/output/bom.json ./sbom-cachi2.json
        fi

        # Expose base image digests
        touch $(results.BASE_IMAGES_DIGESTS.path)
        for image in $BASE_IMAGES; do
          if [ "${image}" != "scratch" ]; then
            buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' --filter reference="$image" >>$(results.BASE_IMAGES_DIGESTS.path)
          fi
        done

        # Needed to generate base images SBOM
        echo "$BASE_IMAGES" >/var/workdir/base_images_from_dockerfile
      computeResources:
        limits:
          memory: 4Gi
        requests:
          cpu: 250m
          memory: 512Mi
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: sbom-syft-generate
      image: quay.io/redhat-appstudio/syft:v0.105.1@sha256:1910b829997650c696881e5fc2fc654ddf3184c27edb1b2024e9cb2ba51ac431
      workingDir: /var/workdir/source
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /shared
          name: shared
      script: |
        echo "Running syft on the source directory"
        syft dir:/var/workdir/source --output cyclonedx-json=/var/workdir/sbom-source.json
        find $(cat /shared/container_path) -xtype l -delete
        echo "Running syft on the image filesystem"
        syft dir:$(cat /shared/container_path) --output cyclonedx-json=/var/workdir/sbom-image.json
    - name: analyse-dependencies-java-sbom
      image: quay.io/redhat-appstudio/hacbs-jvm-build-request-processor:127ee0c223a2b56a9bd20a6f2eaeed3bd6015f77
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /shared
          name: shared
      script: |
        if [ -f /var/lib/containers/java ]; then
          /opt/jboss/container/java/run/run-java.sh analyse-dependencies path $(cat /shared/container_path) -s /var/workdir/sbom-image.json --task-run-name $(context.taskRun.name) --publishers $(results.SBOM_JAVA_COMPONENTS_COUNT.path)
          sed -i 's/^/ /' $(results.SBOM_JAVA_COMPONENTS_COUNT.path) # Workaround for SRVKP-2875
        else
          touch $(results.JAVA_COMMUNITY_DEPENDENCIES.path)
        fi
      securityContext:
        runAsUser: 0
    - name: merge-syft-sboms
      image: registry.access.redhat.com/ubi9/python-39:1-172.1712567222@sha256:c96f839e927c52990143df4efb2872946fcd5de9e1ed2014947bb2cf3084c27a
      workingDir: /var/workdir
      script: |
        #!/bin/python3
        import json

        # load SBOMs
        with open("./sbom-image.json") as f:
          image_sbom = json.load(f)

        with open("./sbom-source.json") as f:
          source_sbom = json.load(f)

        # fetch unique components from available SBOMs
        def get_identifier(component):
          return component["name"] + '@' + component.get("version", "")

        image_sbom_components = image_sbom.get("components", [])
        existing_components = [get_identifier(component) for component in image_sbom_components]

        source_sbom_components = source_sbom.get("components", [])
        for component in source_sbom_components:
          if get_identifier(component) not in existing_components:
            image_sbom_components.append(component)
            existing_components.append(get_identifier(component))

        image_sbom_components.sort(key=lambda c: get_identifier(c))

        # write the CycloneDX unified SBOM
        with open("./sbom-cyclonedx.json", "w") as f:
          json.dump(image_sbom, f, indent=4)
      securityContext:
        runAsUser: 0
    - name: merge-cachi2-sbom
      image: quay.io/redhat-appstudio/cachi2:0.8.0@sha256:5cf15d6f3fb151a3e12c8a17024062b7cc62b0c3e1b165e4a9fa5bf7a77bdc30
      workingDir: /var/workdir
      script: |
        if [ -f "sbom-cachi2.json" ]; then
          echo "Merging contents of sbom-cachi2.json into sbom-cyclonedx.json"
          /src/utils/merge_syft_sbom.py sbom-cachi2.json sbom-cyclonedx.json >sbom-temp.json
          mv sbom-temp.json sbom-cyclonedx.json
        else
          echo "Skipping step since no Cachi2 SBOM was produced"
        fi
      securityContext:
        runAsUser: 0
    - name: create-purl-sbom
      image: registry.access.redhat.com/ubi9/python-39:1-172.1712567222@sha256:c96f839e927c52990143df4efb2872946fcd5de9e1ed2014947bb2cf3084c27a
      workingDir: /var/workdir
      script: |
        #!/bin/python3
        import json

        with open("./sbom-cyclonedx.json") as f:
          cyclonedx_sbom = json.load(f)

        purls = [{"purl": component["purl"]} for component in cyclonedx_sbom.get("components", []) if "purl" in component]
        purl_content = {"image_contents": {"dependencies": purls}}

        with open("sbom-purl.json", "w") as output_file:
          json.dump(purl_content, output_file, indent=4)
      securityContext:
        runAsUser: 0
    - name: create-base-images-sbom
      image: quay.io/redhat-appstudio/base-images-sbom-script@sha256:667669e3def018f9dbb8eaf8868887a40bc07842221e9a98f6787edcff021840
      workingDir: /var/workdir
      env:
        - name: BASE_IMAGES_DIGESTS_PATH
          value: $(results.BASE_IMAGES_DIGESTS.path)
      script: |
        python3 /app/base_images_sbom_script.py --sbom=sbom-cyclonedx.json --base-images-from-dockerfile=base_images_from_dockerfile --base-images-digests=$BASE_IMAGES_DIGESTS_PATH
      securityContext:
        runAsUser: 0
    - name: inject-sbom-and-push
      image: quay.io/redhat-appstudio/buildah:v1.31.0@sha256:34f12c7b72ec2c28f1ded0c494b428df4791c909f1f174dd21b8ed6a57cf5ddb
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      script: |
        base_image_name=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.name"}}' $IMAGE | cut -f1 -d'@')
        base_image_digest=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.digest"}}' $IMAGE)
        container=$(buildah from --pull-never $IMAGE)
        buildah copy $container sbom-cyclonedx.json sbom-purl.json /root/buildinfo/content_manifests/
        buildah config -a org.opencontainers.image.base.name=${base_image_name} -a org.opencontainers.image.base.digest=${base_image_digest} $container
        buildah commit $container $IMAGE

        status=-1
        max_run=5
        sleep_sec=10
        for run in $(seq 1 $max_run); do
          status=0
          [ "$run" -gt 1 ] && sleep $sleep_sec
          echo "Pushing sbom image to registry"
          buildah push \
            --tls-verify=$TLSVERIFY \
            --digestfile /var/workdir/image-digest $IMAGE \
            docker://$IMAGE && break || status=$?
        done
        if [ "$status" -ne 0 ]; then
            echo "Failed to push sbom image to registry after ${max_run} tries"
            exit 1
        fi

        cat "/var/workdir"/image-digest | tee $(results.IMAGE_DIGEST.path)
        echo -n "$IMAGE" | tee $(results.IMAGE_URL.path)
      securityContext:
        capabilities:
          add:
            - SETFCAP
        runAsUser: 0
    - name: upload-sbom
      image: quay.io/redhat-appstudio/cosign:v2.1.1@sha256:c883d6f8d39148f2cea71bff4622d196d89df3e510f36c140c097b932f0dd5d5
      args:
        - attach
        - sbom
        - --sbom
        - sbom-cyclonedx.json
        - --type
        - cyclonedx
        - $(params.IMAGE)
      workingDir: /var/workdir
