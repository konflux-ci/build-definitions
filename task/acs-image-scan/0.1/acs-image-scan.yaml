apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: acs-image-scan
  annotations:
    task.results.format: application/json
    task.results.type: roxctl-image-scan
    task.results.key: SCAN_OUTPUT
    task.results.container: step-report
    task.output.location: logs
spec:
  description: Policy check an image with StackRox/RHACS This tasks allows you to
    check an image against build-time policies and apply enforcement to fail builds.
    It's a companion to the stackrox-image-scan task, which returns full vulnerability
    scan results for an image.
  params:
    - name: rox-secret-name
      type: string
      description: |
        Secret containing the StackRox server endpoint and API token with CI permissions under rox-api-endpoint and rox-api-token keys.
        For example: rox-api-endpoint: rox.stackrox.io:443 ; rox-api-token: eyJhbGciOiJS...
    - name: image
      type: string
      description: |
        Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
    - name: image-digest
      type: string
      description: |
        Digest of the image to scan
    - name: insecure-skip-tls-verify
      type: string
      default: "false"
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central
        endpoint.  Defaults to `"false"`.
  results:
    - name: SCAN_OUTPUT
      description: Summary of the roxctl scan
    - name: TEST_OUTPUT
      description: Result of the `roxctl image scan` check
  volumes:
    - name: rox-secret
      secret:
        secretName: $(params.rox-secret-name)
        optional: true
    - name: shared-folder
      emptyDir:
        medium: Memory
        sizeLimit: 50Mi
  steps:
    - name: annotate-task
      image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c
      script: |
        #!/usr/bin/env bash
        echo "acs-image-scan $(context.taskRun.name)"
        oc annotate taskrun $(context.taskRun.name) task.results.format=application/json
        oc annotate taskrun $(context.taskRun.name) task.results.type=roxctl-image-scan
        oc annotate taskrun $(context.taskRun.name) task.results.key=SCAN_OUTPUT
        oc annotate taskrun $(context.taskRun.name) task.results.container=step-report
        oc annotate taskrun $(context.taskRun.name) task.output.location=logs

    - name: rox-image-scan
      image: registry.access.redhat.com/ubi8-minimal@sha256:d8b81a38b5ad9694742ea03159d3217cd2dde3997b1ee53bbb53c33dd67be7b7
      volumeMounts:
        - name: rox-secret
          mountPath: /rox-secret
        - name: shared-folder
          mountPath: /steps-shared-folder
      env:
        - name: PARAM_INSECURE_SKIP_TLS_VERIFY
          value: $(params.insecure-skip-tls-verify)
        - name: PARAM_IMAGE
          value: $(params.image)
        - name: PARAM_IMAGE_DIGEST
          value: $(params.image-digest)
      script: |
        #!/usr/bin/env bash
        set +x

        function set_test_output_result() {
          local date=$(date +%s)
          local result=${1:-ERROR}
          local note=$2
          local successes=${3:-0}
          local failures=${4:-0}
          local warnings=${5:-0}
          echo "{\"result\":\"${result}\",\"timestamp\":\"${date}\",\"note\":\"${note}\",\"namespace\":\"default\",\"successes\":\"${successes}\",\"failures\":\"${failures}\",\"warnings\":\"${warnings}\"}" \
            | tee $(results.TEST_OUTPUT.path)
        }

        # Check if rox API enpoint is configured
        if test -f /rox-secret/rox-api-endpoint ; then
          export ROX_CENTRAL_ENDPOINT=$(</rox-secret/rox-api-endpoint)
        else
          echo "rox API endpoint is not set, demo will exit with success"
          echo "TODO: configure the pipeline with your ACS server domain. Set your ACS endpoint under 'rox-api-endpoint' key in the secret specified in rox-secret-name parameter. For example: 'rox.stackrox.io:443'"
          set_test_output_result SKIPPED "Task $(context.task.name) skipped: ACS API enpoint not specified"
          exit 0
        fi

        # Check if rox API token is configured
        if test -f /rox-secret/rox-api-token ; then
          export ROX_API_TOKEN=$(</rox-secret/rox-api-token)
        else
          echo "rox API token is not set, demo will exit with success"
          echo "TODO: configure the pipeline to have access to ROXCTL. Set you ACS token under 'rox-api-token' key in the secret specified in rox-secret-name parameter."
          set_test_output_result SKIPPED "Task $(context.task.name) skipped: ACS API token not provided"
          exit 0
        fi

        echo "Using rox central endpoint ${ROX_CENTRAL_ENDPOINT}"

        echo "Download roxctl cli"
        if [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] ; then
          curl_insecure='--insecure'
        fi
        curl $curl_insecure -s -L -H "Authorization: Bearer $ROX_API_TOKEN" \
          "https://${ROX_CENTRAL_ENDPOINT}/api/cli/download/roxctl-linux" \
          --output ./roxctl  \
          > /dev/null
        if [ $? -ne 0 ]; then
          note='Failed to download roxctl'
          echo $note
          set_test_output_result ERROR "$note"
          exit 1
        fi
        chmod +x ./roxctl  > /dev/null

        echo "roxctl image scan"

        IMAGE=${PARAM_IMAGE}@${PARAM_IMAGE_DIGEST}
        ./roxctl image scan \
          $( [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] && \
          echo -n "--insecure-skip-tls-verify") \
          -e "${ROX_CENTRAL_ENDPOINT}" --image "$IMAGE" --output json --force \
          > roxctl_image_scan_output.json
        image_scan_err_code=$?
        cp roxctl_image_scan_output.json /steps-shared-folder/acs-image-scan.json
        if [ $image_scan_err_code -ne 0 ]; then
          cat roxctl_image_scan_output.json
          note='ACS image scan failed to process the image. See the task logs for more details.'
          echo $note
          set_test_output_result ERROR "$note"
          exit 2
        fi

        # Set SCAN_OUTPUT result
        critical=$(cat roxctl_image_scan_output.json | grep -oP '(?<="CRITICAL": )\d+')
        high=$(cat roxctl_image_scan_output.json | grep -oP '(?<="IMPORTANT": )\d+')
        medium=$(cat roxctl_image_scan_output.json | grep -oP '(?<="MODERATE": )\d+')
        low=$(cat roxctl_image_scan_output.json | grep -oP '(?<="LOW": )\d+')
        echo "{\"vulnerabilities\":{\"critical\":${critical},\"high\":${high},\"medium\":${medium},\"low\":${low}}}" | tee $(results.SCAN_OUTPUT.path)

        # Set TEST_OUTPUT result
        if [[ -n "$critical" && "$critical" -eq 0 && "$high" -eq 0 && "$medium" -eq 0 && "$low" -eq 0 ]]; then
          note="Task $(context.task.name) completed. No vulnerabilities found."
        else
          note="Task $(context.task.name) completed: Refer to Tekton task result SCAN_OUTPUT for found vulnerabilities."
        fi
        set_test_output_result SUCCESS "$note"

    - name: report
      image: registry.access.redhat.com/ubi8-minimal@sha256:d8b81a38b5ad9694742ea03159d3217cd2dde3997b1ee53bbb53c33dd67be7b7
      volumeMounts:
        - name: shared-folder
          mountPath: /steps-shared-folder
      script: |
        #!/usr/bin/env bash
        cat /steps-shared-folder/acs-image-scan.json
