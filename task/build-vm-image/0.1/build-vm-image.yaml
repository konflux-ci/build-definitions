apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: disk-image
  name: build-vm-image
spec:
  description: "Build disk images using bootc-image-builder. https://github.com/osbuild/bootc-image-builder/"
  params:
    - description: The platform to build on
      name: PLATFORM
      type: string
    - name: OUTPUT_IMAGE
      type: string
      description: The output manifest list that points to the OCI artifact of the zipped image
    - name: SOURCE_ARTIFACT
      type: string
    - name: IMAGE_TYPE
      type: string
      description: The type of VM image to build, valid values are iso, qcow2, gce, vhd and raw
    - name: BIB_CONFIG_FILE
      default: bib.yaml
      type: string
      description: The config file specifying what to build and the builder to build it with
    - name: CONFIG_TOML_FILE
      default: ""
      type: string
      description: The path for the config.toml file within the source repository
    - default: etc-pki-entitlement
      description: Name of secret which contains the entitlement certificates
      name: ENTITLEMENT_SECRET
      type: string
    - name: STORAGE_DRIVER
      description: Storage driver to configure for buildah
      type: string
      default: vfs
  results:
    - description: Digest of the manifest list just built
      name: IMAGE_DIGEST
    - description: Image repository where the built manifest list was pushed
      name: IMAGE_URL
  stepTemplate:
    env:
      - name: OUTPUT_IMAGE
        value: $(params.OUTPUT_IMAGE)
      - name: BIB_CONFIG_FILE
        value: $(params.BIB_CONFIG_FILE)
      - name: CONFIG_TOML_FILE
        value: $(params.CONFIG_TOML_FILE)
      - name: IMAGE_TYPE
        value: $(params.IMAGE_TYPE)
      - name: ENTITLEMENT_SECRET
        value: $(params.ENTITLEMENT_SECRET)
      - name: STORAGE_DRIVER
        value: $(params.STORAGE_DRIVER)

    volumeMounts:
      - mountPath: "/var/workdir"
        name: workdir
      - mountPath: "/var/lib/containers/storage"
        name: varlibcontainers
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:81c4864dae6bb11595f657be887e205262e70086a05ed16ada827fd6391926ac
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: validate-bib-config
      image: quay.io/konflux-ci/yq:latest@sha256:4ce1f9431020387eb6c33a28a46e079b0c28b97f916243d150e70a09e41ce6b4
      script: |-
        #!/bin/bash
        set -o verbose
        set -e
        set -x

        # expects a config file like the following as BIB_CONFIG_FILE
        #
        echo -e "BIB_CONFIG_FILE: $BIB_CONFIG_FILE"
        # # BIB: Bootc Image Builder config
        # bootc-builder-image: "quay.io/centos-bootc/bootc-image-builder:latest"
        # source-image: "quay.io/centos-bootc/centos-bootc:stream9"
        # tagged-as: registry.centos.org/bootc:stream9

        # trim any leading slash.
        BIB_CONFIG_FILE=${BIB_CONFIG_FILE#/}

        BIB_IMAGE=$(yq -r .bootc-builder-image /var/workdir/source/$BIB_CONFIG_FILE)
        SOURCE_IMAGE=$(yq -r  .source-image /var/workdir/source/$BIB_CONFIG_FILE)
        TAGGED_AS=$(yq -r  ".tagged-as // \"${SOURCE_IMAGE}\"" /var/workdir/source/$BIB_CONFIG_FILE)

        # Validate that all keys exist and are plausible pullspecs
        valid_pullspec_characters="0-9a-zA-Z@:/"
        if [[ ! "${BIB_IMAGE}" =~ [^$valid_pullspec_characters]  ]]; then
          echo ".bootc-builder-image in $BIB_CONFIG_FILE doesn't match $valid_pullspec_characters"
          exit 1
        fi
        if [[ ! "${SOURCE_IMAGE}" =~ [^$valid_pullspec_characters]  ]]; then
          echo ".source-image in $BIB_CONFIG_FILE doesn't match $valid_pullspec_characters"
          exit 1
        fi
        if [[ ! "${TAGGED_AS}" =~ [^$valid_pullspec_characters]  ]]; then
          echo ".tagged-as in $BIB_CONFIG_FILE doesn't match $valid_pullspec_characters"
          exit 1
        fi

        # write values to a file in the workspace
        echo "declare BOOTC_BUILDER_IMAGE=${BIB_IMAGE}" > /var/workdir/vars
        echo "declare SOURCE_IMAGE=${SOURCE_IMAGE}" >> /var/workdir/vars
        echo "declare TAGGED_AS=${TAGGED_AS}" >> /var/workdir/vars

    - name: build
      image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
      computeResources:
        limits:
          memory: 512Mi
        requests:
          cpu: 250m
          memory: 128Mi
      script: |-
        #!/bin/bash
        set -o verbose
        set -eu
        set -x

        # get values stored from previous task
        echo "vars file"
        cat /var/workdir/vars
        source /var/workdir/vars
        echo "Vars:"
        echo BOOTC_BUILDER_IMAGE $BOOTC_BUILDER_IMAGE
        echo SOURCE_IMAGE $SOURCE_IMAGE
        echo TAGGED_AS $TAGGED_AS

        mkdir -p ~/.ssh
        if [ -e "/ssh/error" ]; then
          #no server could be provisioned
          cat /ssh/error
          exit 1
        elif [ -e "/ssh/otp" ]; then
          curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
          echo "" >> ~/.ssh/id_rsa
        else
          cp /ssh/id_rsa ~/.ssh
        fi
        chmod 0400 ~/.ssh/id_rsa
        export SSH_HOST=$(cat /ssh/host)
        export BUILD_DIR=$(cat /ssh/user-dir)
        export SSH_ARGS="-o StrictHostKeyChecking=no -o ServerAliveInterval=60"
        mkdir -p scripts
        echo "$BUILD_DIR"
        ssh -v $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/tmp" "$BUILD_DIR/tekton-results" "$BUILD_DIR/entitlement"

        if [ ! -n "${CONFIG_TOML_FILE}" ]; then
          echo "No CONFIG_TOML_FILE specified"
          export CONFIG_TOML_FILE=config.toml
          if [ -f /var/workdir/source/config.toml ]; then
            echo "Using the config.toml file found in the repository root!"
            echo "  Remove the config.toml file or set params.CONFIG_TOML_FILE to another file to prevent using config.toml."
          else
            echo "No config.toml file found. Using an empty configuration."
            touch /var/workdir/source/$CONFIG_TOML_FILE
          fi
        fi
        echo "Using the following config.toml file $CONFIG_TOML_FILE:"
        cat /var/workdir/source/$CONFIG_TOML_FILE


        rsync -ra "/var/workdir/source/$CONFIG_TOML_FILE" "$SSH_HOST:$BUILD_DIR/config.toml"
        rsync -ra "$HOME/.docker/" "$SSH_HOST:$BUILD_DIR/.docker/"
        rsync -ra /entitlement/ "$SSH_HOST:$BUILD_DIR/entitlement/"

        # form the --type arguments
        IMAGE_TYPE_ARGUMENT=" --type $IMAGE_TYPE "

        # this unquoted heredoc allows expansions for the image name
        cat >scripts/script-build.sh <<REMOTESSHEOF
        #!/bin/sh
        set -e

        # this prevents the container from using podman-subscripition-mananger magic,
        # so that it will use certificates from /etc/pki/entitlements
        sudo rm /usr/share/containers/mounts.conf

        export BUILD_DIR="$BUILD_DIR"
        export OUTPUT_IMAGE="$OUTPUT_IMAGE"
        export BOOTC_BUILDER_IMAGE="$BOOTC_BUILDER_IMAGE"
        export SOURCE_IMAGE="$SOURCE_IMAGE"
        export TAGGED_AS="$TAGGED_AS"
        export IMAGE_TYPE_ARGUMENT="$IMAGE_TYPE_ARGUMENT"
        export STORAGE_DRIVER="$STORAGE_DRIVER"

        REMOTESSHEOF

        # this quoted heredoc prevents expansions and command substitutions. the env vars are evaluated on the remote vm
        cat >>scripts/script-build.sh <<'REMOTESSHEOF'

        mkdir output
        echo "PULLING BUILDER IMAGE"
        time sudo podman pull --authfile=$BUILD_DIR/.docker/config.json $BOOTC_BUILDER_IMAGE
        echo "PULLING IMAGE"
        time sudo podman pull --authfile=$BUILD_DIR/.docker/config.json $SOURCE_IMAGE
        echo "TAGGING IMAGE"
        time sudo podman tag $SOURCE_IMAGE $TAGGED_AS
        echo "RUNNING BUILD"
        echo -e "IMAGE_TYPE_ARGUMENT = $IMAGE_TYPE_ARGUMENT"

        time sudo podman run --authfile=$BUILD_DIR/.docker/config.json --rm -it --privileged --pull=newer --security-opt label=type:unconfined_t \
          -v $BUILD_DIR/config.toml:/config.toml -v $(pwd)/output:/output \
          -v /var/lib/containers/storage:/var/lib/containers/storage \
          -v $BUILD_DIR/entitlement:/etc/pki/entitlement:Z \
          $BOOTC_BUILDER_IMAGE $IMAGE_TYPE_ARGUMENT --local $TAGGED_AS

        # This script is currently using fedora image because buildah in UBI9 does not have the OCI support (no --artifact* switches)
        time sudo podman run --authfile=$BUILD_DIR/.docker/config.json --rm -it --privileged --pull=newer --security-opt label=type:unconfined_t \
          -v $BUILD_DIR/.docker:/.docker -v $(pwd)/output:/output \
          -v /var/lib/containers/storage:/var/lib/containers/storage \
          -v $BUILD_DIR/scripts/script-push.sh:/script-push.sh \
          -v $BUILD_DIR/tekton-results:/tekton-results \
          registry.fedoraproject.org/fedora \
          /script-push.sh

        REMOTESSHEOF

        # script-push.sh script is intended run _inside_ podman on the ssh host and requires sudo
        # this unquoted heredoc allows expansions for the image name
        cat >scripts/script-push.sh <<REMOTESSHEOF
        #!/bin/bash
        set -ex

        export OUTPUT_IMAGE="$OUTPUT_IMAGE"

        REMOTESSHEOF

        # this quoted heredoc prevents expansions and command substitutions. the env vars are evaluated on the remote vm
        cat >>scripts/script-push.sh <<'REMOTESSHEOF'
        dnf -y install buildah skopeo pigz jq

        # Build an image index of length 1 referring to an image manifest with the content
        buildah manifest create "$OUTPUT_IMAGE"

        # show contents of /output
        ls -alR /output

        if [ -f "/output/qcow2/disk.qcow2" ]; then
          echo -e "Found qcow2 image."
          # don't zip qcow2 images, it is already compressed.
          buildah manifest add --arch $(arch) --os linux --artifact --artifact-type application/vnd.diskimage.qcow2.gzip $OUTPUT_IMAGE /output/qcow2/disk.qcow2
        elif [ -f "/output/image/disk.raw" ]; then
          echo -e "Found raw image."
          pigz /output/image/disk.raw
          buildah manifest add --arch $(arch) --os linux --artifact --artifact-type application/vnd.diskimage.raw.gzip $OUTPUT_IMAGE /output/image/disk.raw.gz
        elif [ -f "/output/bootiso/install.iso" ]; then
          echo -e "Found iso image."
          pigz /output/bootiso/install.iso
          buildah manifest add --arch $(arch) --os linux --artifact --artifact-type application/vnd.diskimage.iso.gzip $OUTPUT_IMAGE /output/bootiso/install.iso.gz
        elif [ -f "/output/vpc/disk.vhd" ]; then
          echo -e "Found vhd image."
          pigz /output/vpc/disk.vhd
          buildah manifest add --arch $(arch) --os linux --artifact --artifact-type application/vnd.diskimage.vhd.gzip $OUTPUT_IMAGE /output/vpc/disk.vhd.gz
        elif [ -f "/output/gce/image.tar.gz" ]; then
          echo -e "Found gce image."
          # already compressed.
          buildah manifest add --arch $(arch) --os linux --artifact --artifact-type application/vnd.diskimage.gce.tgz $OUTPUT_IMAGE /output/gce/image.tar.gz
        fi
        buildah manifest push --digestfile image-digest --authfile /.docker/config.json --all $OUTPUT_IMAGE

        # At this point, we have pushed an image index of length 1 to the registry.
        # Next, extract a reference to the image manifest and expose that, throwing away the image index.
        IMAGE_INDEX_DIGEST=$(cat image-digest)
        REPO=${OUTPUT_IMAGE%:*}
        MANIFEST_DIGEST=$(buildah manifest inspect --authfile /.docker/config.json $REPO@$IMAGE_INDEX_DIGEST | jq -r '.manifests[0].digest')

        # Overwrite the image index pullspec tag with the image manifest one
        skopeo copy --authfile /.docker/config.json docker://$REPO@$MANIFEST_DIGEST docker://$OUTPUT_IMAGE

        # Finally, record all that in our results
        echo -n "$OUTPUT_IMAGE" | tee /tekton-results/IMAGE_URL
        echo $MANIFEST_DIGEST | tee /tekton-results/IMAGE_DIGEST
        REMOTESSHEOF


        # make scripts executable and sync them to the cloud VM.
        chmod +x scripts/script-build.sh
        chmod +x scripts/script-push.sh
        rsync -ra scripts "$SSH_HOST:$BUILD_DIR"
        rsync -ra /var/workdir/source/ "$SSH_HOST:$BUILD_DIR/workspaces/source/"

        ssh -v $SSH_ARGS "$SSH_HOST" $BUILD_DIR/scripts/script-build.sh
        rsync -ra "$SSH_HOST:$BUILD_DIR/tekton-results/" "/tekton/results/"

      volumeMounts:
        - mountPath: /ssh
          name: ssh
          readOnly: true
        - mountPath: /entitlement
          name: etc-pki-entitlement

  volumes:
    - emptyDir: {}
      name: workdir
    - emptyDir: {}
      name: varlibcontainers
    - name: ssh
      secret:
        optional: false
        secretName: multi-platform-ssh-$(context.taskRun.name)
    - name: etc-pki-entitlement
      secret:
        optional: true
        secretName: $(params.ENTITLEMENT_SECRET)
