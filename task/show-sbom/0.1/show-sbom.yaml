---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: show-sbom
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
spec:
  description: >-
    Shows the Software Bill of Materials (SBOM) generated for the built image.
  params:
    - name: IMAGE_URL
      description: Fully qualified image name to show SBOM for.
      type: string
    - name: PLATFORM
      description: Specific architecture to display the SBOM for. An example arch would be "linux/amd64". If IMAGE_URL
        refers to a multi-arch image and this parameter is empty, the task will default to use "linux/amd64".
      type: string
      default: "linux/amd64"
    - name: CA_TRUST_CONFIG_MAP_NAME
      type: string
      description: The name of the ConfigMap to read CA bundle data from.
      default: trusted-ca
    - name: CA_TRUST_CONFIG_MAP_KEY
      type: string
      description: The name of the key in the ConfigMap that contains the CA bundle data.
      default: ca-bundle.crt
  steps:
  - name: show-sbom
    image: quay.io/konflux-ci/appstudio-utils:8f9f933d7b0b57e37b96fd34698c92c785cfeadc@sha256:924eb1680b6cda674e902579135a06b2c6683c3cc1082bbdc159a4ce5ea9f4df
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    env:
    - name: IMAGE_URL
      value: $(params.IMAGE_URL)
    - name: PLATFORM
      value: $(params.PLATFORM)
    script: |
      #!/bin/bash

      download_sbom_with_retry() {
        status=-1
        max_try=5
        wait_sec=2

        PLATFORM_ARG="$1"
        for run in $(seq 1 $max_try); do
          status=0
          cosign download sbom $PLATFORM_ARG $IMAGE_URL 2>>err
          status=$?
          if [ "$status" -eq 0 ]; then
            break
          fi
          sleep $wait_sec
        done
        if [ "$status" -ne 0 ]; then
          echo "Failed to get SBOM after ${max_try} tries" >&2
          cat err >&2
        fi
      }

      RAW_OUTPUT=$(skopeo inspect --no-tags --raw docker://${IMAGE_URL})
      if [ "$(jq 'has("manifests")' <<< "$RAW_OUTPUT")" == "true" ] ; then
        # Multi arch
        ARCHES=$(jq -r '.manifests[].platform.architecture' <<< $RAW_OUTPUT)
      else
        ARCHES=""
      fi

      if [ -z "${ARCHES}" ] ; then
        # single arch image
        download_sbom_with_retry ""
      else
        download_sbom_with_retry " --platform=$PLATFORM "
      fi
    volumeMounts:
    - name: trusted-ca
      mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
      subPath: ca-bundle.crt
      readOnly: true
  volumes:
  - name: trusted-ca
    configMap:
      name: $(params.CA_TRUST_CONFIG_MAP_NAME)
      items:
        - key: $(params.CA_TRUST_CONFIG_MAP_KEY)
          path: ca-bundle.crt
      optional: true
