---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: oci-copy-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, appstudio, hacbs
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: oci-artifact
spec:
  description: Given a file in the user's source directory, copy content from
    arbitrary urls into the OCI registry.
  params:
    - name: BEARER_TOKEN_SECRET_NAME
      description: Name of a secret which will be made available to the build
        as an Authorization header. Note, the token will be sent to all servers
        found in the oci-copy.yaml file. If you do not wish to send the token
        to all servers, different taskruns and therefore different oci artifacts
        must be used.
      type: string
      default: ""
    - name: IMAGE
      description: Reference of the image we will push
      type: string
    - name: OCI_COPY_FILE
      description: Path to the oci copy file.
      type: string
      default: ./oci-copy.yaml
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
  results:
    - name: IMAGE_DIGEST
      description: Digest of the artifact just pushed
    - name: IMAGE_URL
      description: Repository where the artifact was pushed
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: workdir
      emptyDir: {}
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: IMAGE
        value: $(params.IMAGE)
      - name: OCI_COPY_FILE
        value: $(params.OCI_COPY_FILE)
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:4e39fb97f4444c2946944482df47b39c5bbc195c54c6560b0647635f553ab23d
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: prepare
      image: quay.io/konflux-ci/yq:latest@sha256:974dea6375ee9df561ffd3baf994db2b61777a71f3bcf0050c5dca91ac9b3430
      workingDir: /var/workdir
      script: |
        set -eu
        set -o pipefail

        oci_copy_file_path="$(pwd)/source/$OCI_COPY_FILE"

        mkdir -p /var/workdir/vars/

        for entry in $(cat $oci_copy_file_path | yq '.artifacts[] | @json | @base64'); do
          entry=$(echo $entry | base64 -d)
          source=$(echo $entry | yq .source)
          filename=$(echo $entry | yq .filename)
          artifact_type=$(echo $entry | yq .type)
          artifact_digest=$(echo $entry | yq .sha256sum)

          echo "declare OCI_SOURCE=${source}" >/var/workdir/vars/$filename
          echo "declare OCI_FILENAME=${filename}" >>/var/workdir/vars/$filename
          echo "declare OCI_ARTIFACT_TYPE=${artifact_type}" >>/var/workdir/vars/$filename
          echo "declare OCI_ARTIFACT_DIGEST=${artifact_digest}" >>/var/workdir/vars/$filename

          echo "Wrote /var/workdir/vars/$filename with contents:"
          cat /var/workdir/vars/$filename
        done
    - name: oci-copy
      image: quay.io/konflux-ci/oras:latest@sha256:04cbd5efbcf1a38944b050e3adbc3071218643f6aa92e95d5d25b173574bca5e
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      env:
        - name: BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: $(params.BEARER_TOKEN_SECRET_NAME)
              optional: true
      script: |
        set -e
        set -o pipefail

        CURL_ARGS=()
        if [ -n "${BEARER_TOKEN}" ]; then
          echo "Found bearer token. Using it for authentication."
          CURL_ARGS+=(-H "Authorization: Bearer ${BEARER_TOKEN}")
        else
          echo "Proceeding with anonymous requests"
        fi

        set -u

        for varfile in /var/workdir/vars/*; do
          echo "Reading $varfile"
          source $varfile

          echo "Downloading $OCI_SOURCE to $OCI_FILENAME"
          curl "${CURL_ARGS[@]}" --fail --silent --show-error --location $OCI_SOURCE -o $OCI_FILENAME

          echo "Confirming that digest of $OCI_FILENAME matches expected $OCI_ARTIFACT_DIGEST"
          echo "$OCI_ARTIFACT_DIGEST $OCI_FILENAME" | sha256sum --check

          echo "Appending to arguments for $OCI_FILENAME of type $OCI_ARTIFACT_TYPE"
          args+=("${OCI_FILENAME}:${OCI_ARTIFACT_TYPE}")
        done

        if [ -z "${args}" ]; then
          echo "No files found. Something is very wrong. Skipping upload."
          exit 1
        fi

        echo "Extracting artifact_type"
        ARTIFACT_TYPE=$(cat "$(pwd)/source/$OCI_COPY_FILE" | yq '.artifact_type')

        echo "Selecting auth for $IMAGE"
        select-oci-auth $IMAGE >auth.json

        echo "Pushing contents to ${IMAGE}"
        oras push --no-tty --registry-config auth.json --artifact-type ${ARTIFACT_TYPE} "${IMAGE}" "${args[@]}"

        IMAGE_INDEX_DIGEST=$(oras resolve --registry-config auth.json "${IMAGE}")
        echo -n "$IMAGE_INDEX_DIGEST" | tee "$(results.IMAGE_DIGEST.path)"
        echo -n "$IMAGE" | tee "$(results.IMAGE_URL.path)"
      computeResources:
        limits:
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: sbom-generate
      image: quay.io/konflux-ci/yq:latest@sha256:974dea6375ee9df561ffd3baf994db2b61777a71f3bcf0050c5dca91ac9b3430
      workingDir: /var/workdir
      script: |
        cat >sbom-cyclonedx.json <<EOL
        {
            "\$schema": "http://cyclonedx.org/schema/bom-1.5.schema.json",
            "bomFormat": "CycloneDX",
            "specVersion": "1.5",
            "version": 1,
            "components": []
        }
        EOL

        for varfile in /var/workdir/vars/*; do
          echo "Reading $varfile"
          source $varfile

          ENCODED_URL=$(echo "${OCI_SOURCE}" | python3 -c 'import sys; import urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip(), safe=":/"))')
          ENCODED_FILENAME=$(echo "${OCI_FILENAME}" | python3 -c 'import sys; import urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip(), safe=":/"))')
          purl="pkg:generic/${ENCODED_FILENAME}?download_url=${ENCODED_URL}&checksum=sha256:${OCI_ARTIFACT_DIGEST}"

          echo "Recording purl $purl"
          yq -oj -i '.components += [ {"purl": "'$purl'", "type": "file", "name": "'$OCI_FILENAME'", "hashes": [{"alg": "SHA-256", "content": "'$OCI_ARTIFACT_DIGEST'"}], "externalReferences": [{"type": "distribution", "url": "'$OCI_SOURCE'"}]} ]' sbom-cyclonedx.json
        done
    - name: upload-sbom
      image: quay.io/redhat-appstudio/cosign:v2.1.1@sha256:c883d6f8d39148f2cea71bff4622d196d89df3e510f36c140c097b932f0dd5d5
      args:
        - attach
        - sbom
        - --sbom
        - sbom-cyclonedx.json
        - --type
        - cyclonedx
        - $(params.IMAGE)
      workingDir: /var/workdir
