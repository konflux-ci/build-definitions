---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: run-script
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: |-
    This task allows to run an script stored on the git repository and stores the resultant directory
    to use it later.
  params:
    - name: enableSymlinkCheck
      description: |
        Check symlinks in the repo. If they're pointing outside of the repo, the build will fail.
      type: string
      default: "true"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: ""
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: SCRIPT_RUNNER_IMAGE
      description: The image to run the script in
      type: string
    - name: SCRIPT
      description: The script to launch
      type: string
    - name: SCRIPT_WORKDIR
      description: The directory to launch the script from
      type: string
      default: /var/workdir/source
    - name: SCRIPT_ARTIFACT_RELATIVE_PATH
      description: The relative path relative to the source directory to store on the SCRIPT_ARTIFACT
      type: string
      default: .
    - name: STORAGE_DRIVER
      description: Storage driver to configure for buildah
      type: string
      default: vfs
    - name: HERMETIC
      description: Determines if build will be executed without network access.
      type: string
      default: "false"
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: caTrustConfigMapKey
      description: The name of the key in the ConfigMap that contains the
        CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: caTrustConfigMapName
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
  results:
    - name: SCRIPT_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
    - name: SCRIPT_RUNNER_IMAGE_REFERENCE
      description: Reference and digest of the image used to run the script. Suitable to pass to buildah ADDITIONAL_BASE_IMAGES
      type: string
    - name: SCRIPT_OUTPUT
      description: A string generated by the script run. This can be used as input to future tasks' parameters.
      type: string
    - name: SCRIPT_OUTPUT_ARRAY
      description: An array of data generated by the script run. This can be used as input to future tasks' parameters.
      type: array
  volumes:
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        name: $(params.caTrustConfigMapName)
        optional: true
    - name: workdir
      emptyDir: {}
    - name: varlibcontainers
      emptyDir: {}
  stepTemplate:
    computeResources:
      limits:
        memory: 4Gi
      requests:
        cpu: "1"
        memory: 1Gi
    env:
      - name: SCRIPT
        value: $(params.SCRIPT)
      - name: HERMETIC
        value: $(params.HERMETIC)
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
      volumeMounts:
        - mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          name: trusted-ca
          readOnly: true
          subPath: ca-bundle.crt
    - name: run-script
      image: quay.io/konflux-ci/buildah-task:latest@sha256:ab0ba3b70f99faa74d2dd737422a965197af4922dec0109113bc535a94db0dfd
      workingDir: /var/workdir
      volumeMounts:
        - mountPath: /mnt/trusted-ca
          name: trusted-ca
          readOnly: true
        - mountPath: /var/lib/containers
          name: varlibcontainers
      env:
        - name: PARAM_ENABLE_SYMLINK_CHECK
          value: $(params.enableSymlinkCheck)
        - name: SCRIPT
          value: $(params.SCRIPT)
        - name: SCRIPT_ARTIFACT_RELATIVE_PATH
          value: $(params.SCRIPT_ARTIFACT_RELATIVE_PATH)
        - name: SCRIPT_WORKDIR
          value: $(params.SCRIPT_WORKDIR)
        - name: SCRIPT_RUNNER_IMAGE
          value: $(params.SCRIPT_RUNNER_IMAGE)
        - name: STORAGE_DRIVER
          value: $(params.STORAGE_DRIVER)
      script: |
        #!/bin/bash
        set -euo pipefail
        ca_bundle=/mnt/trusted-ca/ca-bundle.crt
        if [ -f "$ca_bundle" ]; then
          echo "INFO: Using mounted CA bundle: $ca_bundle"
          cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
          update-ca-trust
        fi

        # Ensure the artifact directory is inside the source directory
        REAL_ARTIFACT_PATH="$(realpath -m "/var/workdir/source/${SCRIPT_ARTIFACT_RELATIVE_PATH}")"
        if [[ "${REAL_ARTIFACT_PATH}" != /var/workdir/source/* ]] && [[ "${REAL_ARTIFACT_PATH}" != /var/workdir/source ]]
        then
          echo "the trusted artifact path is out of the source directory: ${REAL_ARTIFACT_PATH}"
          exit 1
        fi

        # Fixing group permission on /var/lib/containers
        chown root:root /var/lib/containers

        sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

        # Setting new namespace to run buildah - 2^32-2
        echo 'root:1:4294967294' | tee -a /etc/subuid >>/etc/subgid

        UNSHARE_ARGS=()
        if [ "${HERMETIC}" == "true" ]; then
          echo "The script will be executed with network isolation"
          UNSHARE_ARGS+=("--net")
        fi

        # Create the script file
        printf '%s' "$SCRIPT" > /tmp/script.sh
        chmod +x /tmp/script.sh

        mkdir /var/workdir/output
        buildah from --name script-container "$SCRIPT_RUNNER_IMAGE"
        BUILDAH_CMD="buildah run --volume /tmp/script.sh:/tmp/script.sh --volume /var/workdir/source:/var/workdir/source --volume /var/workdir/output:/var/workdir/output --workingdir ${SCRIPT_WORKDIR} --user root:root -- script-container /bin/sh -c 'SCRIPT_OUTPUT=/var/workdir/output/output SCRIPT_OUTPUT_ARRAY=/var/workdir/output/array exec /tmp/script.sh'"
        unshare -Uf "${UNSHARE_ARGS[@]}" --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -w /var/workdir sh -c "${BUILDAH_CMD}"

        IMAGE_REFERENCE=$(buildah inspect script-container | jq -r '.FromImage + "@" + .FromImageDigest')
        echo -n "$IMAGE_REFERENCE" > "$(results.SCRIPT_RUNNER_IMAGE_REFERENCE.path)"

        if [ -f "/var/workdir/output/output" ]; then
          cat /var/workdir/output/output > "$(results.SCRIPT_OUTPUT.path)"
        fi
        if [ -f "/var/workdir/output/array" ]; then
          cat /var/workdir/output/array > "$(results.SCRIPT_OUTPUT_ARRAY.path)"
        fi

        # Ensure there are no symlinks going out of the artifact directory
        check_symlinks() {
          FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=false
          while read -r symlink; do
            target=$(readlink -m "$symlink")
            if ! [[ "$target" =~ ^$REAL_ARTIFACT_PATH ]]; then
              echo "The script output directory contains symlink pointing outside of the directory: $symlink"
              FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=true
            fi
          done < <(find "$REAL_ARTIFACT_PATH" -type l -print)
          if [ "$FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO" = true ]; then
            return 1
          fi
        }

        if [ "${PARAM_ENABLE_SYMLINK_CHECK}" = "true" ]; then
          echo "Running symlink check"
          check_symlinks
        fi

        # buildah requires a root owned source ta, however we don't want to run the script as root
        # fix permissions after running the script.
        chown -R root:root "$REAL_ARTIFACT_PATH"
      securityContext:
        capabilities:
          add:
            - SETFCAP
    - name: create-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
      args:
        - create
        - --store
        - $(params.ociStorage)
        - $(results.SCRIPT_ARTIFACT.path)=/var/workdir/source/$(params.SCRIPT_ARTIFACT_RELATIVE_PATH)
      volumeMounts:
        - mountPath: /var/workdir
          name: workdir
        - mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
          name: trusted-ca
          readOnly: true
          subPath: ca-bundle.crt
      env:
        - name: IMAGE_EXPIRES_AFTER
          value: $(params.ociArtifactExpiresAfter)
      computeResources:
        limits:
          memory: 3Gi
        requests:
          cpu: "1"
          memory: 3Gi
