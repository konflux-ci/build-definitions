---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tkn-bundle-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: tkn-bundle
spec:
  description: Creates and pushes a Tekton bundle containing the specified
    Tekton YAML files.
  params:
    - name: CONTEXT
      description: Path to the directory to use as context.
      type: string
      default: .
    - name: HOME
      description: Value for the HOME environment variable.
      type: string
      default: /tekton/home
    - name: IMAGE
      description: Reference of the image task will produce.
      type: string
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: STEPS_IMAGE
      description: An optional image to configure task steps with in the bundle
      type: string
      default: ""
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built
    - name: IMAGE_REF
      description: Image reference of the built image
    - name: IMAGE_URL
      description: Image repository and tag where the built image was pushed
        with tag only
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: HOME
        value: $(params.HOME)
      - name: TASK_FILE
        value: tekton_task_files
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:52f1391e6f1c472fd10bb838f64fae2ed3320c636f536014978a5ddbdfc6b3af
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: modify-task-files
      image: quay.io/konflux-ci/konflux-test:latest@sha256:2224fabdb0a28a415d4af4c58ae53d7c4c53c83c315f12e07d1d7f48a80bfa70
      workingDir: /var/workdir/source
      env:
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: STEPS_IMAGE
          value: $(params.STEPS_IMAGE)
      script: |
        #!/bin/env bash
        set -o errexit
        set -o pipefail
        set -o nounset

        # expand '**', and don't return glob expression when no matches found
        shopt -s globstar nullglob

        # read \$CONTEXT as an array split by comma or space into PATHS
        IFS=', ' read -r -a PATHS <<<"$CONTEXT"
        FILES=()
        for path in "${PATHS[@]}"; do
          # keeps current path expanded
          paths=()
          # are we negating the current path
          neg=0
          if [[ "${path}" == \!* ]]; then
            neg=1
            path="${path#\!}"
          fi
          if [[ -d "/var/workdir/source/${path}" ]]; then
            # for directories look for any .yaml or .yml files
            paths+=(
              "/var/workdir/source/${path}"/**/*.yaml
              "/var/workdir/source/${path}"/**/*.yml
            )
          else
            # for files add the file to the collected paths
            paths+=("${path}")
          fi
          if [[ $neg == 0 ]]; then
            # collect current paths to FILES
            FILES+=("${paths[@]}")
          else
            if [[ ${#PATHS[@]} -eq 1 ]]; then
              # single negative path provided, first include everything then
              # subtract the negative elements
              FILES=(
                "/var/workdir/source"/**/*.yaml
                "/var/workdir/source"/**/*.yml
              )
            fi
            for p in "${paths[@]}"; do
              # remove any collected paths from FILES, leaves blank elements in place
              FILES=("${FILES[@]/$p/}")
            done
            # remove blank elements
            TMP=("${FILES[@]}")
            FILES=()
            for p in "${TMP[@]}"; do
              [[ -n "${p}" ]] && FILES+=("${p}")
            done
          fi
        done

        if [[ -n "${STEPS_IMAGE}" ]]; then
          for f in "${FILES[@]}"; do
            yq --in-place --yml-output '(.spec.steps[] | select(has("image")).image) = env.STEPS_IMAGE' "$f"
          done
        fi

        printf "%s\n" "${FILES[@]}" >"${TASK_FILE}"
    - name: build
      image: registry.redhat.io/openshift-pipelines/pipelines-cli-tkn-rhel8:v1.13.1@sha256:575faccd21c06a4f33e39382b9dc17681c60b41ef0e124d2980b75c39909c36a
      workingDir: /var/workdir/source
      env:
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: IMAGE
          value: $(params.IMAGE)
      script: |
        #!/bin/env bash

        set -o errexit
        set -o pipefail
        set -o nounset

        mapfile -t FILES <"${TASK_FILE}"
        [[ ${#FILES[@]} -eq 0 ]] &&
          echo "No YAML files matched by \"$CONTEXT\" in \"/var/workdir/source\", aborting the build" &&
          exit 1
        exec 3>&1

        # shellcheck disable=SC2046
        OUT="$(tkn bundle push "$IMAGE" \
          $(printf ' -f %s' "${FILES[@]}") |
          tee /proc/self/fd/3)"
        echo -n "$IMAGE" >"$(results.IMAGE_URL.path)"
        digest="${OUT#*Pushed Tekton Bundle to *@}"
        echo -n "${digest}" >"$(results.IMAGE_DIGEST.path)"
        echo -n "${IMAGE}@${digest}" >"$(results.IMAGE_REF.path)"

        # cleanup task file
        [[ -f "${TASK_FILE}" ]] && rm -f "${TASK_FILE}"
      securityContext:
        runAsUser: 0
