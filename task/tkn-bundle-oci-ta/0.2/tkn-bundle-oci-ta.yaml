---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tkn-bundle-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: 0.2.1
    build.appstudio.redhat.com/build_type: tkn-bundle
spec:
  description: Creates and pushes a Tekton bundle containing the specified
    Tekton YAML files.
  params:
    - name: CONTEXT
      description: Path to the directory to use as context.
      type: string
      default: .
    - name: HOME
      description: Value for the HOME environment variable.
      type: string
      default: /tekton/home
    - name: IMAGE
      description: Reference of the image task will produce.
      type: string
    - name: REVISION
      description: Revision
      type: string
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: STEPS_IMAGE
      description: An optional image to configure task steps with in the bundle
      type: string
      default: ""
    - name: URL
      description: Source code Git URL
      type: string
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built
    - name: IMAGE_REF
      description: Image reference of the built image
    - name: IMAGE_URL
      description: Image repository and tag where the built image was pushed
        with tag only
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    env:
      - name: HOME
        value: $(params.HOME)
      - name: SOURCE_CODE_DIR
        value: source
      - name: TASK_FILE
        value: tekton_task_files
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/konflux-ci/build-trusted-artifacts:latest@sha256:5dcb1a5e2054d9bb90b52bb98b670edf3ecfcf90cf0cdb8f6970e8a28cd4f260
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: modify-task-files
      image: quay.io/konflux-ci/konflux-test:v1.4.28@sha256:4a5423e125fc28db800421422d9933290dc4b62a22401d74cd3348c03107a5d9
      workingDir: /var/workdir
      env:
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: STEPS_IMAGE
          value: $(params.STEPS_IMAGE)
      script: |
        #!/bin/env bash
        set -o errexit
        set -o pipefail
        set -o nounset

        # expand '**', and don't return glob expression when no matches found
        shopt -s globstar nullglob

        # read \$CONTEXT as an array split by comma or space into PATHS
        IFS=', ' read -r -a PATHS <<<"$CONTEXT"
        FILES=()
        for path in "${PATHS[@]}"; do
          # keeps current path expanded
          paths=()
          # are we negating the current path
          neg=0
          if [[ "${path}" == \!* ]]; then
            neg=1
            path="${path#\!}"
          fi
          if [[ -d "/var/workdir/${SOURCE_CODE_DIR}/${path}" ]]; then
            # for directories look for any .yaml or .yml files
            paths+=(
              "/var/workdir/${SOURCE_CODE_DIR}/${path}"/**/*.yaml
              "/var/workdir/${SOURCE_CODE_DIR}/${path}"/**/*.yml
            )
          else
            # for files add the file to the collected paths
            paths+=("/var/workdir/${SOURCE_CODE_DIR}/${path}")
          fi
          if [[ $neg == 0 ]]; then
            # collect current paths to FILES
            FILES+=("${paths[@]}")
          else
            if [[ ${#PATHS[@]} -eq 1 ]]; then
              # single negative path provided, first include everything then
              # subtract the negative elements
              FILES=(
                "/var/workdir/${SOURCE_CODE_DIR}"/**/*.yaml
                "/var/workdir/${SOURCE_CODE_DIR}"/**/*.yml
              )
            fi
            for p in "${paths[@]}"; do
              # remove any collected paths from FILES, leaves blank elements in place
              FILES=("${FILES[@]/$p/}")
            done
            # remove blank elements
            TMP=("${FILES[@]}")
            FILES=()
            for p in "${TMP[@]}"; do
              [[ -n "${p}" ]] && FILES+=("${p}")
            done
          fi
        done

        if [[ -n "${STEPS_IMAGE}" ]]; then
          for f in "${FILES[@]}"; do
            yq --in-place --yml-output '(.spec.steps[] | select(has("image")).image) = env.STEPS_IMAGE' "$f"
          done
        fi

        printf "%s\n" "${FILES[@]}" >"${TASK_FILE}"
    - name: build
      image: quay.io/konflux-ci/appstudio-utils@sha256:37d8a83ec1ff40445260d519faef2cedd02ca55d3eac3acb01e75ea8420bd731
      workingDir: /var/workdir
      env:
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: IMAGE
          value: $(params.IMAGE)
        - name: URL
          value: $(params.URL)
        - name: REVISION
          value: $(params.REVISION)
      script: |
        #!/bin/env bash

        set -o errexit
        set -o pipefail
        set -o nounset

        LABEL_ACTUAL_TASK_VERSION=app.kubernetes.io/version

        # shellcheck disable=SC2153
        mapfile -t FILES <"${TASK_FILE}"
        [[ ${#FILES[@]} -eq 0 ]] &&
          echo "No YAML files matched by \"$CONTEXT\" in \"/var/workdir/${SOURCE_CODE_DIR}\", aborting the build" &&
          exit 1
        exec 3>&1

        function escape_tkn_bundle_arg() {
          # the arguments to `tkn bundle --annotate` need to be escaped in a curious way
          # see https://github.com/tektoncd/cli/issues/2402 for details

          local arg=$1
          # replace single double-quotes with double double-quotes (this escapes the double-quotes)
          local escaped_arg=${arg//\"/\"\"}
          # wrap the whole thing in double-quotes (this escapes commas)
          printf '"%s"' "$escaped_arg"
        }

        # Check if task is kustomized
        # A task considered to be kustomized when a kustomization file is found in the task dir
        is_kustomized_task() {
          local -r task_dir=$1
          if [[ -f "$task_dir/kustomization.yaml" || -f "$task_dir/kustomization.yml" ]]; then
            return 0
          fi
          return 1
        }

        # Generate a task from the kustomization file
        generate_kustomized_task() {
          local -r task_dir=$1
          local -r prepared_task_file="$task_dir/generated-kustomized-task.yaml"
          kubectl kustomize "$task_dir" >"$prepared_task_file"
          echo "$prepared_task_file"
        }

        # Get task version from task definition rather than the version in the directory path.
        # Arguments: task_file
        # The version is output to stdout.
        get_actual_task_version() {
          local -r task_file=$1
          # Ensure an empty string is output rather than string "null" if the version label is not present
          yq ".metadata.labels.\"${LABEL_ACTUAL_TASK_VERSION}\"" "$task_file" | sed '/null/d' | tr -d '[:space:]'
        }

        # task_dir is where the task definition reside
        # this task run for only one task file, so extracting it from the first element is enough
        task_dir=$(echo "${FILES[0]}" | awk -F'/' '{NF--; print $0}' OFS='/')
        actual_task_version=$(get_actual_task_version "${FILES[0]}")

        if [[ -z "$actual_task_version" ]]; then
          printf "Label %s is not set in task file %s\n" "$LABEL_ACTUAL_TASK_VERSION" "${FILES[0]}" >&2
          exit 1
        fi

        # If task is kustomized, generate it and replace the FILES value with the value of the generated task
        # All other files will be ignored.
        if is_kustomized_task "$task_dir"; then
          echo "Generating a kustomized task from $task_dir"
          FILES=("$(generate_kustomized_task "$task_dir")")
        else
          echo "Task is not Kustomized - continue"
        fi

        # Push migration to registry if there is
        migration_image_digest=
        migration_file_path="${task_dir}/migrations/${actual_task_version}.sh"
        if [[ -f "$migration_file_path" ]]; then
          sha256_checksum=$(sha256sum "$migration_file_path" | cut -d' ' -f1)
          # Migration image tag is in form: migration-<actual task version>-<sha256sum>-<timestamp>
          image_repo=${IMAGE%:*}      # remove tag
          image_repo=${image_repo#*/} # remove registry
          tag_prefix="migration-${actual_task_version}"
          query_params="onlyActiveTags=true&limit=5&filter_tag_name=like:${tag_prefix}-%"
          url="https://quay.io/api/v1/repository/${image_repo}/tag/?${query_params}"
          tags=$(curl --no-progress-meter -L "$url" | jq -r '.tags[] | .name + " " + .manifest_digest')
          while read -r tag_name manifest_digest; do
            if [[ -z "$tag_name" ]]; then
              continue
            fi
            if grep -s "^${tag_prefix}-${sha256_checksum}-[0-9]\+$" <<<"$tag_name"; then
              # In case migration file is pushed more than once occasionally, only pick
              # the last (newest) one
              if [[ -z "$migration_image_digest" ]]; then
                migration_image_digest="$manifest_digest"
              fi
            elif grep -s "^${tag_prefix}-[0-9a-f]\{64\}-[0-9]\+$" <<<"$tag_name"; then
              printf "Modifying an existing migration is not allowed. Migration %s was pushed as image %s" \
                "${migration_file_path##*/}" "$tag_name" >&2
              exit 1
            fi
          done <<<"$tags"
          # There is no migration image yet, push it.
          if [[ -z "$migration_image_digest" ]]; then
            printf "Migration file %s is not found from image repository %s. Push it.\n" \
              "${migration_file_path##*/}" "${IMAGE%:*}" >&2
            auth_file=$(mktemp --suffix="-auth.json")
            trap 'rm -f $auth_file' EXIT ERR
            pushd "${migration_file_path%/*}"
            select-oci-auth "$IMAGE" >"$auth_file"
            tag="${tag_prefix}-${sha256_checksum}-$(date --utc +%s)"
            migration_image="${IMAGE%:*}:${tag}"
            manifest_file=$(mktemp --suffix="-migration-image-manifest.json")
            trap 'rm -f $manifest_file' EXIT ERR
            retry oras push \
              --registry-config "$auth_file" \
              --export-manifest "$manifest_file" \
              --annotation "dev.konflux-ci.task.is-migration=true" \
              "$migration_image" "${migration_file_path##*/}"
            read -r migration_image_digest _ < <(sha256sum "$manifest_file")
            printf "Pushed migration image %s, digest %s\n" "$migration_image" "$migration_image_digest" >&2
            popd
          fi
        fi

        ANNOTATIONS=()
        ANNOTATIONS+=("org.opencontainers.image.source=${URL}")
        ANNOTATIONS+=("org.opencontainers.image.revision=${REVISION}")
        ANNOTATIONS+=("org.opencontainers.image.url=${URL}/tree/${REVISION}/${CONTEXT}")
        ANNOTATIONS+=("org.opencontainers.image.version=${actual_task_version}")

        if [ -f "${task_dir}/README.md" ]; then
          ANNOTATIONS+=("org.opencontainers.image.documentation=${URL}/tree/${REVISION}/${CONTEXT}/README.md")
        fi

        if [ -f "${task_dir}/TROUBLESHOOTING.md" ]; then
          ANNOTATIONS+=("dev.tekton.docs.troubleshooting=${URL}/tree/${REVISION}/${CONTEXT}/TROUBLESHOOTING.md")
        fi

        if [ -f "${task_dir}/USAGE.md" ]; then
          ANNOTATIONS+=("dev.tekton.docs.usage=${URL}/tree/${REVISION}/${CONTEXT}/USAGE.md")
        fi
        description=$(yq '.spec.description' "${FILES[@]}" | sed '/null/d' | tr -d '')
        ANNOTATIONS+=("org.opencontainers.image.description=${description}")

        if [[ -n "$migration_image_digest" ]]; then
          ANNOTATIONS+=("dev.konflux-ci.task.migration=${migration_image_digest}")
        fi

        echo "Added annotations:"
        ANNOTATION_FLAGS=()
        for annotation in "${ANNOTATIONS[@]}"; do
          ANNOTATION_FLAGS+=("--annotate" "$(escape_tkn_bundle_arg "$annotation")")
          echo "    - $annotation"
        done

        echo "Pushing bundle ${IMAGE} to registry"
        # shellcheck disable=SC2046
        if ! OUT="$(retry tkn bundle push "${ANNOTATION_FLAGS[@]}" "$IMAGE" \
          $(printf ' -f %s' "${FILES[@]}") |
          tee /proc/self/fd/3)"; then
          echo "Failed to push bundle ${IMAGE} to registry"
          exit 1
        fi

        digest="${OUT#*Pushed Tekton Bundle to *@}"
        IMAGE_REF="${IMAGE}@${digest}"

        echo -n "$IMAGE" >"$(results.IMAGE_URL.path)"
        echo -n "${digest}" >"$(results.IMAGE_DIGEST.path)"
        echo -n "${IMAGE_REF}" >"$(results.IMAGE_REF.path)"

        # cleanup task file
        # shellcheck disable=SC2153
        [[ -f "${TASK_FILE}" ]] && rm -f "${TASK_FILE}"
      securityContext:
        runAsUser: 0
