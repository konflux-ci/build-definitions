apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/tags: "sbom, trustification"
  name: upload-sbom-to-trustification
spec:
  description: |-
    Upload an SBOM file to [Trustification] using the [BOMbastic] API.

    [Trustification]: https://github.com/trustification/trustification
    [BOMbastic]: https://github.com/trustification/trustification/tree/main/bombastic

    ## Configuration

    This task requires some configuration and authentication secrets. By default, the task takes
    them from a secret called `trustification-secret` that exists in the same namespace where the
    task runs. You can override the secret name via the `TRUSTIFICATION_SECRET_NAME` param.

    ### trustification-secret

    Required keys:
    - bombastic_api_url: URL of the BOMbastic api host (e.g. https://sbom.trustification.dev)
    - oidc_issuer_url: URL of the OIDC token issuer (e.g. https://sso.trustification.dev/realms/chicken)
    - oidc_client_id: OIDC client ID
    - oidc_client_secret: OIDC client secret

    Optional keys:
    - supported_cyclonedx_version: If the SBOM uses a higher CycloneDX version,
        `syft convert` to the supported version before uploading.
  params:
  - name: SBOMS_DIR
    default: "."
    description: >-
      Directory containing SBOM files. The task will search for CycloneDX JSON
      SBOMs recursively in this directory and upload them all to Trustification.
      The path is relative to the 'sboms' workspace.
    type: string
  - name: HTTP_RETRIES
    default: "3"
    description: "Maximum number of retries for transient HTTP(S) errors"
    type: string
  - name: TRUSTIFICATION_SECRET_NAME
    default: trustification-secret
    description: Name of the Secret containing auth and configuration
    type: string
  - name: FAIL_IF_TRUSTIFICATION_NOT_CONFIGURED
    default: "true"
    description: >-
      Should the task fail if the Secret does not contain the required keys?
      (Set "true" to fail, "false" to skip uploading and exit with success).
    type: string
  workspaces:
  - name: sboms
    description: Directory containing the SBOMs to upload
  volumes:
  - name: trustification-secret
    secret:
      secretName: $(params.TRUSTIFICATION_SECRET_NAME)
      optional: true
  stepTemplate:
    env:
    - name: SBOMS_DIR
      value: $(workspaces.sboms.path)/$(params.SBOMS_DIR)
    - name: HTTP_RETRIES
      value: $(params.HTTP_RETRIES)
    - name: TRUSTIFICATION_SECRET_NAME
      value: $(params.TRUSTIFICATION_SECRET_NAME)
    - name: TRUSTIFICATION_SECRET_PATH
      value: /run/secrets/trustification
    - name: FAIL_IF_TRUSTIFICATION_NOT_CONFIGURED
      value: $(params.FAIL_IF_TRUSTIFICATION_NOT_CONFIGURED)
    - name: WORKDIR
      value: /tekton/home
    volumeMounts:
    - name: trustification-secret
      mountPath: /run/secrets/trustification
  steps:
  - name: gather-sboms
    image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
    script: |
      #!/usr/bin/env bash
      set -o errexit -o nounset -o pipefail

      version_lesser_equal() {
        local first
        first="$(printf "%s\n%s" "$1" "$2" | sort --version-sort | head -n 1)"
        [ "$1" = "$first" ]
      }

      if [[ -f "$TRUSTIFICATION_SECRET_PATH/supported_cyclonedx_version" ]]; then
        supported_version="$(cat "$TRUSTIFICATION_SECRET_PATH/supported_cyclonedx_version")"
      else
        echo "The '$TRUSTIFICATION_SECRET_NAME' secret does not set supported_cyclonedx_version, will not check SBOM versions"
        supported_version=""
      fi

      echo "Looking for CycloneDX SBOMs in $SBOMS_DIR"

      find "$SBOMS_DIR" -type f | while read -r filepath; do
        file_relpath=$(realpath "$filepath" --relative-base="$SBOMS_DIR")
        if ! jq empty "$filepath" 2>/dev/null; then
          echo "$file_relpath: not JSON"
          continue
        fi

        if ! jq -e '.bomFormat == "CycloneDX"' "$filepath" >/dev/null; then
          echo "$file_relpath: not a CycloneDX SBOM"
          continue
        fi

        echo "Found CycloneDX SBOM: $file_relpath"
        # The 'id' of each SBOM is checksum of the original content, before (possibly)
        # downgrading the CycloneDX version. The conversion always updates some metadata
        # (timestamp, UUID), changing the checksum. To avoid duplication, use the original
        # checksum.
        sbom_id="sha256:$(sha256sum "$filepath" | cut -d ' ' -f 1)"

        # Symlink the discovered SBOMS to ${WORKDIR}/${sbom_id}.json so that subsequent steps
        # don't have to look for them again.
        sbom_path="$WORKDIR/$sbom_id.json"
        ln -s "$(realpath "$filepath")" "$sbom_path"

        if [[ -n "$supported_version" ]]; then
          sbom_version="$(jq -r ".specVersion" "$sbom_path")"

          if version_lesser_equal "$sbom_version" "$supported_version"; then
            echo "SBOM version ($sbom_version) is supported (<= $supported_version), will not convert"
          else
            echo "SBOM version ($sbom_version) is not supported, will convert to $supported_version"
            printf "%s" "$supported_version" > "${sbom_path}.convert_to_version"
          fi
        fi
      done

      echo "Found $(find "$WORKDIR" -name "*.json" | wc -l) CycloneDX SBOMs"

  # Needs syft, which is in a different image => has to be a separate step
  - name: convert-sboms-if-needed
    image: registry.redhat.io/rh-syft-tech-preview/syft-rhel9:1.0.1@sha256:27c268d678103a27b6964c2cd5169040941b7304d0078f9727789ffb8ffba370
    script: |
      #!/usr/bin/env bash
      set -o errexit -o nounset -o pipefail

      # Return zero matches when a glob doesn't match rather than returning the glob itself
      shopt -s nullglob

      for sbom_path in "$WORKDIR"/*.json; do
        conversion_attr="${sbom_path}.convert_to_version"

        if [[ -f "$conversion_attr" ]]; then
          cdx_version="$(cat "$conversion_attr")"
          original_sbom_path="$(realpath "$sbom_path")"
          original_sbom_relpath="$(realpath "$sbom_path" --relative-base="$SBOMS_DIR")"

          echo "Converting $original_sbom_relpath to CycloneDX $cdx_version"
          syft convert "$original_sbom_path" -o "cyclonedx-json@${cdx_version}=${sbom_path}.supported_version"
        else
          # Just duplicate the symlink, the original SBOM already has a supported CDX version
          cp --no-dereference "$sbom_path" "${sbom_path}.supported_version"
        fi
      done

  - name: upload-sboms
    image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
    script: |
      #!/usr/bin/env bash
      set -o errexit -o nounset -o pipefail

      shopt -s nullglob
      sboms_to_upload=("$WORKDIR"/*.json)

      if [[ "${#sboms_to_upload[@]}" -eq 0 ]]; then
        echo "No SBOMs to upload"
        exit 0
      fi

      read_required_secret_key() {
        local key="$1"
        if [[ -f "$TRUSTIFICATION_SECRET_PATH/$key" ]]; then
          cat "$TRUSTIFICATION_SECRET_PATH/$key"
        else
          echo "Missing configuration: $key" >&2
          echo "Does the '$TRUSTIFICATION_SECRET_NAME' secret exist in your namespace and contain the required keys?" >&2
          echo "Refer to the description of this Task for details." >&2

          if [[ "$FAIL_IF_TRUSTIFICATION_NOT_CONFIGURED" == "false" ]]; then
            echo "WARNING: FAIL_IF_TRUSTIFICATION_NOT_CONFIGURED=false; exiting with success" >&2
            exit 0
          else
            exit 1
          fi
        fi
      }

      bombastic_api_url="$(read_required_secret_key bombastic_api_url)"
      oidc_issuer_url="$(read_required_secret_key oidc_issuer_url)"
      oidc_client_id="$(read_required_secret_key oidc_client_id)"
      oidc_client_secret="$(read_required_secret_key oidc_client_secret)"

      curl_opts=(--silent --show-error --fail-with-body --retry "$HTTP_RETRIES")

      # https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
      openid_configuration_url="${oidc_issuer_url%/}/.well-known/openid-configuration"
      echo "Getting OIDC issuer configuration from $openid_configuration_url"
      # https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
      token_endpoint="$(curl "${curl_opts[@]}" "$openid_configuration_url" | jq -r .token_endpoint)"

      for sbom_path in "${sboms_to_upload[@]}"; do
        original_sbom_relpath="$(realpath "$sbom_path" --relative-base="$SBOMS_DIR")"
        echo
        echo "--- Processing $original_sbom_relpath ---"

        echo "Getting OIDC token from $token_endpoint"
        token_response="$(
          curl "${curl_opts[@]}" \
            -u "${oidc_client_id}:${oidc_client_secret}" \
            -d "grant_type=client_credentials" \
            "$token_endpoint"
        )"
        # https://www.rfc-editor.org/rfc/rfc6749.html#section-5.1
        access_token="$(jq -r .access_token <<< "$token_response")"
        token_type="$(jq -r .token_type <<< "$token_response")"
        expires_in="$(jq -r ".expires_in // empty" <<< "$token_response")"

        retry_max_time=0  # no limit
        if [[ -n "$expires_in" ]]; then
          retry_max_time="$expires_in"
        fi

        # This sbom_id is the one created in the gather-sboms step - sha256:${checksum}
        sbom_id="$(basename -s .json "$sbom_path")"
        supported_version_of_sbom="${sbom_path}.supported_version"

        echo "Uploading SBOM to $bombastic_api_url (with id=$sbom_id)"
        # https://docs.trustification.dev/trustification/user/bombastic.html#publishing-an-sbom-doc
        curl "${curl_opts[@]}" \
          --retry-max-time "$retry_max_time" \
          -H "authorization: $token_type $access_token" \
          -H "transfer-encoding: chunked" \
          -H "content-type: application/json" \
          --data "@$supported_version_of_sbom" \
          "$bombastic_api_url/api/v1/sbom?id=$sbom_id"
      done
