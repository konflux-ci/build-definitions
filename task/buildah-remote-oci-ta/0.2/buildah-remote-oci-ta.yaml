apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  creationTimestamp: null
  labels:
    app.kubernetes.io/version: "0.2"
    build.appstudio.redhat.com/build_type: docker
  name: buildah-remote-oci-ta
spec:
  description: |-
    Buildah task builds source code into a container image and pushes the image into container registry using buildah tool.
    In addition it generates a SBOM file, injects the SBOM file into final container image and pushes the SBOM file as separate image using cosign tool.
    When [Java dependency rebuild](https://redhat-appstudio.github.io/docs.stonesoup.io/Documentation/main/cli/proc_enabled_java_dependencies.html) is enabled it triggers rebuilds of Java artifacts.
    When prefetch-dependencies task was activated it is using its artifacts to run build in hermetic environment.
  params:
  - default: activation-key
    description: Name of secret which contains subscription activation key
    name: ACTIVATION_KEY
    type: string
  - default: does-not-exist
    description: Name of a secret which will be made available to the build with 'buildah
      build --secret' at /run/secrets/$ADDITIONAL_SECRET
    name: ADDITIONAL_SECRET
    type: string
  - default: ""
    description: Comma separated list of extra capabilities to add when running 'buildah
      build'
    name: ADD_CAPABILITIES
    type: string
  - default: []
    description: Array of --build-arg values ("arg=value" strings)
    name: BUILD_ARGS
    type: array
  - default: ""
    description: Path to a file with build arguments, see https://www.mankier.com/1/buildah-build#--build-arg-file
    name: BUILD_ARGS_FILE
    type: string
  - default: ""
    description: The Trusted Artifact URI pointing to the artifact with the prefetched
      dependencies.
    name: CACHI2_ARTIFACT
    type: string
  - default: ""
    description: The image is built from this commit.
    name: COMMIT_SHA
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: etc-pki-entitlement
    description: Name of secret which contains the entitlement certificates
    name: ENTITLEMENT_SECRET
    type: string
  - default: "false"
    description: Determines if build will be executed without network access.
    name: HERMETIC
    type: string
  - description: Reference of the image buildah will produce.
    name: IMAGE
    type: string
  - default: ""
    description: Delete image tag after specified time. Empty means to keep the image
      tag. Time values could be something like 1h, 2d, 3w for hours, days, and weeks,
      respectively.
    name: IMAGE_EXPIRES_AFTER
    type: string
  - default: ""
    description: In case it is not empty, the prefetched content should be made available
      to the build.
    name: PREFETCH_INPUT
    type: string
  - default: "true"
    description: Whether to skip stages in Containerfile that seem unused by subsequent
      stages
    name: SKIP_UNUSED_STAGES
    type: string
  - description: The Trusted Artifact URI pointing to the artifact with the application
      source code.
    name: SOURCE_ARTIFACT
    type: string
  - default: "false"
    description: Squash all new and previous layers added as a part of this build,
      as per --squash
    name: SQUASH
    type: string
  - default: vfs
    description: Storage driver to configure for buildah
    name: STORAGE_DRIVER
    type: string
  - default: ""
    description: Target stage in Dockerfile to build. If not specified, the Dockerfile
      is processed entirely to (and including) its last stage.
    name: TARGET_STAGE
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - default: fetched.repos.d
    description: Path in source workspace where dynamically-fetched repos are present
    name: YUM_REPOS_D_FETCHED
  - default: repos.d
    description: Path in the git repository in which yum repository files are stored
    name: YUM_REPOS_D_SRC
  - default: /etc/yum.repos.d
    description: Target path on the container in which yum repository files should
      be made available
    name: YUM_REPOS_D_TARGET
  - default: ca-bundle.crt
    description: The name of the key in the ConfigMap that contains the CA bundle
      data.
    name: caTrustConfigMapKey
    type: string
  - default: trusted-ca
    description: The name of the ConfigMap to read CA bundle data from.
    name: caTrustConfigMapName
    type: string
  - description: The platform to build on
    name: PLATFORM
    type: string
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image reference of the built image
    name: IMAGE_REF
  - description: Image repository where the built image was pushed
    name: IMAGE_URL
  - description: The Java dependencies that came from community sources such as Maven
      central.
    name: JAVA_COMMUNITY_DEPENDENCIES
  - description: Reference of SBOM blob digest to enable digest-based verification
      from provenance
    name: SBOM_BLOB_URL
    type: string
  - description: The counting of Java components by publisher in JSON format
    name: SBOM_JAVA_COMPONENTS_COUNT
    type: string
  stepTemplate:
    computeResources: {}
    env:
    - name: ACTIVATION_KEY
      value: $(params.ACTIVATION_KEY)
    - name: ADDITIONAL_SECRET
      value: $(params.ADDITIONAL_SECRET)
    - name: ADD_CAPABILITIES
      value: $(params.ADD_CAPABILITIES)
    - name: BUILDAH_FORMAT
      value: oci
    - name: BUILD_ARGS_FILE
      value: $(params.BUILD_ARGS_FILE)
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: DOCKERFILE
      value: $(params.DOCKERFILE)
    - name: ENTITLEMENT_SECRET
      value: $(params.ENTITLEMENT_SECRET)
    - name: HERMETIC
      value: $(params.HERMETIC)
    - name: IMAGE
      value: $(params.IMAGE)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.IMAGE_EXPIRES_AFTER)
    - name: SKIP_UNUSED_STAGES
      value: $(params.SKIP_UNUSED_STAGES)
    - name: SQUASH
      value: $(params.SQUASH)
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: TARGET_STAGE
      value: $(params.TARGET_STAGE)
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: YUM_REPOS_D_FETCHED
      value: $(params.YUM_REPOS_D_FETCHED)
    - name: YUM_REPOS_D_SRC
      value: $(params.YUM_REPOS_D_SRC)
    - name: YUM_REPOS_D_TARGET
      value: $(params.YUM_REPOS_D_TARGET)
    - name: BUILDER_IMAGE
      value: quay.io/konflux-ci/buildah:latest@sha256:7cb5a35b7fe44e397fbf3b834f3bd8dcd9403a7c0a0b51469e6ec75b107d0846
    - name: PLATFORM
      value: $(params.PLATFORM)
    volumeMounts:
    - mountPath: /shared
      name: shared
    - mountPath: /var/workdir
      name: workdir
  steps:
  - args:
    - use
    - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - $(params.CACHI2_ARTIFACT)=/var/workdir/cachi2
    computeResources: {}
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:601e0999ae062e5ee666538d651af7893a75e415b7952c85caa8a4452501029a
    name: use-trusted-artifact
  - args:
    - $(params.BUILD_ARGS[*])
    computeResources:
      limits:
        cpu: "4"
        memory: 8Gi
      requests:
        cpu: "1"
        memory: 2Gi
    env:
    - name: COMMIT_SHA
      value: $(params.COMMIT_SHA)
    image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
    name: build
    script: |-
      #!/bin/bash
      set -e
      set -o verbose
      mkdir -p ~/.ssh
      if [ -e "/ssh/error" ]; then
        #no server could be provisioned
        cat /ssh/error
        exit 1
      elif [ -e "/ssh/otp" ]; then
       curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
       echo "" >> ~/.ssh/id_rsa
      else
        cp /ssh/id_rsa ~/.ssh
      fi
      chmod 0400 ~/.ssh/id_rsa
      export SSH_HOST=$(cat /ssh/host)
      export BUILD_DIR=$(cat /ssh/user-dir)
      export SSH_ARGS="-o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10"
      mkdir -p scripts
      echo "$BUILD_DIR"
      ssh $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/volumes"

      PORT_FORWARD=""
      PODMAN_PORT_FORWARD=""
      if [ -n "$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR" ] ; then
      PORT_FORWARD=" -L 80:$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR:80"
      PODMAN_PORT_FORWARD=" -e JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR=localhost"
      fi
      if [[ "${IMAGE##*-}" != "${PLATFORM##*/}" ]]; then
        export IMAGE="${IMAGE}-${PLATFORM##*/}"
      fi

      rsync -ra /shared/ "$SSH_HOST:$BUILD_DIR/volumes/shared/"
      rsync -ra /var/workdir/ "$SSH_HOST:$BUILD_DIR/volumes/workdir/"
      rsync -ra /entitlement/ "$SSH_HOST:$BUILD_DIR/volumes/etc-pki-entitlement/"
      rsync -ra /activation-key/ "$SSH_HOST:$BUILD_DIR/volumes/activation-key/"
      rsync -ra /additional-secret/ "$SSH_HOST:$BUILD_DIR/volumes/additional-secret/"
      rsync -ra /mnt/trusted-ca/ "$SSH_HOST:$BUILD_DIR/volumes/trusted-ca/"
      rsync -ra "$HOME/.docker/" "$SSH_HOST:$BUILD_DIR/.docker/"
      rsync -ra "/tekton/results/" "$SSH_HOST:$BUILD_DIR/tekton-results/"
      cat >scripts/script-build.sh <<'REMOTESSHEOF'
      #!/bin/bash
      set -e
      cd /var/workdir
      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      SOURCE_CODE_DIR=source
      if [ -e "$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE" ]; then
        dockerfile_path="$(pwd)/$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE"
      elif [ -e "$SOURCE_CODE_DIR/$DOCKERFILE" ]; then
        dockerfile_path="$(pwd)/$SOURCE_CODE_DIR/$DOCKERFILE"
      elif echo "$DOCKERFILE" | grep -q "^https\?://"; then
        echo "Fetch Dockerfile from $DOCKERFILE"
        dockerfile_path=$(mktemp --suffix=-Dockerfile)
        http_code=$(curl -s -L -w "%{http_code}" --output "$dockerfile_path" "$DOCKERFILE")
        if [ $http_code != 200 ]; then
          echo "No Dockerfile is fetched. Server responds $http_code"
          exit 1
        fi
        http_code=$(curl -s -L -w "%{http_code}" --output "$dockerfile_path.dockerignore.tmp" "$DOCKERFILE.dockerignore")
        if [ $http_code = 200 ]; then
          echo "Fetched .dockerignore from $DOCKERFILE.dockerignore"
          mv "$dockerfile_path.dockerignore.tmp" $SOURCE_CODE_DIR/$CONTEXT/.dockerignore
        fi
      else
        echo "Cannot find Dockerfile $DOCKERFILE"
        exit 1
      fi
      if [ -n "$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR" ] && grep -q '^\s*RUN \(./\)\?mvn' "$dockerfile_path"; then
        sed -i -e "s|^\s*RUN \(\(./\)\?mvn\)\(.*\)|RUN echo \"<settings><mirrors><mirror><id>mirror.default</id><url>http://$JVM_BUILD_WORKSPACE_ARTIFACT_CACHE_PORT_80_TCP_ADDR/v1/cache/default/0/</url><mirrorOf>*</mirrorOf></mirror></mirrors></settings>\" > /tmp/settings.yaml; \1 -s /tmp/settings.yaml \3|g" "$dockerfile_path"
        touch /var/lib/containers/java
      fi

      # Fixing group permission on /var/lib/containers
      chown root:root /var/lib/containers

      sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

      # Setting new namespace to run buildah - 2^32-2
      echo 'root:1:4294967294' | tee -a /etc/subuid >>/etc/subgid

      BUILDAH_ARGS=()

      BASE_IMAGES=$(grep -i '^\s*FROM' "$dockerfile_path" | sed 's/--platform=\S*//' | awk '{print $2}' | (grep -v ^oci-archive: || true))
      if [ "${HERMETIC}" == "true" ]; then
        BUILDAH_ARGS+=("--pull=never")
        UNSHARE_ARGS="--net"
        for image in $BASE_IMAGES; do
          if [ "${image}" != "scratch" ]; then
            unshare -Ufp --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -- buildah pull $image
          fi
        done
        echo "Build will be executed with network isolation"
      fi

      if [ -n "${TARGET_STAGE}" ]; then
        BUILDAH_ARGS+=("--target=${TARGET_STAGE}")
      fi

      if [ -n "${BUILD_ARGS_FILE}" ]; then
        BUILDAH_ARGS+=("--build-arg-file=$(pwd)/$SOURCE_CODE_DIR/${BUILD_ARGS_FILE}")
      fi

      for build_arg in "$@"; do
        BUILDAH_ARGS+=("--build-arg=$build_arg")
      done

      if [ -n "${ADD_CAPABILITIES}" ]; then
        BUILDAH_ARGS+=("--cap-add=${ADD_CAPABILITIES}")
      fi

      if [ "${SQUASH}" == "true" ]; then
        BUILDAH_ARGS+=("--squash")
      fi

      if [ "${SKIP_UNUSED_STAGES}" != "true" ]; then
        BUILDAH_ARGS+=("--skip-unused-stages=false")
      fi

      if [ -f "/var/workdir/cachi2/cachi2.env" ]; then
        cp -r "/var/workdir/cachi2" /tmp/
        chmod -R go+rwX /tmp/cachi2
        VOLUME_MOUNTS="--volume /tmp/cachi2:/cachi2"
        # Read in the whole file (https://unix.stackexchange.com/questions/533277), then
        # for each RUN ... line insert the cachi2.env command *after* any options like --mount
        sed -E -i \
            -e 'H;1h;$!d;x' \
            -e 's@^\s*(run((\s|\\\n)+-\S+)*(\s|\\\n)+)@\1. /cachi2/cachi2.env \&\& \\\n    @igM' \
            "$dockerfile_path"
        echo "Prefetched content will be made available"

        prefetched_repo_for_my_arch="/tmp/cachi2/output/deps/rpm/$(uname -m)/repos.d/cachi2.repo"
        if [ -f "$prefetched_repo_for_my_arch" ]; then
          echo "Adding $prefetched_repo_for_my_arch to $YUM_REPOS_D_FETCHED"
          mkdir -p "$YUM_REPOS_D_FETCHED"
          cp --no-clobber "$prefetched_repo_for_my_arch" "$YUM_REPOS_D_FETCHED"
        fi
      fi

      # if yum repofiles stored in git, copy them to mount point outside the source dir
      if [ -d "${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}" ]; then
        mkdir -p ${YUM_REPOS_D_FETCHED}
        cp -r ${SOURCE_CODE_DIR}/${YUM_REPOS_D_SRC}/* ${YUM_REPOS_D_FETCHED}
      fi

      # if anything in the repofiles mount point (either fetched or from git), mount it
      if [ -d "${YUM_REPOS_D_FETCHED}" ]; then
        chmod -R go+rwX ${YUM_REPOS_D_FETCHED}
        mount_point=$(realpath ${YUM_REPOS_D_FETCHED})
        VOLUME_MOUNTS="${VOLUME_MOUNTS} --volume ${mount_point}:${YUM_REPOS_D_TARGET}"
      fi

      LABELS=(
        "--label" "build-date=$(date -u +'%Y-%m-%dT%H:%M:%S')"
        "--label" "architecture=$(uname -m)"
        "--label" "vcs-type=git"
      )
      [ -n "$COMMIT_SHA" ] && LABELS+=("--label" "vcs-ref=$COMMIT_SHA")
      [ -n "$IMAGE_EXPIRES_AFTER" ] && LABELS+=("--label" "quay.expires-after=$IMAGE_EXPIRES_AFTER")

      ACTIVATION_KEY_PATH="/activation-key"
      ENTITLEMENT_PATH="/entitlement"

      # do not enable activation key and entitlement at same time. If both vars are provided, prefer activation key.
      # when activation keys are used an empty directory on shared emptydir volume to "/etc/pki/entitlement" to prevent certificates from being included in the produced container
      # To use activation key file 'org' must exist, which means the key 'org' must exist in the key/value secret

      if [ -e /activation-key/org ]; then
        cp -r --preserve=mode "$ACTIVATION_KEY_PATH" /tmp/activation-key
        mkdir /shared/rhsm-tmp
        VOLUME_MOUNTS="${VOLUME_MOUNTS} --volume /tmp/activation-key:/activation-key -v /shared/rhsm-tmp:/etc/pki/entitlement:Z"
        echo "Adding activation key to the build"

      elif find /entitlement -name "*.pem" >>null; then
        cp -r --preserve=mode "$ENTITLEMENT_PATH" /tmp/entitlement
        VOLUME_MOUNTS="${VOLUME_MOUNTS} --volume /tmp/entitlement:/etc/pki/entitlement"
        echo "Adding the entitlement to the build"
      fi

      ADDITIONAL_SECRET_PATH="/additional-secret"
      ADDITIONAL_SECRET_TMP="/tmp/additional-secret"
      if [ -d "$ADDITIONAL_SECRET_PATH" ]; then
        cp -r --preserve=mode -L "$ADDITIONAL_SECRET_PATH" $ADDITIONAL_SECRET_TMP
        while read -r filename; do
          echo "Adding the secret ${ADDITIONAL_SECRET}/${filename} to the build, available at /run/secrets/${ADDITIONAL_SECRET}/${filename}"
          BUILDAH_ARGS+=("--secret=id=${ADDITIONAL_SECRET}/${filename},src=$ADDITIONAL_SECRET_TMP/${filename}")
        done < <(find $ADDITIONAL_SECRET_TMP -maxdepth 1 -type f -exec basename {} \;)
      fi

      unshare -Uf $UNSHARE_ARGS --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -w ${SOURCE_CODE_DIR}/$CONTEXT -- buildah build \
        $VOLUME_MOUNTS \
        "${BUILDAH_ARGS[@]}" \
        "${LABELS[@]}" \
        --tls-verify=$TLSVERIFY --no-cache \
        --ulimit nofile=4096:4096 \
        -f "$dockerfile_path" -t $IMAGE .

      container=$(buildah from --pull-never $IMAGE)
      buildah mount $container | tee /shared/container_path
      echo $container >/shared/container_name

      # Save the SBOM produced by Cachi2 so it can be merged into the final SBOM later
      if [ -f "/tmp/cachi2/output/bom.json" ]; then
        cp /tmp/cachi2/output/bom.json ./sbom-cachi2.json
      fi

      touch /shared/base_images_digests
      for image in $BASE_IMAGES; do
        if [ "${image}" != "scratch" ]; then
          buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' --filter reference="$image" >>/shared/base_images_digests
        fi
      done

      # Needed to generate base images SBOM
      echo "$BASE_IMAGES" >/shared/base_images_from_dockerfile

      buildah push "$IMAGE" oci:rhtap-final-image
      REMOTESSHEOF
      chmod +x scripts/script-build.sh
      rsync -ra scripts "$SSH_HOST:$BUILD_DIR"
      ssh $SSH_ARGS "$SSH_HOST" $PORT_FORWARD podman  run $PODMAN_PORT_FORWARD \
       --tmpfs /run/secrets \
       -e ACTIVATION_KEY="$ACTIVATION_KEY" \
       -e ADDITIONAL_SECRET="$ADDITIONAL_SECRET" \
       -e ADD_CAPABILITIES="$ADD_CAPABILITIES" \
       -e BUILDAH_FORMAT="$BUILDAH_FORMAT" \
       -e BUILD_ARGS_FILE="$BUILD_ARGS_FILE" \
       -e CONTEXT="$CONTEXT" \
       -e DOCKERFILE="$DOCKERFILE" \
       -e ENTITLEMENT_SECRET="$ENTITLEMENT_SECRET" \
       -e HERMETIC="$HERMETIC" \
       -e IMAGE="$IMAGE" \
       -e IMAGE_EXPIRES_AFTER="$IMAGE_EXPIRES_AFTER" \
       -e SKIP_UNUSED_STAGES="$SKIP_UNUSED_STAGES" \
       -e SQUASH="$SQUASH" \
       -e STORAGE_DRIVER="$STORAGE_DRIVER" \
       -e TARGET_STAGE="$TARGET_STAGE" \
       -e TLSVERIFY="$TLSVERIFY" \
       -e YUM_REPOS_D_FETCHED="$YUM_REPOS_D_FETCHED" \
       -e YUM_REPOS_D_SRC="$YUM_REPOS_D_SRC" \
       -e YUM_REPOS_D_TARGET="$YUM_REPOS_D_TARGET" \
       -e COMMIT_SHA="$COMMIT_SHA" \
       -v "$BUILD_DIR/volumes/shared:/shared:Z" \
       -v "$BUILD_DIR/volumes/workdir:/var/workdir:Z" \
       -v "$BUILD_DIR/volumes/etc-pki-entitlement:/entitlement:Z" \
       -v "$BUILD_DIR/volumes/activation-key:/activation-key:Z" \
       -v "$BUILD_DIR/volumes/additional-secret:/additional-secret:Z" \
       -v "$BUILD_DIR/volumes/trusted-ca:/mnt/trusted-ca:Z" \
       -v "$BUILD_DIR/.docker/:/root/.docker:Z" \
       -v "$BUILD_DIR/tekton-results/:/tekton/results:Z" \
       -v $BUILD_DIR/scripts:/script:Z \
      --user=0  --rm  "$BUILDER_IMAGE" /script/script-build.sh
      rsync -ra "$SSH_HOST:$BUILD_DIR/volumes/shared/" /shared/
      rsync -ra "$SSH_HOST:$BUILD_DIR/volumes/workdir/" /var/workdir/
      rsync -ra "$SSH_HOST:$BUILD_DIR/tekton-results/" "/tekton/results/"
      buildah pull oci:rhtap-final-image
      buildah images
      buildah tag localhost/rhtap-final-image "$IMAGE"
      container=$(buildah from --pull-never "$IMAGE")
      buildah mount "$container" | tee /shared/container_path
      echo $container > /shared/container_name
    securityContext:
      capabilities:
        add:
        - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /entitlement
      name: etc-pki-entitlement
    - mountPath: /activation-key
      name: activation-key
    - mountPath: /additional-secret
      name: additional-secret
    - mountPath: /mnt/trusted-ca
      name: trusted-ca
      readOnly: true
    - mountPath: /ssh
      name: ssh
      readOnly: true
    workingDir: /var/workdir
  - computeResources:
      limits:
        cpu: "2"
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 1Gi
    image: quay.io/redhat-appstudio/syft:v0.105.1@sha256:1910b829997650c696881e5fc2fc654ddf3184c27edb1b2024e9cb2ba51ac431
    name: sbom-syft-generate
    script: |
      #!/bin/bash
      set -e
      if [[ "${IMAGE##*-}" != "${PLATFORM##*/}" ]]; then
        export IMAGE="${IMAGE}-${PLATFORM##*/}"
      fi
      echo "Running syft on the source directory"
      syft dir:/var/workdir/source --output cyclonedx-json=/var/workdir/sbom-source.json
      find $(cat /shared/container_path) -xtype l -delete
      echo "Running syft on the image filesystem"
      syft dir:$(cat /shared/container_path) --output cyclonedx-json=/var/workdir/sbom-image.json
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /shared
      name: shared
    workingDir: /var/workdir/source
  - computeResources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    image: quay.io/redhat-appstudio/hacbs-jvm-build-request-processor:127ee0c223a2b56a9bd20a6f2eaeed3bd6015f77
    name: analyse-dependencies-java-sbom
    script: |
      #!/bin/bash
      set -e
      if [[ "${IMAGE##*-}" != "${PLATFORM##*/}" ]]; then
        export IMAGE="${IMAGE}-${PLATFORM##*/}"
      fi
      if [ -f /var/lib/containers/java ]; then
        /opt/jboss/container/java/run/run-java.sh analyse-dependencies path $(cat /shared/container_path) -s /var/workdir/sbom-image.json --task-run-name $(context.taskRun.name) --publishers $(results.SBOM_JAVA_COMPONENTS_COUNT.path)
        sed -i 's/^/ /' $(results.SBOM_JAVA_COMPONENTS_COUNT.path) # Workaround for SRVKP-2875
      else
        touch $(results.JAVA_COMMUNITY_DEPENDENCIES.path)
      fi
    securityContext:
      runAsUser: 0
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /shared
      name: shared
  - computeResources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    image: registry.access.redhat.com/ubi9/python-39:1-192.1722518946@sha256:0176b477075984d5a502253f951d2502f0763c551275f9585ac515b9f241d73d
    name: merge-syft-sboms
    script: |
      #!/bin/python3
      import json

      # load SBOMs
      with open("./sbom-image.json") as f:
        image_sbom = json.load(f)

      with open("./sbom-source.json") as f:
        source_sbom = json.load(f)

      # fetch unique components from available SBOMs
      def get_identifier(component):
        return component["name"] + '@' + component.get("version", "")

      image_sbom_components = image_sbom.setdefault("components", [])
      existing_components = [get_identifier(component) for component in image_sbom_components]

      source_sbom_components = source_sbom.get("components", [])
      for component in source_sbom_components:
        if get_identifier(component) not in existing_components:
          image_sbom_components.append(component)
          existing_components.append(get_identifier(component))

      image_sbom_components.sort(key=lambda c: get_identifier(c))

      # write the CycloneDX unified SBOM
      with open("./sbom-cyclonedx.json", "w") as f:
        json.dump(image_sbom, f, indent=4)
    securityContext:
      runAsUser: 0
    workingDir: /var/workdir
  - computeResources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    image: quay.io/redhat-appstudio/cachi2:0.9.1@sha256:df67f9e063b544a8c49a271359377fed560562615e0278f6d0b9a3485f3f8fad
    name: merge-cachi2-sbom
    script: |
      #!/bin/bash
      set -e
      if [[ "${IMAGE##*-}" != "${PLATFORM##*/}" ]]; then
        export IMAGE="${IMAGE}-${PLATFORM##*/}"
      fi
      if [ -f "sbom-cachi2.json" ]; then
        echo "Merging contents of sbom-cachi2.json into sbom-cyclonedx.json"
        merge_syft_sbom sbom-cachi2.json sbom-cyclonedx.json >sbom-temp.json
        mv sbom-temp.json sbom-cyclonedx.json
      else
        echo "Skipping step since no Cachi2 SBOM was produced"
      fi
    securityContext:
      runAsUser: 0
    workingDir: /var/workdir
  - computeResources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    image: registry.access.redhat.com/ubi9/python-39:1-192.1722518946@sha256:0176b477075984d5a502253f951d2502f0763c551275f9585ac515b9f241d73d
    name: create-purl-sbom
    script: |
      #!/bin/python3
      import json

      with open("./sbom-cyclonedx.json") as f:
        cyclonedx_sbom = json.load(f)

      purls = [{"purl": component["purl"]} for component in cyclonedx_sbom.get("components", []) if "purl" in component]
      purl_content = {"image_contents": {"dependencies": purls}}

      with open("sbom-purl.json", "w") as output_file:
        json.dump(purl_content, output_file, indent=4)
    securityContext:
      runAsUser: 0
    workingDir: /var/workdir
  - computeResources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    image: quay.io/redhat-appstudio/base-images-sbom-script@sha256:667669e3def018f9dbb8eaf8868887a40bc07842221e9a98f6787edcff021840
    name: create-base-images-sbom
    script: |
      #!/bin/bash
      set -e
      if [[ "${IMAGE##*-}" != "${PLATFORM##*/}" ]]; then
        export IMAGE="${IMAGE}-${PLATFORM##*/}"
      fi
      python3 /app/base_images_sbom_script.py \
        --sbom=sbom-cyclonedx.json \
        --base-images-from-dockerfile=/shared/base_images_from_dockerfile \
        --base-images-digests=/shared/base_images_digests
    securityContext:
      runAsUser: 0
    workingDir: /var/workdir
  - computeResources:
      limits:
        cpu: "4"
        memory: 4Gi
      requests:
        cpu: "1"
        memory: 1Gi
    image: quay.io/konflux-ci/buildah:latest@sha256:7cb5a35b7fe44e397fbf3b834f3bd8dcd9403a7c0a0b51469e6ec75b107d0846
    name: inject-sbom-and-push
    script: |
      #!/bin/bash
      set -e
      if [[ "${IMAGE##*-}" != "${PLATFORM##*/}" ]]; then
        export IMAGE="${IMAGE}-${PLATFORM##*/}"
      fi

      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      base_image_name=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.name"}}' $IMAGE | cut -f1 -d'@')
      base_image_digest=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.digest"}}' $IMAGE)
      container=$(buildah from --pull-never $IMAGE)
      buildah copy $container sbom-cyclonedx.json sbom-purl.json /root/buildinfo/content_manifests/
      buildah config -a org.opencontainers.image.base.name=${base_image_name} -a org.opencontainers.image.base.digest=${base_image_digest} $container

      BUILDAH_ARGS=()
      if [ "${SQUASH}" == "true" ]; then
        BUILDAH_ARGS+=("--squash")
      fi

      buildah commit "${BUILDAH_ARGS[@]}" $container $IMAGE

      status=-1
      max_run=5
      sleep_sec=10
      for run in $(seq 1 $max_run); do
        status=0
        [ "$run" -gt 1 ] && sleep $sleep_sec
        echo "Pushing sbom image to registry"
        buildah push \
          --tls-verify=$TLSVERIFY \
          --digestfile /var/workdir/image-digest $IMAGE \
          docker://$IMAGE && break || status=$?
      done
      if [ "$status" -ne 0 ]; then
          echo "Failed to push sbom image to registry after ${max_run} tries"
          exit 1
      fi

      cat "/var/workdir"/image-digest | tee $(results.IMAGE_DIGEST.path)
      echo -n "$IMAGE" | tee $(results.IMAGE_URL.path)
      {
        echo -n "${IMAGE}@"
        cat "/var/workdir/image-digest"
      } >"$(results.IMAGE_REF.path)"

      # Remove tag from IMAGE while allowing registry to contain a port number.
      sbom_repo="${IMAGE%:*}"
      sbom_digest="$(sha256sum sbom-cyclonedx.json | cut -d' ' -f1)"
      # The SBOM_BLOB_URL is created by `cosign attach sbom`.
      echo -n "${sbom_repo}@sha256:${sbom_digest}" | tee "$(results.SBOM_BLOB_URL.path)"
    securityContext:
      capabilities:
        add:
        - SETFCAP
      runAsUser: 0
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /mnt/trusted-ca
      name: trusted-ca
      readOnly: true
    workingDir: /var/workdir
  - computeResources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
    name: upload-sbom
    script: |
      #!/bin/bash
      set -e
      if [[ "${IMAGE##*-}" != "${PLATFORM##*/}" ]]; then
        export IMAGE="${IMAGE}-${PLATFORM##*/}"
      fi
      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      cosign attach sbom --sbom sbom-cyclonedx.json --type cyclonedx "$(cat "$(results.IMAGE_REF.path)")"
    volumeMounts:
    - mountPath: /mnt/trusted-ca
      name: trusted-ca
      readOnly: true
    workingDir: /var/workdir
  volumes:
  - name: activation-key
    secret:
      optional: true
      secretName: $(params.ACTIVATION_KEY)
  - name: additional-secret
    secret:
      optional: true
      secretName: $(params.ADDITIONAL_SECRET)
  - name: etc-pki-entitlement
    secret:
      optional: true
      secretName: $(params.ENTITLEMENT_SECRET)
  - emptyDir: {}
    name: shared
  - configMap:
      items:
      - key: $(params.caTrustConfigMapKey)
        path: ca-bundle.crt
      name: $(params.caTrustConfigMapName)
      optional: true
    name: trusted-ca
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: workdir
  - name: ssh
    secret:
      optional: false
      secretName: multi-platform-ssh-$(context.taskRun.name)
