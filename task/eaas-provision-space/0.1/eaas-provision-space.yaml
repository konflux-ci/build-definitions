---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: eaas-provision-space
spec:
  description: >-
    Provisions an ephemeral namespace on an EaaS cluster using a crossplane namespace claim.
    This namespace can then be used to provision other ephemeral environments for testing.
  params:
    - name: ownerKind
      type: string
      default: PipelineRun
      description: >-
        The type of resource that should own the generated namespace claim.
        Deletion of this resource will trigger deletion of the SpaceRequest.
        Supported values: `PipelineRun`, `TaskRun`.
    - name: ownerName
      type: string
      description: >-
        The name of the resource that should own the generated namespace claim.
        This should either be passed the value of `$(context.pipelineRun.name)`
        or `$(context.taskRun.name)` depending on the value of `ownerKind`.
    - name: ownerUid
      type: string
      description: >-
        The uid of the resource that should own the generated namespace claim.
        This should either be passed the value of `$(context.pipelineRun.uid)`
        or `$(context.taskRun.uid)` depending on the value of `ownerKind`.
  results:
    - name: secretRef
      description: Name of a Secret containing a kubeconfig used to access the provisioned space.
      type: string
  steps:
    - name: request-space
      image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c
      env:
        - name: NAMESPACE
          value: $(context.taskRun.namespace)
        - name: OWNER_KIND
          value: $(params.ownerKind)
        - name: OWNER_NAME
          value: $(params.ownerName)
        - name: OWNER_UID
          value: $(params.ownerUid)
        - name: CLAIM_NAME
          value: $(context.taskRun.name)
        - name: SECRET
          value: $(context.taskRun.name)-secret
      script: |
        #!/bin/bash
        set -eo pipefail

        case "$OWNER_KIND" in
          PipelineRun|TaskRun)
            ;;
          *)
            echo "Unsupported value for ownerKind param"
            exit 1
            ;;
        esac

        cat <<EOF > namespace_claim.yaml
        apiVersion: eaas.konflux-ci.dev/v1alpha1
        kind: Namespace
        metadata:
          name: $CLAIM_NAME
          namespace: $NAMESPACE
          ownerReferences:
          - apiVersion: tekton.dev/v1
            kind: $OWNER_KIND
            name: $OWNER_NAME
            uid: $OWNER_UID
        spec:
          writeConnectionSecretToRef:
            name: $SECRET
        EOF

        NAME=$(oc create -f namespace_claim.yaml -o=jsonpath='{.metadata.name}')

        if oc wait namespaces.eaas.konflux-ci.dev "$NAME" --for=condition=Ready --timeout=5m; then
          echo "SecretRef: $SECRET"
          echo -n "$SECRET" > "$(results.secretRef.path)"
        else
          exit 1
        fi
