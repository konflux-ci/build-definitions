---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-dockerfile-oci-ta
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, appstudio
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: docker
spec:
  description: Discover Dockerfile from source code and push it to registry
    as an OCI artifact.
  params:
    - name: ARTIFACT_TYPE
      description: Artifact type of the Dockerfile image.
      type: string
      default: application/vnd.konflux.dockerfile
    - name: CA_TRUST_CONFIG_MAP_KEY
      description: The name of the key in the ConfigMap that contains the
        CA bundle data.
      type: string
      default: ca-bundle.crt
    - name: CA_TRUST_CONFIG_MAP_NAME
      description: The name of the ConfigMap to read CA bundle data from.
      type: string
      default: trusted-ca
    - name: CONTEXT
      description: Path to the directory to use as context.
      type: string
      default: .
    - name: DOCKERFILE
      description: Path to the Dockerfile.
      type: string
      default: ./Dockerfile
    - name: IMAGE
      description: The built binary image. The Dockerfile is pushed to the
        same image repository alongside.
      type: string
    - name: IMAGE_DIGEST
      description: The built binary image digest, which is used to construct
        the tag of Dockerfile image.
      type: string
    - name: SOURCE_ARTIFACT
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
    - name: TAG_SUFFIX
      description: Suffix of the Dockerfile image tag.
      type: string
      default: .dockerfile
  results:
    - name: IMAGE_REF
      description: Digest-pinned image reference to the Dockerfile image.
  volumes:
    - name: trusted-ca
      configMap:
        items:
          - key: $(params.CA_TRUST_CONFIG_MAP_KEY)
            path: ca-bundle.crt
        name: $(params.CA_TRUST_CONFIG_MAP_NAME)
        optional: true
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
        name: trusted-ca
        readOnly: true
        subPath: ca-bundle.crt
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/konflux-ci/build-trusted-artifacts:latest@sha256:1b744ca303ae1e017e15921c74130ae2b6760712d4ce129901dea3bc14c6092c
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: push
      image: quay.io/konflux-ci/oras:latest@sha256:16f7158cce03054630ccfdc1332a76c1517d805ff707826d2ccf29f09b1228eb
      workingDir: /var/workdir
      env:
        - name: IMAGE
          value: $(params.IMAGE)
        - name: IMAGE_DIGEST
          value: $(params.IMAGE_DIGEST)
        - name: TAG_SUFFIX
          value: $(params.TAG_SUFFIX)
        - name: DOCKERFILE
          value: $(params.DOCKERFILE)
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: ARTIFACT_TYPE
          value: $(params.ARTIFACT_TYPE)
        - name: IMAGE_REF_RESULT
          value: $(results.IMAGE_REF.path)
      script: |
        set -eu
        set -o pipefail

        # Same discovery logic used in buildah task
        SOURCE_CODE_DIR=source
        if [ -e "$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE" ]; then
          dockerfile_path="$(pwd)/$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE"
        elif [ -e "$SOURCE_CODE_DIR/$DOCKERFILE" ]; then
          dockerfile_path="$(pwd)/$SOURCE_CODE_DIR/$DOCKERFILE"
        elif echo "$DOCKERFILE" | grep -q "^https\?://"; then
          echo "Fetch Dockerfile from $DOCKERFILE"
          dockerfile_path=$(mktemp --suffix=-dockerfile)
          http_code=$(curl -s -L -w "%{http_code}" --output "$dockerfile_path" "$DOCKERFILE")
          if [ $http_code != 200 ]; then
            echo "No Dockerfile is fetched. Server responds $http_code"
            exit 1
          fi
        else
          echo "Cannot find Dockerfile $DOCKERFILE"
          exit 1
        fi

        echo "Selecting auth for $IMAGE"
        auth_json=$(mktemp)
        select-oci-auth $IMAGE >"$auth_json"

        dockerfile_image=${IMAGE%:*}:${IMAGE_DIGEST/:/-}${TAG_SUFFIX}

        dockerfile_for_upload_path=/tmp/Dockerfile
        cp "$dockerfile_path" "$dockerfile_for_upload_path"
        cd "$(dirname $dockerfile_for_upload_path)"
        echo "Pushing Dockerfile to registry"
        if ! retry oras push --no-tty \
          --format json \
          --registry-config "$auth_json" \
          --artifact-type "$ARTIFACT_TYPE" \
          "$dockerfile_image" "$(basename $dockerfile_for_upload_path)" |
          yq '.reference' | tr -d '\r\n' >"$IMAGE_REF_RESULT"; then
          echo "Failed to push Dockerfile to registry"
          exit 1
        fi
      computeResources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 256Mi
