apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: build-maven-zip
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "maven-build, konflux"
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "maven-zip"
spec:
  description: |-
    Build-maven-zip task builds prefetched maven artifacts into a OCI-artifact with zip bundle  and pushes the OCI-artifact into container registry.
    In addition it will use the SBOM file in prefetch-task, pushes the SBOM file to same registry of zip oci-artifact using cosign tool.
    Note that this task needs the output of prefetch-dependencies task. If it is not activated, there will not be any output from this task.
  params:
  - description: Reference of the OCI-Artifact this build task will produce.
    name: IMAGE
    type: string
  - default: "maven-repository"
    description: The root directory of the artifacts under the prefetched directory. Will be kept in the maven zip as the top directory for all artifacts.
    name: PREFETCH_ROOT
    type: string
  - default: "maven-repository"
    description: The zip bundle file name of archived artifacts
    name: FILE_NAME
    type: string
  - default: ""
    description: Delete image tag after specified time. Empty means to keep the image tag. Time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
    name: IMAGE_EXPIRES_AFTER
    type: string
  - name: caTrustConfigMapName
    type: string
    description: The name of the ConfigMap to read CA bundle data from.
    default: trusted-ca
  - name: caTrustConfigMapKey
    type: string
    description: The name of the key in the ConfigMap that contains the CA bundle data.
    default: ca-bundle.crt

  results:
  - description: Digest of the OCI-Artifact just built
    name: IMAGE_DIGEST
  - description: OCI-Artifact repository and tag where the built OCI-Artifact was pushed
    name: IMAGE_URL
  - description: OCI-Artifact reference of the built OCI-Artifact
    name: IMAGE_REF
  - name: SBOM_BLOB_URL
    description: Reference of SBOM blob digest to enable digest-based verification from provenance
    type: string
  stepTemplate:
    env:
    - name: IMAGE
      value: $(params.IMAGE)
    - name: PKG_ROOT
      value: $(params.PREFETCH_ROOT)
    - name: FILE_NAME
      value: $(params.FILE_NAME)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.IMAGE_EXPIRES_AFTER)
    volumeMounts:
      - mountPath: /shared
        name: shared

  steps:
  - image: quay.io/konflux-ci/appstudio-utils@sha256:149eae585c2f297537f980dd155975ae7c7987228e8ab595b849e02d98790367
    name: prepare
    computeResources:
      limits:
        memory: 8Gi
      requests:
        memory: 2Gi
        cpu: '1'
    script: |
      #!/bin/bash
      set -euo pipefail
      # Generate checksums for all maven artifact files. It will ignore the checksum files
      # and signature files if they existed there
      pkgpath="$(workspaces.source.path)/cachi2/output/deps/generic"
      if [ -d "$pkgpath/${PKG_ROOT}" ]; then
        echo "Generating checksums for artifacts"
        while IFS= read -r -d '' f
        do
          md5sum "$f" | awk '{print $1}'> "$f.md5"
          sha1sum "$f" | awk '{print $1}'> "$f.sha1"
          sha256sum "$f" | awk '{print $1}'> "$f.sha256"
        done <   <(find "$pkgpath/${PKG_ROOT}" -type f ! -name "*.md5" \
        ! -name "*.sha1" ! -name "*.sha128" ! -name "*.sha256" \
        ! -name "*.sha512" ! -name "*.asc" -print0)
        # Bundle the artifacts and checksums together into a zip file
        cd "$pkgpath"
        echo "create maven zip to $(workspaces.source.path)/cachi2/output/${FILE_NAME}.zip"
        zip -rq "${FILE_NAME}.zip" "${PKG_ROOT}"
        mv "${FILE_NAME}.zip" "/shared/${FILE_NAME}.zip"
      else
        echo "No ${PKG_ROOT} dir found, can not generate maven zip!"
        exit 1
      fi
    securityContext:
      capabilities:
        add:
          - SETFCAP
    workingDir: $(workspaces.source.path)
  - image: quay.io/konflux-ci/oras:latest@sha256:6fac267f9e0bba447d2ed654312fa8fd7e100660ef8c3db041fc670cf7677213
    name: build
    computeResources:
      limits:
        memory: 8Gi
      requests:
        memory: 2Gi
        cpu: '1'
    script: |
      #!/bin/bash
      set -euo pipefail
      if [ -f "/shared/${FILE_NAME}.zip" ]; then
        mv "/shared/${FILE_NAME}.zip" "./${FILE_NAME}.zip"
        select-oci-auth "$IMAGE" > auth.json
        [ -n "$IMAGE_EXPIRES_AFTER" ] && EXPIRE_LABEL=("--annotation" "quay.expires-after=$IMAGE_EXPIRES_AFTER")
        oras push "$IMAGE" \
          --registry-config auth.json \
          "${EXPIRE_LABEL[@]}" \
          --artifact-type application/vnd.maven+zip "${FILE_NAME}.zip"
        RESULTING_DIGEST=$(oras resolve --registry-config auth.json "${IMAGE}")
        echo -n "$IMAGE" | tee "$(results.IMAGE_URL.path)"
        echo -n "$RESULTING_DIGEST" | tee "$(results.IMAGE_DIGEST.path)"
        echo -n "${IMAGE}@${RESULTING_DIGEST}" | tee "$(results.IMAGE_REF.path)"
      else
        echo "The maven zip file is not found!"
        exit 1
      fi

      # Save the SBOM produced by Cachi2 so it can be merged into the final SBOM later
      if [ -f "$(workspaces.source.path)/cachi2/output/bom.json" ]; then
        cp -vf "$(workspaces.source.path)/cachi2/output/bom.json" ./sbom.json
      else
        echo "The SBOM file for fetched artifacts is not found!"
        exit 1
      fi
    securityContext:
      capabilities:
        add:
          - SETFCAP
    volumeMounts:
    - name: trusted-ca
      mountPath: /mnt/trusted-ca
      readOnly: true
    workingDir: $(workspaces.source.path)
  - name: upload-sbom
    image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
    script: |
      #!/bin/bash
      set -euo pipefail
      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      if jq -e '.bomFormat == "CycloneDX"' < sbom.json >/dev/null; then
        sbom_type=cyclonedx
      else
        sbom_type=spdx
      fi

      cosign attach sbom --sbom sbom.json --type "$sbom_type" "$IMAGE"

      # Remove tag from IMAGE while allowing registry to contain a port number.
      sbom_repo="${IMAGE%:*}"
      sbom_tag="sha256-$(< "$(results.IMAGE_DIGEST.path)" cut -d: -f2).sbom"
      # The SBOM_BLOB_URL is created by `cosign attach sbom`.
      echo -n "${sbom_repo}:${sbom_tag}" | tee "$(results.SBOM_BLOB_URL.path)"
    computeResources:
      limits:
        memory: 512Mi
      requests:
        memory: 256Mi
        cpu: 100m
    volumeMounts:
    - name: trusted-ca
      mountPath: /mnt/trusted-ca
      readOnly: true
    workingDir: $(workspaces.source.path)

  volumes:
  - name: shared
    emptyDir: {}
  - name: trusted-ca
    configMap:
      name: $(params.caTrustConfigMapName)
      items:
        - key: $(params.caTrustConfigMapKey)
          path: ca-bundle.crt
      optional: true
  workspaces:
  - name: source
    description: Workspace containing the source code to build.
