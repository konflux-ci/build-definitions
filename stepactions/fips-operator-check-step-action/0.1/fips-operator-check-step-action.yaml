---
apiVersion: tekton.dev/v1beta1
kind: StepAction
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "konflux"
  name: fips-operator-check-step-action
spec:
  description: >-
    This stepAction scans relatedImages of operator bundle image builds for FIPS compliance using the check-payload tool.
  results:
    - name: TEST_OUTPUT
      description: Tekton task test output.
  image: quay.io/redhat-appstudio/konflux-test:v1.4.23@sha256:e451a01a24824fbac8c3a667924337f67153a5bdaa68001410183bbac37e000f
  securityContext:
    capabilities:
      add:
        - SETFCAP
  script: |
    #!/usr/bin/env bash
    set -euo pipefail
    # shellcheck source=/dev/null
    . /utils.sh

    success_counter=0
    warnings_counter=0
    error_counter=0
    failure_counter=0

    export RETRY_COUNT=2
    export RETRY_INTERVAL=5

    if [ ! -e "/tekton/home/unique_related_images.txt" ]; then
      echo "No relatedImages to process"
      exit 0
    fi

    mapfile -d ' ' -t related_images < <(cat /tekton/home/unique_related_images.txt)
    echo "Related images are :"
    printf "%s\n" "${related_images[@]}"

    # If target OCP version is found, use it to apply the exception list when running check-payload
    check_payload_version=""
    if [ -f "/tekton/home/target_ocp_version.txt" ]; then
      version=$(cat "/tekton/home/target_ocp_version.txt")
      check_payload_version="-V=${version}"
      echo "Target OCP version found: ${check_payload_version}"
    fi

    # Check if an image to mirror map is defined for unreleased images
    image_mirror_map=""
    if [ -f "/tekton/home/related-images-map.txt" ]; then
      image_mirror_map=$(cat "/tekton/home/related-images-map.txt")
      echo "Image Mirror Map found:"
      echo "${image_mirror_map}" | jq '.'
    fi

    declare -i count=0
    for related_image in "${related_images[@]}"; do
      related_image="${related_image//$'\n'/}"
      count+=1
      echo "Processing related image ${count} of ${#related_images[@]}: ${related_image}"

      image_accessible=0
      if ! image_labels=$(get_image_labels "$related_image"); then
        echo "Could not inspect original pullspec $related_image. Checking if there's a mirror present"
        if [ -n "${image_mirror_map}" ]; then
          reg_and_repo=$(get_image_registry_and_repository "${related_image}")
          mapfile -t mirrors < <(echo "${image_mirror_map}" | jq -r --arg image "${reg_and_repo}" '.[$image][]')
          echo "Mirrors for $reg_and_repo are:"
          printf "%s\n" "${mirrors[@]}"

          for mirror in "${mirrors[@]}"; do
            echo "Attempting to use mirror ${mirror}"
            replaced_image=$(replace_image_pullspec "$related_image" "$mirror")
            if ! image_labels=$(get_image_labels "$replaced_image"); then
              echo "Mirror $mirror is inaccessible."
              continue
            fi
            image_accessible=1
            echo "Replacing $related_image with $replaced_image"
            related_image="$replaced_image"
            break
          done

        fi
      else
        image_accessible=1
        echo "Successfully inspected $related_image. Mirror not required."
      fi

      if [[ $image_accessible -eq 0 ]]; then
        echo -e "Error: Unable to scan image: Could not inspect image ${related_image} for labels\n"
        error_counter=$((error_counter + 1))
        continue
      fi
      component_label=$(echo "${image_labels}" | grep 'com.redhat.component=' | cut -d= -f2 | tr -d '\n\r' | xargs || true)
      version_label=$(echo "${image_labels}" | grep '^version=' | cut -d= -f2 | tr -d '\n\r' | xargs || true)
      release_label=$(echo "${image_labels}" | grep 'release=' | cut -d= -f2 | tr -d '\n\r' | xargs || true)
      echo "Component label is ${component_label}"
      echo "Version label is ${version_label}"
      echo "Release label is ${release_label}"

      if [ -z "${component_label}" ]; then
        echo -e "Error: Unable to scan image: Could not get com.redhat.component label for ${related_image}\n"
        error_counter=$((error_counter + 1))
        continue
      fi

      # Convert image to OCI format since umoci can only handle the OCI format
      if ! retry skopeo copy --remove-signatures "docker://${related_image}" "oci:///tekton/home/${component_label}-${version_label}-${release_label}:latest"; then
        echo -e "Error: Unable to scan image: Could not convert image ${related_image} to OCI format\n"
        error_counter=$((error_counter + 1))
        continue
      fi

      # Unpack OCI image
      if ! retry umoci raw unpack --rootless \
          --image "/tekton/home/${component_label}-${version_label}-${release_label}:latest" \
          "/tekton/home/unpacked-${component_label}-${version_label}-${release_label}"; then
        echo -e "Error: Unable to scan image: Could not unpack OCI image ${related_image}\n"
        error_counter=$((error_counter + 1))
        continue
      fi

      # Run check-payload on the unpacked image
      # The check-payload command fails with exit 1 when the scan for an image is unsuccessful
      # or when the image is not FIPS compliant. Hence, count those as failures and not errors
      if ! check-payload scan local \
          --path="/tekton/home/unpacked-${component_label}-${version_label}-${release_label}" \
          "${check_payload_version}" \
          --components="${component_label}" \
          --output-format=csv \
          --output-file="/tekton/home/report-${component_label}-${version_label}-${release_label}.csv"; then
        echo -e "check-payload scan failed for ${related_image}\n"
        failure_counter=$((failure_counter + 1))
        continue
      fi

      if [ -f "/tekton/home/report-${component_label}-${version_label}-${release_label}.csv" ]; then
        if grep -q -- "---- Successful run" "/tekton/home/report-${component_label}-${version_label}-${release_label}.csv"; then
          echo -e "check-payload scan was successful for ${related_image}\n"
          success_counter=$((success_counter + 1))
        elif grep -q -- "---- Successful run with warnings" "/tekton/home/report-${component_label}-${version_label}-${release_label}.csv"; then
          echo -e "check-payload scan was successful with warnings for ${related_image}\n"
          warnings_counter=$((warnings_counter + 1))
        fi
      fi

    done

    note="Task $(context.task.name) failed: Some images could not be scanned. For details, check Tekton task log."
    ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")

    note="Task $(context.task.name) completed: Check result for task result."
    if [[ "$error_counter" == 0 ]];
    then
      if [[ "${failure_counter}" -gt 0 ]]; then
        RES="FAILURE"
      elif [[ "${warnings_counter}" -gt 0 ]]; then
        RES="WARNING"
      else
        RES="SUCCESS"
      fi
      TEST_OUTPUT=$(make_result_json \
        -r "${RES}" \
        -s "${success_counter}" -f "${failure_counter}" -w "${warnings_counter}" -t "$note")
    fi
    echo "${TEST_OUTPUT:-${ERROR_OUTPUT}}" | tee "$(step.results.TEST_OUTPUT.path)"
