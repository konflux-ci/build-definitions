apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: eaas-create-ephemeral-cluster-hypershift-aws
spec:
  description: >-
    This StepAction provisions an ephemeral cluster using Hypershift with 3 worker nodes in AWS.
    It does so by creating a ClusterTemplateInstance in a space on an EaaS cluster.
  image: registry.redhat.io/openshift4/ose-cli@sha256:15da03b04318bcc842060b71e9dd6d6c2595edb4e8fdd11b0c6781eeb03ca182
  params:
    - name: eaasSpaceSecretRef
      type: string
      description: Name of a secret containing credentials for accessing an EaaS space.
    - name: version
      type: string
      description: >-
        The version of OpenShift to install. Container images will be pulled from:
        `quay.io/openshift-release-dev/ocp-release:${version}-multi`.
    - name: instanceType
      type: string
      default: m6g.large
      description: >-
        AWS EC2 instance type for worker nodes.
        Supported values: `m5.large`, `m5.xlarge`, `m5.2xlarge`, `m6g.large`, `m6g.xlarge`, `m6g.2xlarge`
    - name: insecureSkipTLSVerify
      type: string
      default: "false"
      description: >-
        Skip TLS verification when accessing the EaaS hub cluster.
        This should not be set to "true" in a production environment.
  results:
    - name: clusterName
      description: The name of the generated ClusterTemplateInstance resource.
  env:
    - name: INSTANCE_TYPE
      value: "$(params.instanceType)"
    - name: VERSION
      value: "$(params.version)"
    - name: KUBECONFIG
      value: /tmp/kubeconfig
    - name: KUBECONFIG_VALUE
      valueFrom:
        secretKeyRef:
          name: $(params.eaasSpaceSecretRef)
          key: kubeconfig
    - name: INSECURE_SKIP_TLS_VERIFY
      value: "$(params.insecureSkipTLSVerify)"
  script: |
    #!/bin/bash
    set -eo pipefail

    cat <<EOF > cti.yaml
    apiVersion: clustertemplate.openshift.io/v1alpha1
    kind: ClusterTemplateInstance
    metadata:
      generateName: cluster-
    spec:
      clusterTemplateRef: hypershift-aws-cluster
      parameters:
        - name: instanceType
          value: $INSTANCE_TYPE
        - name: version
          value: $VERSION
    EOF

    trap 'rm -f "$KUBECONFIG"' EXIT
    echo "$KUBECONFIG_VALUE" > $KUBECONFIG

    OC=(oc --insecure-skip-tls-verify="$INSECURE_SKIP_TLS_VERIFY")
    CTI_NAME=$("${OC[@]}" create -f cti.yaml -o=jsonpath='{.metadata.name}')
    echo "Created ClusterTemplateInstance $CTI_NAME"
    echo -n $CTI_NAME > $(step.results.clusterName.path)

    echo "Waiting for ClusterTemplateInstance to be ready (20m timeout)"
    if "${OC[@]}" wait cti $CTI_NAME --for=jsonpath='{.status.phase}'=Ready --timeout=20m; then
      echo "Successfully provisioned $CTI_NAME"
      exit 0
    else
      "${OC[@]}" get cti $CTI_NAME -o yaml
      echo "Failed to provision $CTI_NAME"
      exit 1
    fi
