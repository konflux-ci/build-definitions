apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: eaas-create-ephemeral-cluster-hypershift-aws
spec:
  description: >-
    This StepAction provisions an ephemeral cluster using Hypershift with 3 worker nodes in AWS.
    It does so by creating a ClusterTemplateInstance in a space on an EaaS cluster.
  image: quay.io/konflux-ci/appstudio-utils@sha256:ae8cf015eee19adef1ae5b7a6b346fb1a74acd59bfff55e57744527f283cf1f0
  params:
    - name: eaasSpaceSecretRef
      type: string
      description: Name of a secret containing credentials for accessing an EaaS space.
    - name: version
      type: string
      description: >-
        The version of OpenShift to install. Container images will be pulled from:
        `quay.io/openshift-release-dev/ocp-release:${version}-multi`.
    - name: instanceType
      type: string
      default: m6g.large
      description: >-
        AWS EC2 instance type for worker nodes.
        Supported values: `m5.large`, `m5.xlarge`, `m5.2xlarge`, `m6g.large`, `m6g.xlarge`, `m6g.2xlarge`
    - name: insecureSkipTLSVerify
      type: string
      default: "false"
      description: >-
        Skip TLS verification when accessing the EaaS hub cluster.
        This should not be set to "true" in a production environment.
    - name: timeout
      type: string
      default: 30m
      description: How long to wait for cluster provisioning to complete.
    - name: imageContentSources
      type: string
      default: ""
      description: >-
        Alternate registry information containing a list of sources and their mirrors in yaml format.
        See: https://hypershift-docs.netlify.app/how-to/disconnected/image-content-sources
  results:
    - name: clusterName
      description: The name of the generated ClusterTemplateInstance resource.
  env:
    - name: INSTANCE_TYPE
      value: "$(params.instanceType)"
    - name: VERSION
      value: "$(params.version)"
    - name: KUBECONFIG
      value: /tmp/kubeconfig
    - name: KUBECONFIG_VALUE
      valueFrom:
        secretKeyRef:
          name: $(params.eaasSpaceSecretRef)
          key: kubeconfig
    - name: INSECURE_SKIP_TLS_VERIFY
      value: "$(params.insecureSkipTLSVerify)"
    - name: TIMEOUT
      value: "$(params.timeout)"
    - name: IMAGE_CONTENT_SOURCES
      value: "$(params.imageContentSources)"
    - name: TENANT
      value: "$(context.taskRun.namespace)"
  script: |
    #!/bin/bash
    set -eo pipefail

    cat <<EOF > cti.yaml
    ---
    apiVersion: clustertemplate.openshift.io/v1alpha1
    kind: ClusterTemplateInstance
    metadata:
      generateName: cluster-
      labels:
        eaas.konflux-ci.dev/tenant: $TENANT
    spec:
      clusterTemplateRef: hypershift-aws-cluster
      parameters: []
    EOF

    yq -i '.spec.parameters += {"name": "instanceType", "value": strenv(INSTANCE_TYPE)}' cti.yaml
    yq -i '.spec.parameters += {"name": "version", "value": strenv(VERSION)}' cti.yaml
    yq -i '.spec.parameters += {"name": "timeout", "value": strenv(TIMEOUT)}' cti.yaml
    yq -i '.spec.parameters += {"name": "imageContentSources", "value": strenv(IMAGE_CONTENT_SOURCES)}' cti.yaml

    echo "Creating the following resource:"
    cat cti.yaml

    trap 'rm -f "$KUBECONFIG"' EXIT
    echo "$KUBECONFIG_VALUE" > $KUBECONFIG

    KUBECTL=(kubectl --insecure-skip-tls-verify="$INSECURE_SKIP_TLS_VERIFY")
    CTI_NAME=$("${KUBECTL[@]}" create -f cti.yaml -o=jsonpath='{.metadata.name}')
    echo "Created ClusterTemplateInstance $CTI_NAME"
    echo -n $CTI_NAME > $(step.results.clusterName.path)

    echo "Waiting for ClusterTemplateInstance to be ready ($TIMEOUT timeout)"
    if "${KUBECTL[@]}" wait cti "$CTI_NAME" --for=jsonpath='{.status.phase}'=Ready --timeout="$TIMEOUT"; then
      echo "Successfully provisioned $CTI_NAME"
      exit 0
    else
      "${KUBECTL[@]}" get cti "$CTI_NAME" -o yaml
      echo "Failed to provision $CTI_NAME"
      exit 1
    fi
