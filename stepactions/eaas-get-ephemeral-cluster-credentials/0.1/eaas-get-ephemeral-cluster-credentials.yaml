apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: eaas-get-ephemeral-cluster-credentials
spec:
  description: >-
    This StepAction queries the EaaS hub cluster to get the kubeconfig for an ephemeral cluster
    by name. Credentials are stored in a mounted volume that must be provided as a param.
  image: registry.redhat.io/openshift4/ose-cli@sha256:15da03b04318bcc842060b71e9dd6d6c2595edb4e8fdd11b0c6781eeb03ca182
  params:
    - name: eaasSpaceSecretRef
      type: string
      description: Name of a secret containing credentials for accessing an EaaS space.
    - name: clusterName
      type: string
      description: The name of a ClusterTemplateInstance.
    - name: credentials
      type: string
      description: A volume to which the remote cluster credentials will be written.
    - name: insecureSkipTLSVerify
      type: string
      default: "false"
      description: >-
        Skip TLS verification when accessing the EaaS hub cluster.
        This should not be set to "true" in a production environment.
  results:
    - name: kubeconfig
      description: Relative path to the kubeconfig in the mounted volume
  env:
    - name: CLUSTER_NAME
      value: "$(params.clusterName)"
    - name: CLUSTER_KUBECONFIG
      value: "/credentials/$(params.clusterName)-kubeconfig"
    - name: KUBECONFIG
      value: /tmp/eaas-kubeconfig
    - name: KUBECONFIG_VALUE
      valueFrom:
        secretKeyRef:
          name: $(params.eaasSpaceSecretRef)
          key: kubeconfig
    - name: INSECURE_SKIP_TLS_VERIFY
      value: "$(params.insecureSkipTLSVerify)"
  volumeMounts:
    - name: "$(params.credentials)"
      mountPath: /credentials
  script: |
    #!/bin/bash
    set -eo pipefail

    trap 'rm -f "$KUBECONFIG"' EXIT
    echo "$KUBECONFIG_VALUE" > $KUBECONFIG

    OC=(oc --insecure-skip-tls-verify="$INSECURE_SKIP_TLS_VERIFY")
    SECRET=$("${OC[@]}" get cti $CLUSTER_NAME -o=jsonpath='{.status.kubeconfig.name}')
    echo "Found kubeconfig secret: $SECRET"
    "${OC[@]}" get secret $SECRET -o go-template --template="{{.data.kubeconfig|base64decode}}" > $CLUSTER_KUBECONFIG
    echo "Wrote kubeconfig to $CLUSTER_KUBECONFIG"
    echo -n $(basename $CLUSTER_KUBECONFIG) > $(step.results.kubeconfig.path)
